[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "CodeType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "after_this_request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "main_thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "main_thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "webview",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webview",
        "description": "webview",
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "FileDialog",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "windows",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "FileDialog",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "windows",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "FileDialog",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "windows",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "FileDialog",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "_state",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "windows",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "WebViewException",
        "importPath": "webview",
        "description": "webview",
        "isExtraImport": true,
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "pystray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pystray",
        "description": "pystray",
        "detail": "pystray",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageOps",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "machine",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "architecture",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "dedent",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "IPython.testing.tools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "IPython.testing.tools",
        "description": "IPython.testing.tools",
        "detail": "IPython.testing.tools",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "AutoreloadMagics",
        "importPath": "IPython.extensions.autoreload",
        "description": "IPython.extensions.autoreload",
        "isExtraImport": true,
        "detail": "IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "AutoreloadMagics",
        "importPath": "IPython.extensions.autoreload",
        "description": "IPython.extensions.autoreload",
        "isExtraImport": true,
        "detail": "IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "EventManager",
        "importPath": "IPython.core.events",
        "description": "IPython.core.events",
        "isExtraImport": true,
        "detail": "IPython.core.events",
        "documentation": {}
    },
    {
        "label": "pre_run_cell",
        "importPath": "IPython.core.events",
        "description": "IPython.core.events",
        "isExtraImport": true,
        "detail": "IPython.core.events",
        "documentation": {}
    },
    {
        "label": "EventManager",
        "importPath": "IPython.core.events",
        "description": "IPython.core.events",
        "isExtraImport": true,
        "detail": "IPython.core.events",
        "documentation": {}
    },
    {
        "label": "pre_run_cell",
        "importPath": "IPython.core.events",
        "description": "IPython.core.events",
        "isExtraImport": true,
        "detail": "IPython.core.events",
        "documentation": {}
    },
    {
        "label": "skipif_not_numpy",
        "importPath": "IPython.testing.decorators",
        "description": "IPython.testing.decorators",
        "isExtraImport": true,
        "detail": "IPython.testing.decorators",
        "documentation": {}
    },
    {
        "label": "skipif_not_numpy",
        "importPath": "IPython.testing.decorators",
        "description": "IPython.testing.decorators",
        "isExtraImport": true,
        "detail": "IPython.testing.decorators",
        "documentation": {}
    },
    {
        "label": "ExecutionInfo",
        "importPath": "IPython.core.interactiveshell",
        "description": "IPython.core.interactiveshell",
        "isExtraImport": true,
        "detail": "IPython.core.interactiveshell",
        "documentation": {}
    },
    {
        "label": "ExecutionInfo",
        "importPath": "IPython.core.interactiveshell",
        "description": "IPython.core.interactiveshell",
        "isExtraImport": true,
        "detail": "IPython.core.interactiveshell",
        "documentation": {}
    },
    {
        "label": "tempfile,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile.",
        "description": "tempfile.",
        "detail": "tempfile.",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "traitlets.config.loader",
        "description": "traitlets.config.loader",
        "isExtraImport": true,
        "detail": "traitlets.config.loader",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "traitlets.config.loader",
        "description": "traitlets.config.loader",
        "isExtraImport": true,
        "detail": "traitlets.config.loader",
        "documentation": {}
    },
    {
        "label": "magic_arguments",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "magic_arguments",
        "importPath": "IPython.core",
        "description": "IPython.core",
        "isExtraImport": true,
        "detail": "IPython.core",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "line_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "line_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "line_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "line_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "reload",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "reload",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "source_from_cache",
        "importPath": "importlib.util",
        "description": "importlib.util",
        "isExtraImport": true,
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "source_from_cache",
        "importPath": "importlib.util",
        "description": "importlib.util",
        "isExtraImport": true,
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "inspect,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect.",
        "description": "inspect.",
        "detail": "inspect.",
        "documentation": {}
    },
    {
        "label": "UsageError",
        "importPath": "IPython.core.error",
        "description": "IPython.core.error",
        "isExtraImport": true,
        "detail": "IPython.core.error",
        "documentation": {}
    },
    {
        "label": "UsageError",
        "importPath": "IPython.core.error",
        "description": "IPython.core.error",
        "isExtraImport": true,
        "detail": "IPython.core.error",
        "documentation": {}
    },
    {
        "label": "skip_doctest",
        "importPath": "IPython.testing.skipdoctest",
        "description": "IPython.testing.skipdoctest",
        "isExtraImport": true,
        "detail": "IPython.testing.skipdoctest",
        "documentation": {}
    },
    {
        "label": "skip_doctest",
        "importPath": "IPython.testing.skipdoctest",
        "description": "IPython.testing.skipdoctest",
        "isExtraImport": true,
        "detail": "IPython.testing.skipdoctest",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Bool",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websocket",
        "description": "websocket",
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Html2Image",
        "importPath": "html2image",
        "description": "html2image",
        "isExtraImport": true,
        "detail": "html2image",
        "documentation": {}
    },
    {
        "label": "Html2Image",
        "importPath": "html2image",
        "description": "html2image",
        "isExtraImport": true,
        "detail": "html2image",
        "documentation": {}
    },
    {
        "label": "chrome",
        "importPath": "html2image.browsers",
        "description": "html2image.browsers",
        "isExtraImport": true,
        "detail": "html2image.browsers",
        "documentation": {}
    },
    {
        "label": "chrome_cdp",
        "importPath": "html2image.browsers",
        "description": "html2image.browsers",
        "isExtraImport": true,
        "detail": "html2image.browsers",
        "documentation": {}
    },
    {
        "label": "edge",
        "importPath": "html2image.browsers",
        "description": "html2image.browsers",
        "isExtraImport": true,
        "detail": "html2image.browsers",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "html2image.browsers.browser",
        "description": "html2image.browsers.browser",
        "isExtraImport": true,
        "detail": "html2image.browsers.browser",
        "documentation": {}
    },
    {
        "label": "CDPBrowser",
        "importPath": "html2image.browsers.browser",
        "description": "html2image.browsers.browser",
        "isExtraImport": true,
        "detail": "html2image.browsers.browser",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsFloat",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsInt",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Flag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "UserDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "olefile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "olefile",
        "description": "olefile",
        "detail": "olefile",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "array",
        "description": "array",
        "detail": "array",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "shlex",
        "description": "shlex",
        "isExtraImport": true,
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "mmap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mmap",
        "description": "mmap",
        "detail": "mmap",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "importPath": "fractions",
        "description": "fractions",
        "isExtraImport": true,
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "ManipulationMode",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "DOMEventHandler",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "ManipulationMode",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "_dnd_state",
        "importPath": "webview.dom",
        "description": "webview.dom",
        "isExtraImport": true,
        "detail": "webview.dom",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "webview.dom.element",
        "description": "webview.dom.element",
        "isExtraImport": true,
        "detail": "webview.dom.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "webview.dom.element",
        "description": "webview.dom.element",
        "isExtraImport": true,
        "detail": "webview.dom.element",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "webview.dom.element",
        "description": "webview.dom.element",
        "isExtraImport": true,
        "detail": "webview.dom.element",
        "documentation": {}
    },
    {
        "label": "ClassList",
        "importPath": "webview.dom.classlist",
        "description": "webview.dom.classlist",
        "isExtraImport": true,
        "detail": "webview.dom.classlist",
        "documentation": {}
    },
    {
        "label": "DOMPropType",
        "importPath": "webview.dom.propsdict",
        "description": "webview.dom.propsdict",
        "isExtraImport": true,
        "detail": "webview.dom.propsdict",
        "documentation": {}
    },
    {
        "label": "PropsDict",
        "importPath": "webview.dom.propsdict",
        "description": "webview.dom.propsdict",
        "isExtraImport": true,
        "detail": "webview.dom.propsdict",
        "documentation": {}
    },
    {
        "label": "JavascriptException",
        "importPath": "webview.errors",
        "description": "webview.errors",
        "isExtraImport": true,
        "detail": "webview.errors",
        "documentation": {}
    },
    {
        "label": "WebViewException",
        "importPath": "webview.errors",
        "description": "webview.errors",
        "isExtraImport": true,
        "detail": "webview.errors",
        "documentation": {}
    },
    {
        "label": "JavascriptException",
        "importPath": "webview.errors",
        "description": "webview.errors",
        "isExtraImport": true,
        "detail": "webview.errors",
        "documentation": {}
    },
    {
        "label": "WebViewException",
        "importPath": "webview.errors",
        "description": "webview.errors",
        "isExtraImport": true,
        "detail": "webview.errors",
        "documentation": {}
    },
    {
        "label": "EventContainer",
        "importPath": "webview.event",
        "description": "webview.event",
        "isExtraImport": true,
        "detail": "webview.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "webview.event",
        "description": "webview.event",
        "isExtraImport": true,
        "detail": "webview.event",
        "documentation": {}
    },
    {
        "label": "EventContainer",
        "importPath": "webview.event",
        "description": "webview.event",
        "isExtraImport": true,
        "detail": "webview.event",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "css_to_camel",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "escape_quotes",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "parse_file_type",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "stringify_headers",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "interop_dll_path",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "parse_file_type",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_base_uri",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "interop_dll_path",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "environ_append",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "inject_base_uri",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "parse_file_type",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "base_uri",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "escape_string",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "is_app",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "is_local_url",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "parse_file_type",
        "importPath": "webview.util",
        "description": "webview.util",
        "isExtraImport": true,
        "detail": "webview.util",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMultipleMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticField",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticField",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticField",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticField",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMultipleMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "MetaJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaMultipleMethod",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "JavaStaticField",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "PythonJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "java_method",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "PythonJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "java_method",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "PythonJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "java_method",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "run_on_ui_thread",
        "importPath": "android.runnable",
        "description": "android.runnable",
        "isExtraImport": true,
        "detail": "android.runnable",
        "documentation": {}
    },
    {
        "label": "run_on_ui_thread",
        "importPath": "android.runnable",
        "description": "android.runnable",
        "isExtraImport": true,
        "detail": "android.runnable",
        "documentation": {}
    },
    {
        "label": "_activity",
        "importPath": "android.activity",
        "description": "android.activity",
        "isExtraImport": true,
        "detail": "android.activity",
        "documentation": {}
    },
    {
        "label": "register_activity_lifecycle_callbacks",
        "importPath": "android.activity",
        "description": "android.activity",
        "isExtraImport": true,
        "detail": "android.activity",
        "documentation": {}
    },
    {
        "label": "_activity",
        "importPath": "android.activity",
        "description": "android.activity",
        "isExtraImport": true,
        "detail": "android.activity",
        "documentation": {}
    },
    {
        "label": "EventLoop",
        "importPath": "webview.platforms.android.base",
        "description": "webview.platforms.android.base",
        "isExtraImport": true,
        "detail": "webview.platforms.android.base",
        "documentation": {}
    },
    {
        "label": "EventDispatcher",
        "importPath": "webview.platforms.android.event",
        "description": "webview.platforms.android.event",
        "isExtraImport": true,
        "detail": "webview.platforms.android.event",
        "documentation": {}
    },
    {
        "label": "EventDispatcher",
        "importPath": "webview.platforms.android.event",
        "description": "webview.platforms.android.event",
        "isExtraImport": true,
        "detail": "webview.platforms.android.event",
        "documentation": {}
    },
    {
        "label": "Choreographer",
        "importPath": "webview.platforms.android.jclass.view",
        "description": "webview.platforms.android.jclass.view",
        "isExtraImport": true,
        "detail": "webview.platforms.android.jclass.view",
        "documentation": {}
    },
    {
        "label": "FrameCallback",
        "importPath": "webview.platforms.android.jinterface.view",
        "description": "webview.platforms.android.jinterface.view",
        "isExtraImport": true,
        "detail": "webview.platforms.android.jinterface.view",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid1",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid1",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid1",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "wintypes",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "cefpython",
        "importPath": "cefpython3",
        "description": "cefpython3",
        "isExtraImport": true,
        "detail": "cefpython3",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "AppKit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "AppKit",
        "description": "AppKit",
        "detail": "AppKit",
        "documentation": {}
    },
    {
        "label": "Foundation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Foundation",
        "description": "Foundation",
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "WebKit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "WebKit",
        "description": "WebKit",
        "detail": "WebKit",
        "documentation": {}
    },
    {
        "label": "_objc",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "nil",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "selector",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "super",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "lookUpClass",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "classAddMethod",
        "importPath": "objc",
        "description": "objc",
        "isExtraImport": true,
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "AppHelper",
        "importPath": "PyObjCTools",
        "description": "PyObjCTools",
        "isExtraImport": true,
        "detail": "PyObjCTools",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuAction",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuSeparator",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuAction",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuSeparator",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuAction",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuSeparator",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuAction",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuSeparator",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "webview.menu",
        "description": "webview.menu",
        "isExtraImport": true,
        "detail": "webview.menu",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "webview.models",
        "description": "webview.models",
        "isExtraImport": true,
        "detail": "webview.models",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "webview.screen",
        "description": "webview.screen",
        "isExtraImport": true,
        "detail": "webview.screen",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "webview.screen",
        "description": "webview.screen",
        "isExtraImport": true,
        "detail": "webview.screen",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "webview.screen",
        "description": "webview.screen",
        "isExtraImport": true,
        "detail": "webview.screen",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "webview.screen",
        "description": "webview.screen",
        "isExtraImport": true,
        "detail": "webview.screen",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "webview.screen",
        "description": "webview.screen",
        "isExtraImport": true,
        "detail": "webview.screen",
        "documentation": {}
    },
    {
        "label": "FixPoint",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "FixPoint",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "FixPoint",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "FixPoint",
        "importPath": "webview.window",
        "description": "webview.window",
        "isExtraImport": true,
        "detail": "webview.window",
        "documentation": {}
    },
    {
        "label": "clr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "clr",
        "description": "clr",
        "detail": "clr",
        "documentation": {}
    },
    {
        "label": "System.Windows.Forms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "System.Windows.Forms",
        "description": "System.Windows.Forms",
        "detail": "System.Windows.Forms",
        "documentation": {}
    },
    {
        "label": "Action",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Convert",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Func",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Uri",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Object",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Func",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Func",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Int32",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "IntPtr",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "UInt32",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Array",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "Object",
        "importPath": "System",
        "description": "System",
        "isExtraImport": true,
        "detail": "System",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "System.Collections.Generic",
        "description": "System.Collections.Generic",
        "isExtraImport": true,
        "detail": "System.Collections.Generic",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "System.Diagnostics",
        "description": "System.Diagnostics",
        "isExtraImport": true,
        "detail": "System.Diagnostics",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "ColorTranslator",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "Icon",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "Size",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "SizeF",
        "importPath": "System.Drawing",
        "description": "System.Drawing",
        "isExtraImport": true,
        "detail": "System.Drawing",
        "documentation": {}
    },
    {
        "label": "CultureInfo",
        "importPath": "System.Globalization",
        "description": "System.Globalization",
        "isExtraImport": true,
        "detail": "System.Globalization",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "System.Threading.Tasks",
        "description": "System.Threading.Tasks",
        "isExtraImport": true,
        "detail": "System.Threading.Tasks",
        "documentation": {}
    },
    {
        "label": "TaskScheduler",
        "importPath": "System.Threading.Tasks",
        "description": "System.Threading.Tasks",
        "isExtraImport": true,
        "detail": "System.Threading.Tasks",
        "documentation": {}
    },
    {
        "label": "CoreWebView2Cookie",
        "importPath": "Microsoft.Web.WebView2.Core",
        "description": "Microsoft.Web.WebView2.Core",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.Core",
        "documentation": {}
    },
    {
        "label": "CoreWebView2ServerCertificateErrorAction",
        "importPath": "Microsoft.Web.WebView2.Core",
        "description": "Microsoft.Web.WebView2.Core",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.Core",
        "documentation": {}
    },
    {
        "label": "CoreWebView2Environment",
        "importPath": "Microsoft.Web.WebView2.Core",
        "description": "Microsoft.Web.WebView2.Core",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.Core",
        "documentation": {}
    },
    {
        "label": "CoreWebView2WebResourceContext",
        "importPath": "Microsoft.Web.WebView2.Core",
        "description": "Microsoft.Web.WebView2.Core",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.Core",
        "documentation": {}
    },
    {
        "label": "CoreWebView2CreationProperties",
        "importPath": "Microsoft.Web.WebView2.WinForms",
        "description": "Microsoft.Web.WebView2.WinForms",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.WinForms",
        "documentation": {}
    },
    {
        "label": "WebView2",
        "importPath": "Microsoft.Web.WebView2.WinForms",
        "description": "Microsoft.Web.WebView2.WinForms",
        "isExtraImport": true,
        "detail": "Microsoft.Web.WebView2.WinForms",
        "documentation": {}
    },
    {
        "label": "gi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gi",
        "description": "gi",
        "detail": "gi",
        "documentation": {}
    },
    {
        "label": "Gdk",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "Gio",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "Gtk",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "WebKit2",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "IWebBrowserInterop",
        "importPath": "WebBrowserInterop",
        "description": "WebBrowserInterop",
        "isExtraImport": true,
        "detail": "WebBrowserInterop",
        "documentation": {}
    },
    {
        "label": "WebBrowserEx",
        "importPath": "WebBrowserInterop",
        "description": "WebBrowserInterop",
        "isExtraImport": true,
        "detail": "WebBrowserInterop",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "PYQT6",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "PYSIDE6",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "QJsonValue",
        "importPath": "qtpy.QtCore",
        "description": "qtpy.QtCore",
        "isExtraImport": true,
        "detail": "qtpy.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "qtpy.QtCore",
        "description": "qtpy.QtCore",
        "isExtraImport": true,
        "detail": "qtpy.QtCore",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "qtpy.QtGui",
        "description": "qtpy.QtGui",
        "isExtraImport": true,
        "detail": "qtpy.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "qtpy.QtGui",
        "description": "qtpy.QtGui",
        "isExtraImport": true,
        "detail": "qtpy.QtGui",
        "documentation": {}
    },
    {
        "label": "QScreen",
        "importPath": "qtpy.QtGui",
        "description": "qtpy.QtGui",
        "isExtraImport": true,
        "detail": "qtpy.QtGui",
        "documentation": {}
    },
    {
        "label": "QAction",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMenuBar",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "qtpy.QtWidgets",
        "description": "qtpy.QtWidgets",
        "isExtraImport": true,
        "detail": "qtpy.QtWidgets",
        "documentation": {}
    },
    {
        "label": "forced_gui_",
        "importPath": "webview.guilib",
        "description": "webview.guilib",
        "isExtraImport": true,
        "detail": "webview.guilib",
        "documentation": {}
    },
    {
        "label": "ApartmentState",
        "importPath": "System.Threading",
        "description": "System.Threading",
        "isExtraImport": true,
        "detail": "System.Threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "System.Threading",
        "description": "System.Threading",
        "isExtraImport": true,
        "detail": "System.Threading",
        "documentation": {}
    },
    {
        "label": "ThreadStart",
        "importPath": "System.Threading",
        "description": "System.Threading",
        "isExtraImport": true,
        "detail": "System.Threading",
        "documentation": {}
    },
    {
        "label": "Assembly",
        "importPath": "System.Reflection",
        "description": "System.Reflection",
        "isExtraImport": true,
        "detail": "System.Reflection",
        "documentation": {}
    },
    {
        "label": "BindingFlags",
        "importPath": "System.Reflection",
        "description": "System.Reflection",
        "isExtraImport": true,
        "detail": "System.Reflection",
        "documentation": {}
    },
    {
        "label": "SystemEvents",
        "importPath": "Microsoft.Win32",
        "description": "Microsoft.Win32",
        "isExtraImport": true,
        "detail": "Microsoft.Win32",
        "documentation": {}
    },
    {
        "label": "collect_data_files",
        "importPath": "PyInstaller.utils.hooks",
        "description": "PyInstaller.utils.hooks",
        "isExtraImport": true,
        "detail": "PyInstaller.utils.hooks",
        "documentation": {}
    },
    {
        "label": "collect_dynamic_libs",
        "importPath": "PyInstaller.utils.hooks",
        "description": "PyInstaller.utils.hooks",
        "isExtraImport": true,
        "detail": "PyInstaller.utils.hooks",
        "documentation": {}
    },
    {
        "label": "is_win",
        "importPath": "PyInstaller.compat",
        "description": "PyInstaller.compat",
        "isExtraImport": true,
        "detail": "PyInstaller.compat",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "ThreadingMixIn",
        "importPath": "socketserver",
        "description": "socketserver",
        "isExtraImport": true,
        "detail": "socketserver",
        "documentation": {}
    },
    {
        "label": "WSGIRequestHandler",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "WSGIServer",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "bottle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bottle",
        "description": "bottle",
        "detail": "bottle",
        "documentation": {}
    },
    {
        "label": "SimpleCookie",
        "importPath": "http.cookies",
        "description": "http.cookies",
        "isExtraImport": true,
        "detail": "http.cookies",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "webview.http",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webview.http",
        "description": "webview.http",
        "detail": "webview.http",
        "documentation": {}
    },
    {
        "label": "original_localization",
        "importPath": "webview.localization",
        "description": "webview.localization",
        "isExtraImport": true,
        "detail": "webview.localization",
        "documentation": {}
    },
    {
        "label": "DOM",
        "importPath": "webview.dom.dom",
        "description": "webview.dom.dom",
        "isExtraImport": true,
        "detail": "webview.dom.dom",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "webview.state",
        "description": "webview.state",
        "isExtraImport": true,
        "detail": "webview.state",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class cached_property(object):\n    \"\"\" A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. \"\"\"\n    def __init__(self, func):\n        update_wrapper(self, func)\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    \"\"\" A property that caches itself to the class object. \"\"\"\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if\n                  len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class Router(object):\n    \"\"\" A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    \"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class Route(object):\n    \"\"\" This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turning an URL path rule into a regular expression usable by the Router.\n    \"\"\"\n    def __init__(self, app, rule, method, callback,\n                 name=None,\n                 plugins=None,\n                 skiplist=None, **config):\n        #: The application this route is installed to.",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    @lazy_attribute\n    def _global_config(cls):\n        cfg = ConfigDict()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ', )\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, _):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n    \"\"\"\n    default_status = 200\n    default_content_type = 'text/html; charset=UTF-8'\n    # Header denylist for specific response codes\n    # (rfc2616 section 10.2.3 and 10.3.5)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    \"\"\" A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). \"\"\"\n    bind = BaseRequest.__init__\n    environ = _local_property()\nclass LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    \"\"\"\n    bind = BaseResponse.__init__\n    _status_line = _local_property()\n    _status_code = _local_property()\n    _cookies = _local_property()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    \"\"\" A subclass of :class:`HTTPResponse` that triggers error handlers. \"\"\"\n    default_status = 500\n    def __init__(self,\n                 status=None,\n                 body=None,\n                 exception=None,\n                 traceback=None, **more_headers):\n        self.exception = exception\n        self.traceback = traceback",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class PluginError(BottleException):\n    pass\nclass JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")\n        app.config._define('json.ascii', default=False, validate=bool,\n                          help=\"Use only 7-bit ASCII characters in output.\")",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    \"\"\" This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. \"\"\"\n    name = 'template'\n    api = 2\n    def setup(self, app):\n        app.tpl = self\n    def apply(self, callback, route):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        \"\"\" Create a virtual package that redirects imports (see PEP 302). \"\"\"\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, new_module(name))\n        self.module.__dict__.update({\n            '__file__': __file__,\n            '__path__': [],\n            '__all__': [],",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self):\n        return len(self.dict)\n    def __iter__(self):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    \"\"\" This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. \"\"\"\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key):\n        return _hkey(key) in self.dict\n    def __delitem__(self, key):\n        del self.dict[_hkey(key)]",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    \"\"\" This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    \"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}\n        self._change_listener = []",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self.default\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024 * 64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in 'fileno', 'close', 'read', 'readlines', 'tell', 'seek':\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        part = read(buff)\n        while part:\n            yield part",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class _closeiter(object):\n    \"\"\" This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). \"\"\"\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class ResourceManager(object):\n    \"\"\" This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    \"\"\"\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = opener",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        \"\"\" Wrapper for a single file uploaded via ``multipart/form-data``. \"\"\"\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultipartError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)\nclass _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartParser",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,\n        mem_limit=2 ** 20,\n        memfile_limit=2 ** 18,\n        buffer_size=2 ** 16,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartPart",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartPart(object):\n    def __init__(self, buffer_size=2 ** 16, memfile_limit=2 ** 18, charset=\"latin1\"):\n        self.headerlist = []\n        self.headers = None\n        self.file = False\n        self.size = 0\n        self._buf = b\"\"\n        self.disposition = None\n        self.name = None\n        self.filename = None",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler):  # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join('%s=%s' % (k, repr(v))",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler):  # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self):  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"The wsgi server part of cherrypy was split into a new \"\n                    \"project called 'cheroot'.\", \"Use the 'cheroot' server \"\n                    \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port, _quiet=self.quiet, **self.options)\nclass PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,\n                         host=self.host,\n                         port=str(self.port), **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler):  # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port, address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        depr(0, 13, \"AppEngineServer no longer required\",\n             \"Configure your application directly in your app.yaml\")\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        depr(0, 13, \"Diesel is not tested or supported and will be removed.\")\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"\n            raise RuntimeError(msg)\n        if self.quiet:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import BaseApplication\n        if self.host.startswith(\"unix:\"):\n            config = {'bind': self.host}\n        else:\n            config = {'bind': \"%s:%d\" % (self.host, self.port)}\n        config.update(self.options)\n        class GunicornApplication(BaseApplication):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `backlog` adjust the eventlet backlog parameter which is the maximum\n          number of queued connections. Should be at least 1; the maximum\n          value is system-dependent.\n        * `family`: (default is 2) socket family, optional. See socket\n          documentation for available families.\n    \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen, patcher",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port, reuse_port=True)\nclass AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AsyncioServerAdapter",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):\n        import asyncio\n        return asyncio.new_event_loop()\n    def run(self, handler):\n        import asyncio",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpUVLoopServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpUVLoopServer(AiohttpServer):\n    \"\"\"uvloop\n       https://github.com/MagicStack/uvloop\n    \"\"\"\n    def get_event_loop(self):\n        import uvloop\n        return uvloop.new_event_loop()\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    \"\"\" Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets too old. \"\"\"\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.daemon = True\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class TemplateError(BottleException):\n    pass\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,\n                 lookup=None,\n                 encoding='utf8', **settings):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding': self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)\n        if self.source:\n            self.tpl = self.env.from_string(self.source)\n        else:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self,\n                escape_func=html_escape,\n                noescape=False,\n                syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError):\n    pass\nclass StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "class StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')\n            |\"\"(?!\")\n            |'{6}",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    if isinstance(s, unicode):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError:\n        pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\\n           \"Fix: %s\\n\" % (major, minor, cause, fix)\n    if DEBUG == 'strict':\n        raise DeprecationWarning(text)\n    warnings.warn(text, DeprecationWarning, stacklevel=stacklevel)\n    return DeprecationWarning(text)\ndef makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):\n        return list(data)\n    elif data:\n        return [data]\n    else:\n        return []\nclass DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def static_file(filename, root,\n                mimetype=True,\n                download=False,\n                charset='UTF-8',\n                etag=None,\n                headers=None):\n    \"\"\" Open a file in a safe way and return an instance of :exc:`HTTPResponse`\n        that can be sent back to the client.\n        :param filename: Name or path of the file to send, relative to ``root``.\n        :param root: Root path for file lookups. Should be an absolute directory",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):\n        # aware datetime.datetime is converted to UTC time\n        # naive datetime.datetime is treated as UTC time\n        value = value.utctimetuple()\n    elif isinstance(value, datedate):\n        # datetime.date is naive, and is treated as UTC time\n        value = value.timetuple()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return calendar.timegm(ts[:8] + (0, )) - (ts[9] or 0)\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':', 1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    \"\"\" Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.\"\"\"\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen - int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def cookie_encode(data, key, digestmod=None):\n    \"\"\" Encode and sign a pickle-able object. Return a (byte) string \"\"\"\n    depr(0, 13, \"cookie_encode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    digestmod = digestmod or hashlib.sha256\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=digestmod).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"\n    depr(0, 13, \"cookie_decode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        digestmod = digestmod or hashlib.sha256\n        hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()\n        if _lscmp(sig[1:], base64.b64encode(hashed)):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    \"\"\" Return True if the argument looks like a encoded cookie.\"\"\"\n    depr(0, 13, \"cookie_is_encoded() will be removed soon.\",\n                \"Do not use this API directly.\")\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__', '/').lstrip('/')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    \"\"\" Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    \"\"\"\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    \"\"\" Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    \"\"\" Return a callable that relays calls to the current default app. \"\"\"\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN\n    NORUN, nr_old = True, NORUN\n    tmp = default_app.push()  # Create a new \"default application\"\n    try:\n        rv = load(target)  # Import the target module\n        return rv if callable(rv) else tmp",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,\n        config=None, **kargs):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    \"\"\"\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    \"\"\"\n    tpl = args[0] if args else None\n    for dictarg in args[1:]:\n        kwargs.update(dictarg)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"\n    def decorator(func):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "def main():\n    _main(sys.argv)\nif __name__ == '__main__':  # pragma: no coverage\n    main()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=args[0], usage=\"%(prog)s [options] package.module:app\")",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "py = sys.version_info\npy3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "py3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError\n    from collections.abc import MutableMapping as DictMixin",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_UNSET",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "_UNSET = object()\nclass ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_hsplit",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "_hsplit = re.compile('(?:(?:\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\")|([^;,=]+))([;,=]?)').findall\ndef _parse_http_header(h):\n    \"\"\" Parses a typical multi-valued and parametrised HTTP header (e.g. Accept headers) and returns a list of values\n        and parameters. For non-standard or broken input, this implementation may return partial results.\n    :param h: A header string (e.g. ``text/html,text/plain;q=0.9,*/*;q=0.8``)\n    :return: List of (value, params) tuples. The second element is a (possibly empty) dict.\n    \"\"\"\n    values = []\n    if '\"' not in h:  # INFO: Fast path without regexp (~2x faster)\n        for value in h.split(','):",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Multipart Handling ###########################################################\n###############################################################################\n# cgi.FieldStorage was deprecated in Python 3.11 and removed in 3.13\n# This implementation is based on https://github.com/defnull/multipart/\nclass MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "NORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[451]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans-serif;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "apps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.bottle",
        "description": "flask-pos1.0.0.venv.Scripts.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)\n        sys.exit(1)\n    if args.version:\n        print('Bottle %s' % __version__)",
        "detail": "flask-pos1.0.0.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "flask-pos1.0.0.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,\n            name TEXT,\n            price REAL DEFAULT 0,\n            qty INTEGER DEFAULT 0",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/manage')\ndef manage():\n    return render_template('manage.html')\n@app.route('/sales')\ndef sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "manage",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def manage():\n    return render_template('manage.html')\n@app.route('/sales')\ndef sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():\n    return render_template('stocklog.html')\n@app.route('/api/item', methods=['POST'])\ndef add_item():",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "sales",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():\n    return render_template('stocklog.html')\n@app.route('/api/item', methods=['POST'])\ndef add_item():\n    data = request.json\n    barcode = data.get('barcode')\n    name = data.get('name', 'Unnamed Product')",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "stocklog",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def stocklog():\n    return render_template('stocklog.html')\n@app.route('/api/item', methods=['POST'])\ndef add_item():\n    data = request.json\n    barcode = data.get('barcode')\n    name = data.get('name', 'Unnamed Product')\n    price = float(data.get('price', 0))\n    qty = int(data.get('qty', 0))\n    conn = sqlite3.connect('inventory.db')",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def add_item():\n    data = request.json\n    barcode = data.get('barcode')\n    name = data.get('name', 'Unnamed Product')\n    price = float(data.get('price', 0))\n    qty = int(data.get('qty', 0))\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('INSERT OR IGNORE INTO items (barcode, name, price, qty) VALUES (?, ?, ?, ?)',\n              (barcode, name, price, qty))",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def get_item(barcode):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty FROM items WHERE barcode=?', (barcode,))\n    row = c.fetchone()\n    conn.close()\n    if row:\n        return jsonify({'barcode': row[0], 'name': row[1], 'price': row[2], 'qty': row[3]})\n    else:\n        return jsonify({'error': 'Not found'}), 404",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "edit_item",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def edit_item(barcode):\n    data = request.json\n    name = data.get('name')\n    price = float(data.get('price', 0))\n    qty = int(data.get('qty', 0))\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('UPDATE items SET name=?, price=?, qty=? WHERE barcode=?',\n              (name, price, qty, barcode))\n    conn.commit()",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "del_item",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def del_item(barcode):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('DELETE FROM items WHERE barcode=?', (barcode,))\n    conn.commit()\n    conn.close()\n    return jsonify({'msg': 'deleted'})\n@app.route('/api/items', methods=['GET'])\ndef get_items():\n    conn = sqlite3.connect('inventory.db')",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def get_items():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty FROM items')\n    rows = c.fetchall()\n    conn.close()\n    return jsonify([\n        {'barcode': r[0], 'name': r[1], 'price': r[2], 'qty': r[3]}\n        for r in rows\n    ])",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "sale",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def sale():\n    data = request.json\n    cart = data.get('cart', {})\n    total = float(data.get('total', 0))\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('INSERT INTO sales (time, items, total) VALUES (?, ?, ?)', \n        (time_str, json.dumps(cart, ensure_ascii=False), total))\n    sale_id = c.lastrowid",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "get_sales",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def get_sales():\n    try:\n        page = int(request.args.get('page', 1))\n        page_size = int(request.args.get('page_size', 20))\n    except:\n        page = 1\n        page_size = 20\n    offset = (page - 1) * page_size\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "delete_sale",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def delete_sale():\n    \"\"\"\n    批量删除销售记录，原因为refund时写入refund_log，为mistake时不写入\n    - 只要有一笔负库存就整体失败\n    - 返回操作统计，接口结构统一\n    \"\"\"\n    data = request.json\n    ids = data.get('ids', [])\n    # 强制保证全部是int类型\n    ids = [int(i) for i in ids if str(i).isdigit()]",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "sales_stats",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def sales_stats():\n    agg_type = request.args.get('type', 'day')\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    if agg_type == 'month':\n        c.execute(\"SELECT substr(time,1,7) as ym, SUM(total) FROM sales GROUP BY ym ORDER BY ym\")\n    elif agg_type == 'year':\n        c.execute(\"SELECT substr(time,1,4) as y, SUM(total) FROM sales GROUP BY y ORDER BY y\")\n    else:\n        c.execute(\"SELECT substr(time,1,10) as d, SUM(total) FROM sales GROUP BY d ORDER BY d\")",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "stock_log",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def stock_log():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, barcode, change, type FROM stock_log ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    result = []\n    for row in rows:\n        result.append({\n            'time': row[0],",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "receipt",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def receipt(sale_id):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return \"Not found\", 404\n    items = json.loads(row[1])\n    return render_template('receipt.html', time=row[0], items=items, total=row[2], sale_id=sale_id)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "export_sales",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def export_sales():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    data = []\n    for row in rows:\n        items = json.loads(row[1])\n        for bc, item in items.items():",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "export_stocklog",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def export_stocklog():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, barcode, change, type FROM stock_log ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    df = pd.DataFrame(rows, columns=['Time', 'Barcode', 'Change', 'Type'])\n    outpath = 'stocklog_export.xlsx'\n    df.to_excel(outpath, index=False)\n    return send_file(outpath, as_attachment=True)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "export_items",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def export_items():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty FROM items')\n    rows = c.fetchall()\n    conn.close()\n    df = pd.DataFrame(rows, columns=['Barcode', 'Product', 'Price', 'Stock'])\n    outpath = 'items_export.xlsx'\n    df.to_excel(outpath, index=False)\n    return send_file(outpath, as_attachment=True)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "import_items",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def import_items():\n    file = request.files.get('file')\n    if not file:\n        return \"No file uploaded!\", 400\n    path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n    file.save(path)\n    df = pd.read_excel(path)\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    for _, row in df.iterrows():",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "print_receipt",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def print_receipt(sale_id):\n    import win32print\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return jsonify({'msg': 'Not found'}), 404\n    items = json.loads(row[1])",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "stockio",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def stockio():\n    data = request.json\n    barcode = data.get('barcode')\n    change = int(data.get('change', 0))\n    io_type = data.get('type')  # 'in' or 'out'\n    if not barcode or not change or io_type not in ('in', 'out'):\n        return jsonify({'msg': 'Parameter error'}), 400\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "stockio_page",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def stockio_page():\n    return render_template('stockio.html')\n@app.route('/settings')\ndef settings():\n    return render_template('settings.html')\nif __name__ == '__main__':\n    init_db()\n    app.run(debug=True)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "def settings():\n    return render_template('settings.html')\nif __name__ == '__main__':\n    init_db()\n    app.run(debug=True)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "template_dir",
        "kind": 5,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "template_dir = os.path.join(base_path, 'templates')\nstatic_dir   = os.path.join(base_path, 'static')\napp = Flask(\n    __name__,\n    template_folder=template_dir,\n    static_folder=static_dir\n)\nCORS(app)\nUPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=template_dir,\n    static_folder=static_dir\n)\nCORS(app)\nUPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "UPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "flask-pos1.0.0.app",
        "description": "flask-pos1.0.0.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,\n            name TEXT,\n            price REAL DEFAULT 0,",
        "detail": "flask-pos1.0.0.app",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "def run_flask():\n    init_db()\n    app.run(host='127.0.0.1', port=5000, debug=False)\n# ----------- 托盘区逻辑 -----------\ndef on_show(icon, item):\n    if webview.windows:\n        win = webview.windows[0]\n        win.show()\n        win.restore()\ndef on_hide(icon, item):",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "on_show",
        "kind": 2,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "def on_show(icon, item):\n    if webview.windows:\n        win = webview.windows[0]\n        win.show()\n        win.restore()\ndef on_hide(icon, item):\n    if webview.windows:\n        win = webview.windows[0]\n        win.hide()\ndef on_exit(icon, item):",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "on_hide",
        "kind": 2,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "def on_hide(icon, item):\n    if webview.windows:\n        win = webview.windows[0]\n        win.hide()\ndef on_exit(icon, item):\n    icon.stop()  # 停止托盘\n    if webview.windows:\n        win = webview.windows[0]\n        win.destroy()\n    os._exit(0)  # 强制退出全部进程",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "on_exit",
        "kind": 2,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "def on_exit(icon, item):\n    icon.stop()  # 停止托盘\n    if webview.windows:\n        win = webview.windows[0]\n        win.destroy()\n    os._exit(0)  # 强制退出全部进程\ndef create_tray():\n    # 加载 icon.ico 作为托盘图标\n    image = Image.open(ICON_PATH)\n    menu = (",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "create_tray",
        "kind": 2,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "def create_tray():\n    # 加载 icon.ico 作为托盘图标\n    image = Image.open(ICON_PATH)\n    menu = (\n        pystray.MenuItem('显示主界面', on_show),\n        pystray.MenuItem('隐藏主界面', on_hide),\n        pystray.MenuItem('退出', on_exit)\n    )\n    tray = pystray.Icon(\"POS系统\", image, \"POS系统\", menu)\n    tray.run()",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "ICON_PATH",
        "kind": 5,
        "importPath": "flask-pos1.0.0.main",
        "description": "flask-pos1.0.0.main",
        "peekOfCode": "ICON_PATH = os.path.join(BASE_PATH, 'icon.ico')\ndef run_flask():\n    init_db()\n    app.run(host='127.0.0.1', port=5000, debug=False)\n# ----------- 托盘区逻辑 -----------\ndef on_show(icon, item):\n    if webview.windows:\n        win = webview.windows[0]\n        win.show()\n        win.restore()",
        "detail": "flask-pos1.0.0.main",
        "documentation": {}
    },
    {
        "label": "FakeShell",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class FakeShell:\n    def __init__(self):\n        self.ns = {}\n        self.user_ns = self.ns\n        self.user_ns_hidden = {}\n        self.events = EventManager(self, {\"pre_run_cell\", pre_run_cell})\n        self.auto_magics = AutoreloadMagics(shell=self)\n        self.events.register(\"pre_run_cell\", self.auto_magics.pre_run_cell)\n    register_magics = set_hook = noop\n    def showtraceback(",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Fixture",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Fixture(TestCase):\n    \"\"\"Fixture for creating test module files\"\"\"\n    test_dir = None\n    old_sys_path = None\n    filename_chars = \"abcdefghijklmopqrstuvwxyz0123456789\"\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n        self.old_sys_path = list(sys.path)\n        sys.path.insert(0, self.test_dir)\n        self.shell = FakeShell()",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "TestAutoreload",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class TestAutoreload(Fixture):\n    def test_reload_enums(self):\n        mod_name, mod_fn = self.new_module(\n            textwrap.dedent(\n                \"\"\"\n                                from enum import Enum\n                                class MyEnum(Enum):\n                                    A = 'A'\n                                    B = 'B'\n                            \"\"\"",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):\n        return 42\n    def zzz(self):\n        '''This method will be deleted below'''",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Bar:    # old-style class: weakref doesn't work for it on Python < 2.7\n    def foo(self):\n        return 1\n\"\"\"\n        )\n        #\n        # Import module, and mark for reloading\n        #\n        if use_aimport:\n            self.shell.magic_autoreload(\"1\")",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):\n        return 43\nclass Bar:    # old-style class\n    def foo(self):",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Bar:    # old-style class\n    def foo(self):\n        return 2\n\"\"\",\n        )\n        def check_module_contents():\n            self.assertEqual(mod.x, 10)\n            self.assertFalse(hasattr(mod, \"z\"))\n            self.assertEqual(old_foo(0), 4)  # superreload magic!\n            self.assertEqual(mod.foo(0), 4)",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "pickle_get_current_class",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def pickle_get_current_class(obj):\n    \"\"\"\n    Original issue comes from pickle; hence the name.\n    \"\"\"\n    name = obj.__class__.__name__\n    module_name = getattr(obj, \"__module__\", None)\n    obj2 = sys.modules[module_name]\n    for subpath in name.split(\".\"):\n        obj2 = getattr(obj2, subpath)\n    return obj2",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):\n        return 42",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def foo(y):\n    return y + 4\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):\n        return 43",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "noop = lambda *a, **kw: None\nclass FakeShell:\n    def __init__(self):\n        self.ns = {}\n        self.user_ns = self.ns\n        self.user_ns_hidden = {}\n        self.events = EventManager(self, {\"pre_run_cell\", pre_run_cell})\n        self.auto_magics = AutoreloadMagics(shell=self)\n        self.events.register(\"pre_run_cell\", self.auto_magics.pre_run_cell)\n    register_magics = set_hook = noop",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = 9\nz = 123  # this item will be deleted\ndef foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "z = 123  # this item will be deleted\ndef foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = 10\ndef foo(y):\n    return y + 4\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = -99\n\"\"\",\n        )\n        self.shell.run_code(\"pass\")  # trigger reload\n        self.shell.run_code(\"pass\")\n        check_module_contents()\n        #\n        # Re-enable autoreload: reload should now occur\n        #\n        if use_aimport:",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "setup_module",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def setup_module():\n    ip.magic('load_ext storemagic')\ndef test_store_restore():\n    assert 'bar' not in ip.user_ns, \"Error: some other test leaked `bar` in user_ns\"\n    assert 'foo' not in ip.user_ns, \"Error: some other test leaked `foo` in user_ns\"\n    assert 'foobar' not in ip.user_ns, \"Error: some other test leaked `foobar` in user_ns\"\n    assert 'foobaz' not in ip.user_ns, \"Error: some other test leaked `foobaz` in user_ns\"\n    ip.user_ns['foo'] = 78\n    ip.magic('alias bar echo \"hello\"')\n    ip.user_ns['foobar'] = 79",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "test_store_restore",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def test_store_restore():\n    assert 'bar' not in ip.user_ns, \"Error: some other test leaked `bar` in user_ns\"\n    assert 'foo' not in ip.user_ns, \"Error: some other test leaked `foo` in user_ns\"\n    assert 'foobar' not in ip.user_ns, \"Error: some other test leaked `foobar` in user_ns\"\n    assert 'foobaz' not in ip.user_ns, \"Error: some other test leaked `foobaz` in user_ns\"\n    ip.user_ns['foo'] = 78\n    ip.magic('alias bar echo \"hello\"')\n    ip.user_ns['foobar'] = 79\n    ip.user_ns['foobaz'] = '80'\n    tmpd = tempfile.mkdtemp()",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "test_autorestore",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def test_autorestore():\n    ip.user_ns['foo'] = 95\n    ip.magic('store foo')\n    del ip.user_ns['foo']\n    c = Config()\n    c.StoreMagics.autorestore = False\n    orig_config = ip.config\n    try:\n        ip.config = c\n        ip.extension_manager.reload_extension(\"storemagic\")",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "ModuleReloader",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "class ModuleReloader:\n    enabled = False\n    \"\"\"Whether this reloader is enabled\"\"\"\n    check_all = True\n    \"\"\"Autoreload all modules, not just those listed in 'modules'\"\"\"\n    autoload_obj = False\n    \"\"\"Autoreload all modules AND autoload all new objects\"\"\"\n    def __init__(self, shell=None):\n        # Modules that failed to reload: {module: mtime-on-failed-reload, ...}\n        self.failed = {}",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "StrongRef",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "class StrongRef:\n    def __init__(self, obj):\n        self.obj = obj\n    def __call__(self):\n        return self.obj\nmod_attrs = [\n    \"__name__\",\n    \"__doc__\",\n    \"__package__\",\n    \"__loader__\",",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "AutoreloadMagics",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "class AutoreloadMagics(Magics):\n    def __init__(self, *a, **kw):\n        super().__init__(*a, **kw)\n        self._reloader = ModuleReloader(self.shell)\n        self._reloader.check_all = False\n        self._reloader.autoload_obj = False\n        self.loaded_modules = set(sys.modules)\n    @line_magic\n    @magic_arguments.magic_arguments()\n    @magic_arguments.argument(",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_function",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_function(old, new):\n    \"\"\"Upgrade the code object of a function\"\"\"\n    for name in func_attrs:\n        try:\n            setattr(old, name, getattr(new, name))\n        except (AttributeError, TypeError):\n            pass\ndef update_instances(old, new):\n    \"\"\"Use garbage collector to find all instances that refer to the old\n    class definition and update their __class__ to point to the new class",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_instances",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_instances(old, new):\n    \"\"\"Use garbage collector to find all instances that refer to the old\n    class definition and update their __class__ to point to the new class\n    definition\"\"\"\n    refs = gc.get_referrers(old)\n    for ref in refs:\n        if type(ref) is old:\n            object.__setattr__(ref, \"__class__\", new)\ndef update_class(old, new):\n    \"\"\"Replace stuff in the __dict__ of a class, and upgrade",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_class",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_class(old, new):\n    \"\"\"Replace stuff in the __dict__ of a class, and upgrade\n    method code objects, and add new methods, if any\"\"\"\n    for key in list(old.__dict__.keys()):\n        old_obj = getattr(old, key)\n        try:\n            new_obj = getattr(new, key)\n            # explicitly checking that comparison returns True to handle\n            # cases where `==` doesn't return a boolean.\n            if (old_obj == new_obj) is True:",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_property",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_property(old, new):\n    \"\"\"Replace get/set/del functions of a property\"\"\"\n    update_generic(old.fdel, new.fdel)\n    update_generic(old.fget, new.fget)\n    update_generic(old.fset, new.fset)\ndef isinstance2(a, b, typ):\n    return isinstance(a, typ) and isinstance(b, typ)\nUPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "isinstance2",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def isinstance2(a, b, typ):\n    return isinstance(a, typ) and isinstance(b, typ)\nUPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),\n    (lambda a, b: isinstance2(a, b, property), update_property),\n]\nUPDATE_RULES.extend(\n    [\n        (",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_generic",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_generic(a, b):\n    for type_check, update in UPDATE_RULES:\n        if type_check(a, b):\n            update(a, b)\n            return True\n    return False\nclass StrongRef:\n    def __init__(self, obj):\n        self.obj = obj\n    def __call__(self):",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "append_obj",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def append_obj(module, d, name, obj, autoload=False):\n    in_module = hasattr(obj, \"__module__\") and obj.__module__ == module.__name__\n    if autoload:\n        # check needed for module global built-ins\n        if not in_module and name in mod_attrs:\n            return False\n    else:\n        if not in_module:\n            return False\n    key = (module.__name__, name)",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "superreload",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def superreload(module, reload=reload, old_objects=None, shell=None):\n    \"\"\"Enhanced version of the builtin reload function.\n    superreload remembers objects previously in the module, and\n    - upgrades the class dictionary of every old class in the module\n    - upgrades the code object of every old function and method\n    - clears the module's namespace before reloading\n    \"\"\"\n    if old_objects is None:\n        old_objects = {}\n    # collect old objects in the module",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "load_ipython_extension",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "def load_ipython_extension(ip):\n    \"\"\"Load the extension in IPython.\"\"\"\n    auto_reload = AutoreloadMagics(ip)\n    ip.register_magics(auto_reload)\n    ip.events.register(\"pre_run_cell\", auto_reload.pre_run_cell)\n    ip.events.register(\"post_execute\", auto_reload.post_execute_hook)",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "__skip_doctest__",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "__skip_doctest__ = True\n# -----------------------------------------------------------------------------\n#  Copyright (C) 2000 Thomas Heller\n#  Copyright (C) 2008 Pauli Virtanen <pav@iki.fi>\n#  Copyright (C) 2012  The IPython Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n# -----------------------------------------------------------------------------\n#",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "func_attrs",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "func_attrs = [\n    \"__code__\",\n    \"__defaults__\",\n    \"__doc__\",\n    \"__closure__\",\n    \"__globals__\",\n    \"__dict__\",\n]\ndef update_function(old, new):\n    \"\"\"Upgrade the code object of a function\"\"\"",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "UPDATE_RULES",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "UPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),\n    (lambda a, b: isinstance2(a, b, property), update_property),\n]\nUPDATE_RULES.extend(\n    [\n        (\n            lambda a, b: isinstance2(a, b, types.MethodType),\n            lambda a, b: update_function(a.__func__, b.__func__),",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "mod_attrs",
        "kind": 5,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "peekOfCode": "mod_attrs = [\n    \"__name__\",\n    \"__doc__\",\n    \"__package__\",\n    \"__loader__\",\n    \"__spec__\",\n    \"__file__\",\n    \"__cached__\",\n    \"__builtins__\",\n]",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "StoreMagics",
        "kind": 6,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "class StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"\n    autorestore = Bool(False, help=\n        \"\"\"If True, any %store-d variables will be automatically restored\n        when IPython starts.\n        \"\"\"\n    ).tag(config=True)\n    def __init__(self, shell):\n        super(StoreMagics, self).__init__(shell=shell)",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_aliases",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_aliases(ip, alias=None):\n    staliases = ip.db.get('stored_aliases', {})\n    if alias is None:\n        for k,v in staliases.items():\n            #print \"restore alias\",k,v # dbg\n            #self.alias_table[k] = v\n            ip.alias_manager.define_alias(k,v)\n    else:\n        ip.alias_manager.define_alias(alias, staliases[alias])\ndef refresh_variables(ip):",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "refresh_variables",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "def refresh_variables(ip):\n    db = ip.db\n    for key in db.keys('autorestore/*'):\n        # strip autorestore\n        justkey = os.path.basename(key)\n        try:\n            obj = db[key]\n        except KeyError:\n            print(\"Unable to restore variable '%s', ignoring (use %%store -d to forget!)\" % justkey)\n            print(\"The error was:\", sys.exc_info()[0])",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_dhist",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_dhist(ip):\n    ip.user_ns['_dh'] = ip.db.get('dhist',[])\ndef restore_data(ip):\n    refresh_variables(ip)\n    restore_aliases(ip)\n    restore_dhist(ip)\n@magics_class\nclass StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_data",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_data(ip):\n    refresh_variables(ip)\n    restore_aliases(ip)\n    restore_dhist(ip)\n@magics_class\nclass StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"\n    autorestore = Bool(False, help=\n        \"\"\"If True, any %store-d variables will be automatically restored",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "load_ipython_extension",
        "kind": 2,
        "importPath": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "description": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "peekOfCode": "def load_ipython_extension(ip):\n    \"\"\"Load the extension in IPython.\"\"\"\n    ip.register_magics(StoreMagics)",
        "detail": "flask-pos1.1.1.dist.main._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class cached_property(object):\n    \"\"\" A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. \"\"\"\n    def __init__(self, func):\n        update_wrapper(self, func)\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    \"\"\" A property that caches itself to the class object. \"\"\"\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if\n                  len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class Router(object):\n    \"\"\" A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    \"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class Route(object):\n    \"\"\" This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turning an URL path rule into a regular expression usable by the Router.\n    \"\"\"\n    def __init__(self, app, rule, method, callback,\n                 name=None,\n                 plugins=None,\n                 skiplist=None, **config):\n        #: The application this route is installed to.",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    @lazy_attribute\n    def _global_config(cls):\n        cfg = ConfigDict()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ', )\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, _):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n    \"\"\"\n    default_status = 200\n    default_content_type = 'text/html; charset=UTF-8'\n    # Header denylist for specific response codes\n    # (rfc2616 section 10.2.3 and 10.3.5)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    \"\"\" A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). \"\"\"\n    bind = BaseRequest.__init__\n    environ = _local_property()\nclass LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    \"\"\"\n    bind = BaseResponse.__init__\n    _status_line = _local_property()\n    _status_code = _local_property()\n    _cookies = _local_property()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    \"\"\" A subclass of :class:`HTTPResponse` that triggers error handlers. \"\"\"\n    default_status = 500\n    def __init__(self,\n                 status=None,\n                 body=None,\n                 exception=None,\n                 traceback=None, **more_headers):\n        self.exception = exception\n        self.traceback = traceback",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class PluginError(BottleException):\n    pass\nclass JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")\n        app.config._define('json.ascii', default=False, validate=bool,\n                          help=\"Use only 7-bit ASCII characters in output.\")",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    \"\"\" This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. \"\"\"\n    name = 'template'\n    api = 2\n    def setup(self, app):\n        app.tpl = self\n    def apply(self, callback, route):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        \"\"\" Create a virtual package that redirects imports (see PEP 302). \"\"\"\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, new_module(name))\n        self.module.__dict__.update({\n            '__file__': __file__,\n            '__path__': [],\n            '__all__': [],",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self):\n        return len(self.dict)\n    def __iter__(self):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    \"\"\" This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. \"\"\"\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key):\n        return _hkey(key) in self.dict\n    def __delitem__(self, key):\n        del self.dict[_hkey(key)]",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    \"\"\" This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    \"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}\n        self._change_listener = []",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self.default\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024 * 64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in 'fileno', 'close', 'read', 'readlines', 'tell', 'seek':\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        part = read(buff)\n        while part:\n            yield part",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class _closeiter(object):\n    \"\"\" This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). \"\"\"\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class ResourceManager(object):\n    \"\"\" This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    \"\"\"\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = opener",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        \"\"\" Wrapper for a single file uploaded via ``multipart/form-data``. \"\"\"\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultipartError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)\nclass _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartParser",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,\n        mem_limit=2 ** 20,\n        memfile_limit=2 ** 18,\n        buffer_size=2 ** 16,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartPart",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartPart(object):\n    def __init__(self, buffer_size=2 ** 16, memfile_limit=2 ** 18, charset=\"latin1\"):\n        self.headerlist = []\n        self.headers = None\n        self.file = False\n        self.size = 0\n        self._buf = b\"\"\n        self.disposition = None\n        self.name = None\n        self.filename = None",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler):  # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join('%s=%s' % (k, repr(v))",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler):  # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self):  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"The wsgi server part of cherrypy was split into a new \"\n                    \"project called 'cheroot'.\", \"Use the 'cheroot' server \"\n                    \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port, _quiet=self.quiet, **self.options)\nclass PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,\n                         host=self.host,\n                         port=str(self.port), **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler):  # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port, address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        depr(0, 13, \"AppEngineServer no longer required\",\n             \"Configure your application directly in your app.yaml\")\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        depr(0, 13, \"Diesel is not tested or supported and will be removed.\")\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"\n            raise RuntimeError(msg)\n        if self.quiet:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import BaseApplication\n        if self.host.startswith(\"unix:\"):\n            config = {'bind': self.host}\n        else:\n            config = {'bind': \"%s:%d\" % (self.host, self.port)}\n        config.update(self.options)\n        class GunicornApplication(BaseApplication):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `backlog` adjust the eventlet backlog parameter which is the maximum\n          number of queued connections. Should be at least 1; the maximum\n          value is system-dependent.\n        * `family`: (default is 2) socket family, optional. See socket\n          documentation for available families.\n    \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen, patcher",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port, reuse_port=True)\nclass AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AsyncioServerAdapter",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):\n        import asyncio\n        return asyncio.new_event_loop()\n    def run(self, handler):\n        import asyncio",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpUVLoopServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpUVLoopServer(AiohttpServer):\n    \"\"\"uvloop\n       https://github.com/MagicStack/uvloop\n    \"\"\"\n    def get_event_loop(self):\n        import uvloop\n        return uvloop.new_event_loop()\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    \"\"\" Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets too old. \"\"\"\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.daemon = True\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class TemplateError(BottleException):\n    pass\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,\n                 lookup=None,\n                 encoding='utf8', **settings):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding': self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)\n        if self.source:\n            self.tpl = self.env.from_string(self.source)\n        else:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self,\n                escape_func=html_escape,\n                noescape=False,\n                syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError):\n    pass\nclass StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "class StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')\n            |\"\"(?!\")\n            |'{6}",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    if isinstance(s, unicode):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError:\n        pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\\n           \"Fix: %s\\n\" % (major, minor, cause, fix)\n    if DEBUG == 'strict':\n        raise DeprecationWarning(text)\n    warnings.warn(text, DeprecationWarning, stacklevel=stacklevel)\n    return DeprecationWarning(text)\ndef makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):\n        return list(data)\n    elif data:\n        return [data]\n    else:\n        return []\nclass DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def static_file(filename, root,\n                mimetype=True,\n                download=False,\n                charset='UTF-8',\n                etag=None,\n                headers=None):\n    \"\"\" Open a file in a safe way and return an instance of :exc:`HTTPResponse`\n        that can be sent back to the client.\n        :param filename: Name or path of the file to send, relative to ``root``.\n        :param root: Root path for file lookups. Should be an absolute directory",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):\n        # aware datetime.datetime is converted to UTC time\n        # naive datetime.datetime is treated as UTC time\n        value = value.utctimetuple()\n    elif isinstance(value, datedate):\n        # datetime.date is naive, and is treated as UTC time\n        value = value.timetuple()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return calendar.timegm(ts[:8] + (0, )) - (ts[9] or 0)\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':', 1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    \"\"\" Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.\"\"\"\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen - int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def cookie_encode(data, key, digestmod=None):\n    \"\"\" Encode and sign a pickle-able object. Return a (byte) string \"\"\"\n    depr(0, 13, \"cookie_encode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    digestmod = digestmod or hashlib.sha256\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=digestmod).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"\n    depr(0, 13, \"cookie_decode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        digestmod = digestmod or hashlib.sha256\n        hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()\n        if _lscmp(sig[1:], base64.b64encode(hashed)):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    \"\"\" Return True if the argument looks like a encoded cookie.\"\"\"\n    depr(0, 13, \"cookie_is_encoded() will be removed soon.\",\n                \"Do not use this API directly.\")\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__', '/').lstrip('/')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    \"\"\" Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    \"\"\"\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    \"\"\" Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    \"\"\" Return a callable that relays calls to the current default app. \"\"\"\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN\n    NORUN, nr_old = True, NORUN\n    tmp = default_app.push()  # Create a new \"default application\"\n    try:\n        rv = load(target)  # Import the target module\n        return rv if callable(rv) else tmp",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,\n        config=None, **kargs):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    \"\"\"\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    \"\"\"\n    tpl = args[0] if args else None\n    for dictarg in args[1:]:\n        kwargs.update(dictarg)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"\n    def decorator(func):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "def main():\n    _main(sys.argv)\nif __name__ == '__main__':  # pragma: no coverage\n    main()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=args[0], usage=\"%(prog)s [options] package.module:app\")",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "py = sys.version_info\npy3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "py3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError\n    from collections.abc import MutableMapping as DictMixin",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_UNSET",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "_UNSET = object()\nclass ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_hsplit",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "_hsplit = re.compile('(?:(?:\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\")|([^;,=]+))([;,=]?)').findall\ndef _parse_http_header(h):\n    \"\"\" Parses a typical multi-valued and parametrised HTTP header (e.g. Accept headers) and returns a list of values\n        and parameters. For non-standard or broken input, this implementation may return partial results.\n    :param h: A header string (e.g. ``text/html,text/plain;q=0.9,*/*;q=0.8``)\n    :return: List of (value, params) tuples. The second element is a (possibly empty) dict.\n    \"\"\"\n    values = []\n    if '\"' not in h:  # INFO: Fast path without regexp (~2x faster)\n        for value in h.split(','):",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Multipart Handling ###########################################################\n###############################################################################\n# cgi.FieldStorage was deprecated in Python 3.11 and removed in 3.13\n# This implementation is based on https://github.com/defnull/multipart/\nclass MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "NORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[451]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans-serif;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "apps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.bottle",
        "description": "flask-pos1.1.1.venv.Scripts.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)\n        sys.exit(1)\n    if args.version:\n        print('Bottle %s' % __version__)",
        "detail": "flask-pos1.1.1.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "description": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "flask-pos1.1.1.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 상품 테이블: 상태(매진/절판), 이미지 필드 추가\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,\n            name TEXT,\n            price REAL DEFAULT 0,",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/manage')\ndef manage():\n    return render_template('manage.html')\n@app.route('/sales')\ndef sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "manage",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def manage():\n    return render_template('manage.html')\n@app.route('/sales')\ndef sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():\n    return render_template('stocklog.html')\n@app.route('/stockio')\ndef stockio_page():",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "sales",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def sales():\n    return render_template('sales.html')\n@app.route('/stocklog')\ndef stocklog():\n    return render_template('stocklog.html')\n@app.route('/stockio')\ndef stockio_page():\n    return render_template('stockio.html')\n# 상품 추가 (이미지 업로드 지원, 상태 설정 지원)\n@app.route('/api/item', methods=['POST'])",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "stocklog",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def stocklog():\n    return render_template('stocklog.html')\n@app.route('/stockio')\ndef stockio_page():\n    return render_template('stockio.html')\n# 상품 추가 (이미지 업로드 지원, 상태 설정 지원)\n@app.route('/api/item', methods=['POST'])\ndef add_item():\n    if request.content_type and request.content_type.startswith('multipart'):\n        # FormData로 전송(이미지 포함)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "stockio_page",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def stockio_page():\n    return render_template('stockio.html')\n# 상품 추가 (이미지 업로드 지원, 상태 설정 지원)\n@app.route('/api/item', methods=['POST'])\ndef add_item():\n    if request.content_type and request.content_type.startswith('multipart'):\n        # FormData로 전송(이미지 포함)\n        barcode = request.form.get('barcode')\n        name = request.form.get('name', '이름 없음')\n        price = float(request.form.get('price', 0))",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def add_item():\n    if request.content_type and request.content_type.startswith('multipart'):\n        # FormData로 전송(이미지 포함)\n        barcode = request.form.get('barcode')\n        name = request.form.get('name', '이름 없음')\n        price = float(request.form.get('price', 0))\n        qty = int(request.form.get('qty', 0))\n        status = request.form.get('status', '')\n        image = request.files.get('image')\n        image_path = ''",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def get_item(barcode):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty, status, image FROM items WHERE barcode=?', (barcode,))\n    row = c.fetchone()\n    conn.close()\n    if row:\n        # 상태 자동 처리(재고 0이면 매진, status가 '절판'이면 절판)\n        show_status = row[4]\n        if row[3] == 0 and row[4] != '절판':",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "edit_item",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def edit_item(barcode):\n    data = request.json\n    name = data.get('name')\n    price = float(data.get('price', 0))\n    qty = int(data.get('qty', 0))\n    status = data.get('status', '')\n    image_path = data.get('image', '')\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('UPDATE items SET name=?, price=?, qty=?, status=?, image=? WHERE barcode=?',",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "del_item",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def del_item(barcode):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 이미지도 함께 삭제\n    c.execute('SELECT image FROM items WHERE barcode=?', (barcode,))\n    row = c.fetchone()\n    if row and row[0]:\n        img_path = os.path.join(static_dir, row[0])\n        if os.path.exists(img_path):\n            os.remove(img_path)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def get_items():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty, status, image FROM items')\n    rows = c.fetchall()\n    conn.close()\n    result = []\n    for r in rows:\n        show_status = r[4]\n        if r[3] == 0 and r[4] != '절판':",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "sale",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def sale():\n    data = request.json\n    cart = data.get('cart', {})\n    total = float(data.get('total', 0))\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 재고 부족/매진 검증\n    for barcode, item in cart.items():\n        c.execute('SELECT qty, status FROM items WHERE barcode=?', (barcode,))",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "get_sales",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def get_sales():\n    try:\n        page = int(request.args.get('page', 1))\n        page_size = int(request.args.get('page_size', 20))\n    except:\n        page = 1\n        page_size = 20\n    offset = (page - 1) * page_size\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "delete_sale",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def delete_sale():\n    data = request.json\n    ids = data.get('ids', [])\n    ids = [int(i) for i in ids if str(i).isdigit()]\n    reason = data.get('reason', 'refund')\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    deleted, not_found, failed, failed_ids = 0, 0, 0, []\n    conn = sqlite3.connect('inventory.db')\n    try:\n        conn.execute('BEGIN')",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "sales_stats",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def sales_stats():\n    agg_type = request.args.get('type', 'day')\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    if agg_type == 'month':\n        c.execute(\"SELECT substr(time,1,7) as ym, SUM(total) FROM sales GROUP BY ym ORDER BY ym\")\n    elif agg_type == 'year':\n        c.execute(\"SELECT substr(time,1,4) as y, SUM(total) FROM sales GROUP BY y ORDER BY y\")\n    else:\n        c.execute(\"SELECT substr(time,1,10) as d, SUM(total) FROM sales GROUP BY d ORDER BY d\")",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "stock_log",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def stock_log():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, barcode, change, type FROM stock_log ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    result = []\n    for row in rows:\n        result.append({\n            'time': row[0],",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "receipt",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def receipt(sale_id):\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return \"Not found\", 404\n    items = json.loads(row[1])\n    return render_template('receipt.html', time=row[0], items=items, total=row[2], sale_id=sale_id)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "export_sales",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def export_sales():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    data = []\n    for row in rows:\n        items = json.loads(row[1])\n        for bc, item in items.items():",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "export_stocklog",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def export_stocklog():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, barcode, change, type FROM stock_log ORDER BY time DESC')\n    rows = c.fetchall()\n    conn.close()\n    df = pd.DataFrame(rows, columns=['Time', 'Barcode', 'Change', 'Type'])\n    outpath = 'stocklog_export.xlsx'\n    df.to_excel(outpath, index=False)\n    return send_file(outpath, as_attachment=True)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "export_items",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def export_items():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT barcode, name, price, qty, status, image FROM items')\n    rows = c.fetchall()\n    conn.close()\n    df = pd.DataFrame(rows, columns=['Barcode', 'Product', 'Price', 'Stock', 'Status', 'Image'])\n    outpath = 'items_export.xlsx'\n    df.to_excel(outpath, index=False)\n    return send_file(outpath, as_attachment=True)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "import_items",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def import_items():\n    file = request.files.get('file')\n    if not file:\n        return \"No file uploaded!\", 400\n    path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)\n    file.save(path)\n    df = pd.read_excel(path)\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    for _, row in df.iterrows():",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "print_receipt",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def print_receipt(sale_id):\n    import win32print\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    c.execute('SELECT time, items, total FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return jsonify({'msg': 'Not found'}), 404\n    items = json.loads(row[1])",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "stockio",
        "kind": 2,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "def stockio():\n    data = request.json\n    barcode = data.get('barcode')\n    change = int(data.get('change', 0))\n    io_type = data.get('type')  # 'in' or 'out'\n    if not barcode or not change or io_type not in ('in', 'out'):\n        return jsonify({'msg': '파라미터 오류'}), 400\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "template_dir",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "template_dir = os.path.join(base_path, 'templates')\nstatic_dir = os.path.join(base_path, 'static')\napp = Flask(\n    __name__,\n    template_folder=template_dir,\n    static_folder=static_dir\n)\nCORS(app)\nUPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nIMAGE_FOLDER = os.path.join(static_dir, 'images')",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "static_dir",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "static_dir = os.path.join(base_path, 'static')\napp = Flask(\n    __name__,\n    template_folder=template_dir,\n    static_folder=static_dir\n)\nCORS(app)\nUPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nIMAGE_FOLDER = os.path.join(static_dir, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=template_dir,\n    static_folder=static_dir\n)\nCORS(app)\nUPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nIMAGE_FOLDER = os.path.join(static_dir, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "UPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nIMAGE_FOLDER = os.path.join(static_dir, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 상품 테이블: 상태(매진/절판), 이미지 필드 추가\n    c.execute('''",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "IMAGE_FOLDER",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "IMAGE_FOLDER = os.path.join(static_dir, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 상품 테이블: 상태(매진/절판), 이미지 필드 추가\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "flask-pos1.1.1.app",
        "description": "flask-pos1.1.1.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\ndef init_db():\n    conn = sqlite3.connect('inventory.db')\n    c = conn.cursor()\n    # 상품 테이블: 상태(매진/절판), 이미지 필드 추가\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,\n            name TEXT,",
        "detail": "flask-pos1.1.1.app",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": "flask-pos1.1.1.main",
        "description": "flask-pos1.1.1.main",
        "peekOfCode": "def run_flask():\n    init_db()\n    app.run(host='127.0.0.1', port=5000, debug=False)\nif __name__ == '__main__':\n    # 1. 启动 Flask（后台线程）\n    threading.Thread(target=run_flask, daemon=True).start()\n    # 2. 打开 pywebview 主窗口\n    webview.create_window(\n        \"POS 시스템\",\n        \"http://127.0.0.1:5000\",",
        "detail": "flask-pos1.1.1.main",
        "documentation": {}
    },
    {
        "label": "Browser",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "peekOfCode": "class Browser(ABC):\n    \"\"\"Abstract class representing a web browser.\"\"\"\n    def __init__(self, flags, disable_logging):\n        pass\n    @property\n    @abstractmethod\n    def executable(self):\n        pass\n    @executable.setter\n    @abstractmethod",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "documentation": {}
    },
    {
        "label": "CDPBrowser",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "peekOfCode": "class CDPBrowser(Browser):\n    \"\"\"A web browser that can be interacted with via Chrome DevTools Protocol.\n    \"\"\"\n    def __init__(self, flags, cdp_port, disable_logging):\n        pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.browser",
        "documentation": {}
    },
    {
        "label": "ChromeHeadless",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "peekOfCode": "class ChromeHeadless(ChromiumHeadless):\n    \"\"\"\n        Chrome/Chromium browser wrapper.\n        Parameters\n        ----------\n        - `executable` : str, optional\n            + Path to a chrome executable.\n        - `flags` : list of str\n            + Flags to be used by the headless browser.\n            + Default flags are :",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "documentation": {}
    },
    {
        "label": "ENV_VAR_LOOKUP_TOGGLE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "peekOfCode": "ENV_VAR_LOOKUP_TOGGLE = 'HTML2IMAGE_TOGGLE_ENV_VAR_LOOKUP'\nCHROME_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_CHROME_BIN',\n    'HTML2IMAGE_CHROME_EXE',\n    'CHROME_BIN',\n    'CHROME_EXE',\n]\ndef _find_chrome(user_given_executable=None):\n    \"\"\" Finds a Chrome executable.\n    Search Chrome on a given path. If no path given,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "documentation": {}
    },
    {
        "label": "CHROME_EXECUTABLE_ENV_VAR_CANDIDATES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "peekOfCode": "CHROME_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_CHROME_BIN',\n    'HTML2IMAGE_CHROME_EXE',\n    'CHROME_BIN',\n    'CHROME_EXE',\n]\ndef _find_chrome(user_given_executable=None):\n    \"\"\" Finds a Chrome executable.\n    Search Chrome on a given path. If no path given,\n    try to find Chrome or Chromium-browser on a Windows or Unix system.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeCDP",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome_cdp",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome_cdp",
        "peekOfCode": "class ChromeCDP(CDPBrowser):\n    def __init__(\n        self, executable=None, flags=None,\n        print_command=False, cdp_port=9222,\n        disable_logging=False,\n    ):\n        self.executable = executable\n        if not flags:\n            # for some reason, default-background-color prevents\n            # the browser from running",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chrome_cdp",
        "documentation": {}
    },
    {
        "label": "ChromiumHeadless",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chromium",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chromium",
        "peekOfCode": "class ChromiumHeadless(Browser):\n    \"\"\"\n        Chrome/Chromium browser wrapper.\n        Parameters\n        ----------\n        - `executable` : str, optional\n            + Path to a chrome executable.\n        - `flags` : list of str\n            + Flags to be used by the headless browser.\n            + Default flags are :",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.chromium",
        "documentation": {}
    },
    {
        "label": "EdgeHeadless",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "peekOfCode": "class EdgeHeadless(ChromiumHeadless):\n    \"\"\"\n        Edge browser wrapper.\n        Parameters\n        ----------\n        - `executable` : str, optional\n            + Path to a edge executable.\n        - `flags` : list of str\n            + Flags to be used by the headless browser.\n            + Default flags are :",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "documentation": {}
    },
    {
        "label": "ENV_VAR_LOOKUP_TOGGLE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "peekOfCode": "ENV_VAR_LOOKUP_TOGGLE = 'HTML2IMAGE_TOGGLE_ENV_VAR_LOOKUP'\nEDGE_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_EDGE_BIN',\n    'HTML2IMAGE_EDGE_EXE',\n    'EDGE_BIN',\n    'EDGE_EXE',\n]\ndef _find_edge(user_given_executable=None):\n    \"\"\" Finds a edge executable.\n    Search Edge on a given path. If no path given,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "documentation": {}
    },
    {
        "label": "EDGE_EXECUTABLE_ENV_VAR_CANDIDATES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "peekOfCode": "EDGE_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_EDGE_BIN',\n    'HTML2IMAGE_EDGE_EXE',\n    'EDGE_BIN',\n    'EDGE_EXE',\n]\ndef _find_edge(user_given_executable=None):\n    \"\"\" Finds a edge executable.\n    Search Edge on a given path. If no path given,\n    try to find Edge or Chromium-browser on a Windows or Unix system.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.edge",
        "documentation": {}
    },
    {
        "label": "FirefoxHeadless",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox",
        "peekOfCode": "class FirefoxHeadless(Browser):\n    def __init__(self):\n        raise NotImplementedError(\n            \"Could not make screenshot work on Firefox headless yet ...\\n\"\n            \"See https://bugzilla.mozilla.org/show_bug.cgi?id=1715450\"\n        )\n    @property\n    def executable(self):\n        pass\n    @executable.setter",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox",
        "documentation": {}
    },
    {
        "label": "FirefoxCDP",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox_cdp",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox_cdp",
        "peekOfCode": "class FirefoxCDP(Browser):\n    def __init__(self, executable=None, flags=None, print_command=False):\n        self.executable = executable\n        if not flags:\n            self.flags = [\n                # '--default-background-color=0',\n                # '--hide-scrollbars',\n            ]\n        else:\n            self.flags = [flags] if isinstance(flags, str) else flags",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.firefox_cdp",
        "documentation": {}
    },
    {
        "label": "get_command_origin",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "def get_command_origin(command):\n    ''' Finds the path of a given command (windows only).\n    This function is inspired by the `start` command on windows.\n    It will search if the given command corresponds :\n    - To an executable in the current directory\n    - To an executable in the PATH environment variable\n    - To an executable mentionned in the registry in the\n      HKEY_LOCAL_MACHINE or HKEY_LOCAL_MACHINE hkeys in\n      SOFTWARE\\\\[Wow6432Node\\\\]Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\\n    It also \"indirectly\" validates a path to a file.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "find_first_defined_env_var",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "def find_first_defined_env_var(env_var_list, toggle):\n    '''\n    Returns the value of the first defined environment variable\n    encountered in the `env_var_list` list, but only if the\n    the `toggle` environment variableif defined.\n    Parameters\n    ----------\n    - `env_var_list`: list[str]\n        + list of environment variable names\n    - `toggle`: str",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "find_chrome",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "def find_chrome(user_given_executable=None):\n    \"\"\" Finds a Chrome executable.\n    Search Chrome on a given path. If no path given,\n    try to find Chrome or Chromium-browser on a Windows or Unix system.\n    Parameters\n    ----------\n    - `user_given_executable`: str (optional)\n        + A filepath leading to a Chrome/ Chromium executable\n        + Or a filename found in the current working directory\n        + Or a keyword that executes Chrome/ Chromium, ex:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "find_firefox",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "def find_firefox(user_given_executable=None):\n    \"\"\" Finds a Firefox executable.\n    Search Firefox on a given path. If no path given,\n    try to find Firefox on a Windows or Unix system.\n    Parameters\n    ----------\n    - `user_given_executable`: str (optional)\n        + A filepath leading to a Firefox executable\n        + Or a filename found in the current working directory\n        + Or a keyword that executes Firefox, ex:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "ENV_VAR_LOOKUP_TOGGLE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "ENV_VAR_LOOKUP_TOGGLE = 'HTML2IMAGE_TOGGLE_ENV_VAR_LOOKUP'\nCHROME_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_CHROME_BIN',\n    'HTML2IMAGE_CHROME_EXE',\n    'CHROME_BIN',\n    'CHROME_EXE',\n]\nFIREFOX_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_FIREFOX_BIN',\n    'HTML2IMAGE_FIREFOX_EXE',",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "CHROME_EXECUTABLE_ENV_VAR_CANDIDATES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "CHROME_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_CHROME_BIN',\n    'HTML2IMAGE_CHROME_EXE',\n    'CHROME_BIN',\n    'CHROME_EXE',\n]\nFIREFOX_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_FIREFOX_BIN',\n    'HTML2IMAGE_FIREFOX_EXE',\n    'FIREFOX_BIN',",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "FIREFOX_EXECUTABLE_ENV_VAR_CANDIDATES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "peekOfCode": "FIREFOX_EXECUTABLE_ENV_VAR_CANDIDATES = [\n    'HTML2IMAGE_FIREFOX_BIN',\n    'HTML2IMAGE_FIREFOX_EXE',\n    'FIREFOX_BIN',\n    'FIREFOX_EXE',\n]\ndef get_command_origin(command):\n    ''' Finds the path of a given command (windows only).\n    This function is inspired by the `start` command on windows.\n    It will search if the given command corresponds :",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.browsers.search_utils",
        "documentation": {}
    },
    {
        "label": "size_type",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "peekOfCode": "def size_type(string):\n    try:\n        width, height = map(int, string.split(','))\n        if width <= 0 or height <= 0:\n            raise argparse.ArgumentTypeError(\n                'Width and height must be positive integers.'\n            )\n        return width, height\n    except ValueError:  # incorrect number of values\n        raise argparse.ArgumentTypeError(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        description='Generate images from HTML/CSS or URLs using the html2image library.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    # Html2Image instantiation arguments\n    group_hti_init = parser.add_argument_group('Html2Image Instance Configuration')\n    group_hti_init.add_argument(\n        '--output-path', '-o',\n        default=os.getcwd(),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.cli",
        "documentation": {}
    },
    {
        "label": "Html2Image",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "peekOfCode": "class Html2Image():\n    \"\"\"\n        Allows the generation of images from\n        URLs and HTML/CSS files or strings.\n        Parameters\n        ----------\n        - `browser`: str , optional\n            + Type of the browser that will be used to take screenshots.\n            + Default is Chrome.\n        - `browser_executable` : str, optional",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "documentation": {}
    },
    {
        "label": "browser_map",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "peekOfCode": "browser_map = {\n    'chrome': chrome.ChromeHeadless,\n    'chromium': chrome.ChromeHeadless,\n    'google-chrome': chrome.ChromeHeadless,\n    'google-chrome-stable': chrome.ChromeHeadless,\n    'googlechrome': chrome.ChromeHeadless,\n    'edge': edge.EdgeHeadless,\n    'chrome-cdp': chrome_cdp.ChromeCDP,\n    'chromium-cdp': chrome_cdp.ChromeCDP,\n    # 'firefox': firefox.FirefoxHeadless,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.html2image.html2image",
        "documentation": {}
    },
    {
        "label": "FakeShell",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class FakeShell:\n    def __init__(self):\n        self.ns = {}\n        self.user_ns = self.ns\n        self.user_ns_hidden = {}\n        self.events = EventManager(self, {\"pre_run_cell\", pre_run_cell})\n        self.auto_magics = AutoreloadMagics(shell=self)\n        self.events.register(\"pre_run_cell\", self.auto_magics.pre_run_cell)\n    register_magics = set_hook = noop\n    def showtraceback(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Fixture",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Fixture(TestCase):\n    \"\"\"Fixture for creating test module files\"\"\"\n    test_dir = None\n    old_sys_path = None\n    filename_chars = \"abcdefghijklmopqrstuvwxyz0123456789\"\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n        self.old_sys_path = list(sys.path)\n        sys.path.insert(0, self.test_dir)\n        self.shell = FakeShell()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "TestAutoreload",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class TestAutoreload(Fixture):\n    def test_reload_enums(self):\n        mod_name, mod_fn = self.new_module(\n            textwrap.dedent(\n                \"\"\"\n                                from enum import Enum\n                                class MyEnum(Enum):\n                                    A = 'A'\n                                    B = 'B'\n                            \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):\n        return 42\n    def zzz(self):\n        '''This method will be deleted below'''",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Bar:    # old-style class: weakref doesn't work for it on Python < 2.7\n    def foo(self):\n        return 1\n\"\"\"\n        )\n        #\n        # Import module, and mark for reloading\n        #\n        if use_aimport:\n            self.shell.magic_autoreload(\"1\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):\n        return 43\nclass Bar:    # old-style class\n    def foo(self):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "class Bar:    # old-style class\n    def foo(self):\n        return 2\n\"\"\",\n        )\n        def check_module_contents():\n            self.assertEqual(mod.x, 10)\n            self.assertFalse(hasattr(mod, \"z\"))\n            self.assertEqual(old_foo(0), 4)  # superreload magic!\n            self.assertEqual(mod.foo(0), 4)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "pickle_get_current_class",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def pickle_get_current_class(obj):\n    \"\"\"\n    Original issue comes from pickle; hence the name.\n    \"\"\"\n    name = obj.__class__.__name__\n    module_name = getattr(obj, \"__module__\", None)\n    obj2 = sys.modules[module_name]\n    for subpath in name.split(\".\"):\n        obj2 = getattr(obj2, subpath)\n    return obj2",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):\n        return 42",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "def foo(y):\n    return y + 4\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):\n        return 43",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "noop = lambda *a, **kw: None\nclass FakeShell:\n    def __init__(self):\n        self.ns = {}\n        self.user_ns = self.ns\n        self.user_ns_hidden = {}\n        self.events = EventManager(self, {\"pre_run_cell\", pre_run_cell})\n        self.auto_magics = AutoreloadMagics(shell=self)\n        self.events.register(\"pre_run_cell\", self.auto_magics.pre_run_cell)\n    register_magics = set_hook = noop",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = 9\nz = 123  # this item will be deleted\ndef foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "z = 123  # this item will be deleted\ndef foo(y):\n    return y + 3\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y\n    @property\n    def quux(self):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = 10\ndef foo(y):\n    return y + 4\nclass Baz(object):\n    def __init__(self, x):\n        self.x = x\n    def bar(self, y):\n        return self.x + y + 1\n    @property\n    def quux(self):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "peekOfCode": "x = -99\n\"\"\",\n        )\n        self.shell.run_code(\"pass\")  # trigger reload\n        self.shell.run_code(\"pass\")\n        check_module_contents()\n        #\n        # Re-enable autoreload: reload should now occur\n        #\n        if use_aimport:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_autoreload",
        "documentation": {}
    },
    {
        "label": "setup_module",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def setup_module():\n    ip.magic('load_ext storemagic')\ndef test_store_restore():\n    assert 'bar' not in ip.user_ns, \"Error: some other test leaked `bar` in user_ns\"\n    assert 'foo' not in ip.user_ns, \"Error: some other test leaked `foo` in user_ns\"\n    assert 'foobar' not in ip.user_ns, \"Error: some other test leaked `foobar` in user_ns\"\n    assert 'foobaz' not in ip.user_ns, \"Error: some other test leaked `foobaz` in user_ns\"\n    ip.user_ns['foo'] = 78\n    ip.magic('alias bar echo \"hello\"')\n    ip.user_ns['foobar'] = 79",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "test_store_restore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def test_store_restore():\n    assert 'bar' not in ip.user_ns, \"Error: some other test leaked `bar` in user_ns\"\n    assert 'foo' not in ip.user_ns, \"Error: some other test leaked `foo` in user_ns\"\n    assert 'foobar' not in ip.user_ns, \"Error: some other test leaked `foobar` in user_ns\"\n    assert 'foobaz' not in ip.user_ns, \"Error: some other test leaked `foobaz` in user_ns\"\n    ip.user_ns['foo'] = 78\n    ip.magic('alias bar echo \"hello\"')\n    ip.user_ns['foobar'] = 79\n    ip.user_ns['foobaz'] = '80'\n    tmpd = tempfile.mkdtemp()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "test_autorestore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "peekOfCode": "def test_autorestore():\n    ip.user_ns['foo'] = 95\n    ip.magic('store foo')\n    del ip.user_ns['foo']\n    c = Config()\n    c.StoreMagics.autorestore = False\n    orig_config = ip.config\n    try:\n        ip.config = c\n        ip.extension_manager.reload_extension(\"storemagic\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.tests.test_storemagic",
        "documentation": {}
    },
    {
        "label": "ModuleReloader",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "class ModuleReloader:\n    enabled = False\n    \"\"\"Whether this reloader is enabled\"\"\"\n    check_all = True\n    \"\"\"Autoreload all modules, not just those listed in 'modules'\"\"\"\n    autoload_obj = False\n    \"\"\"Autoreload all modules AND autoload all new objects\"\"\"\n    def __init__(self, shell=None):\n        # Modules that failed to reload: {module: mtime-on-failed-reload, ...}\n        self.failed = {}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "StrongRef",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "class StrongRef:\n    def __init__(self, obj):\n        self.obj = obj\n    def __call__(self):\n        return self.obj\nmod_attrs = [\n    \"__name__\",\n    \"__doc__\",\n    \"__package__\",\n    \"__loader__\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "AutoreloadMagics",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "class AutoreloadMagics(Magics):\n    def __init__(self, *a, **kw):\n        super().__init__(*a, **kw)\n        self._reloader = ModuleReloader(self.shell)\n        self._reloader.check_all = False\n        self._reloader.autoload_obj = False\n        self.loaded_modules = set(sys.modules)\n    @line_magic\n    @magic_arguments.magic_arguments()\n    @magic_arguments.argument(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_function",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_function(old, new):\n    \"\"\"Upgrade the code object of a function\"\"\"\n    for name in func_attrs:\n        try:\n            setattr(old, name, getattr(new, name))\n        except (AttributeError, TypeError):\n            pass\ndef update_instances(old, new):\n    \"\"\"Use garbage collector to find all instances that refer to the old\n    class definition and update their __class__ to point to the new class",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_instances",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_instances(old, new):\n    \"\"\"Use garbage collector to find all instances that refer to the old\n    class definition and update their __class__ to point to the new class\n    definition\"\"\"\n    refs = gc.get_referrers(old)\n    for ref in refs:\n        if type(ref) is old:\n            object.__setattr__(ref, \"__class__\", new)\ndef update_class(old, new):\n    \"\"\"Replace stuff in the __dict__ of a class, and upgrade",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_class",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_class(old, new):\n    \"\"\"Replace stuff in the __dict__ of a class, and upgrade\n    method code objects, and add new methods, if any\"\"\"\n    for key in list(old.__dict__.keys()):\n        old_obj = getattr(old, key)\n        try:\n            new_obj = getattr(new, key)\n            # explicitly checking that comparison returns True to handle\n            # cases where `==` doesn't return a boolean.\n            if (old_obj == new_obj) is True:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_property",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_property(old, new):\n    \"\"\"Replace get/set/del functions of a property\"\"\"\n    update_generic(old.fdel, new.fdel)\n    update_generic(old.fget, new.fget)\n    update_generic(old.fset, new.fset)\ndef isinstance2(a, b, typ):\n    return isinstance(a, typ) and isinstance(b, typ)\nUPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "isinstance2",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def isinstance2(a, b, typ):\n    return isinstance(a, typ) and isinstance(b, typ)\nUPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),\n    (lambda a, b: isinstance2(a, b, property), update_property),\n]\nUPDATE_RULES.extend(\n    [\n        (",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "update_generic",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def update_generic(a, b):\n    for type_check, update in UPDATE_RULES:\n        if type_check(a, b):\n            update(a, b)\n            return True\n    return False\nclass StrongRef:\n    def __init__(self, obj):\n        self.obj = obj\n    def __call__(self):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "append_obj",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def append_obj(module, d, name, obj, autoload=False):\n    in_module = hasattr(obj, \"__module__\") and obj.__module__ == module.__name__\n    if autoload:\n        # check needed for module global built-ins\n        if not in_module and name in mod_attrs:\n            return False\n    else:\n        if not in_module:\n            return False\n    key = (module.__name__, name)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "superreload",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def superreload(module, reload=reload, old_objects=None, shell=None):\n    \"\"\"Enhanced version of the builtin reload function.\n    superreload remembers objects previously in the module, and\n    - upgrades the class dictionary of every old class in the module\n    - upgrades the code object of every old function and method\n    - clears the module's namespace before reloading\n    \"\"\"\n    if old_objects is None:\n        old_objects = {}\n    # collect old objects in the module",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "load_ipython_extension",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "def load_ipython_extension(ip):\n    \"\"\"Load the extension in IPython.\"\"\"\n    auto_reload = AutoreloadMagics(ip)\n    ip.register_magics(auto_reload)\n    ip.events.register(\"pre_run_cell\", auto_reload.pre_run_cell)\n    ip.events.register(\"post_execute\", auto_reload.post_execute_hook)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "__skip_doctest__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "__skip_doctest__ = True\n# -----------------------------------------------------------------------------\n#  Copyright (C) 2000 Thomas Heller\n#  Copyright (C) 2008 Pauli Virtanen <pav@iki.fi>\n#  Copyright (C) 2012  The IPython Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n# -----------------------------------------------------------------------------\n#",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "func_attrs",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "func_attrs = [\n    \"__code__\",\n    \"__defaults__\",\n    \"__doc__\",\n    \"__closure__\",\n    \"__globals__\",\n    \"__dict__\",\n]\ndef update_function(old, new):\n    \"\"\"Upgrade the code object of a function\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "UPDATE_RULES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "UPDATE_RULES = [\n    (lambda a, b: isinstance2(a, b, type), update_class),\n    (lambda a, b: isinstance2(a, b, types.FunctionType), update_function),\n    (lambda a, b: isinstance2(a, b, property), update_property),\n]\nUPDATE_RULES.extend(\n    [\n        (\n            lambda a, b: isinstance2(a, b, types.MethodType),\n            lambda a, b: update_function(a.__func__, b.__func__),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "mod_attrs",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "peekOfCode": "mod_attrs = [\n    \"__name__\",\n    \"__doc__\",\n    \"__package__\",\n    \"__loader__\",\n    \"__spec__\",\n    \"__file__\",\n    \"__cached__\",\n    \"__builtins__\",\n]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.autoreload",
        "documentation": {}
    },
    {
        "label": "StoreMagics",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "class StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"\n    autorestore = Bool(False, help=\n        \"\"\"If True, any %store-d variables will be automatically restored\n        when IPython starts.\n        \"\"\"\n    ).tag(config=True)\n    def __init__(self, shell):\n        super(StoreMagics, self).__init__(shell=shell)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_aliases",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_aliases(ip, alias=None):\n    staliases = ip.db.get('stored_aliases', {})\n    if alias is None:\n        for k,v in staliases.items():\n            #print \"restore alias\",k,v # dbg\n            #self.alias_table[k] = v\n            ip.alias_manager.define_alias(k,v)\n    else:\n        ip.alias_manager.define_alias(alias, staliases[alias])\ndef refresh_variables(ip):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "refresh_variables",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "def refresh_variables(ip):\n    db = ip.db\n    for key in db.keys('autorestore/*'):\n        # strip autorestore\n        justkey = os.path.basename(key)\n        try:\n            obj = db[key]\n        except KeyError:\n            print(\"Unable to restore variable '%s', ignoring (use %%store -d to forget!)\" % justkey)\n            print(\"The error was:\", sys.exc_info()[0])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_dhist",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_dhist(ip):\n    ip.user_ns['_dh'] = ip.db.get('dhist',[])\ndef restore_data(ip):\n    refresh_variables(ip)\n    restore_aliases(ip)\n    restore_dhist(ip)\n@magics_class\nclass StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "restore_data",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "def restore_data(ip):\n    refresh_variables(ip)\n    restore_aliases(ip)\n    restore_dhist(ip)\n@magics_class\nclass StoreMagics(Magics):\n    \"\"\"Lightweight persistence for python variables.\n    Provides the %store magic.\"\"\"\n    autorestore = Bool(False, help=\n        \"\"\"If True, any %store-d variables will be automatically restored",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "load_ipython_extension",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "peekOfCode": "def load_ipython_extension(ip):\n    \"\"\"Load the extension in IPython.\"\"\"\n    ip.register_magics(StoreMagics)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.IPython.extensions.storemagic",
        "documentation": {}
    },
    {
        "label": "AvifImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "peekOfCode": "class AvifImageFile(ImageFile.ImageFile):\n    format = \"AVIF\"\n    format_description = \"AVIF image\"\n    __frame = -1\n    def _open(self) -> None:\n        if not SUPPORTED:\n            msg = \"image file could not be opened because AVIF support not installed\"\n            raise SyntaxError(msg)\n        if DECODE_CODEC_CHOICE != \"auto\" and not _avif.decoder_codec_available(\n            DECODE_CODEC_CHOICE",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "documentation": {}
    },
    {
        "label": "get_codec_version",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "peekOfCode": "def get_codec_version(codec_name: str) -> str | None:\n    versions = _avif.codec_versions()\n    for version in versions.split(\", \"):\n        if version.split(\" [\")[0] == codec_name:\n            return version.split(\":\")[-1].split(\" \")[0]\n    return None\ndef _accept(prefix: bytes) -> bool | str:\n    if prefix[4:8] != b\"ftyp\":\n        return False\n    major_brand = prefix[8:12]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "documentation": {}
    },
    {
        "label": "DECODE_CODEC_CHOICE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "peekOfCode": "DECODE_CODEC_CHOICE = \"auto\"\nDEFAULT_MAX_THREADS = 0\ndef get_codec_version(codec_name: str) -> str | None:\n    versions = _avif.codec_versions()\n    for version in versions.split(\", \"):\n        if version.split(\" [\")[0] == codec_name:\n            return version.split(\":\")[-1].split(\" \")[0]\n    return None\ndef _accept(prefix: bytes) -> bool | str:\n    if prefix[4:8] != b\"ftyp\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MAX_THREADS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "peekOfCode": "DEFAULT_MAX_THREADS = 0\ndef get_codec_version(codec_name: str) -> str | None:\n    versions = _avif.codec_versions()\n    for version in versions.split(\", \"):\n        if version.split(\" [\")[0] == codec_name:\n            return version.split(\":\")[-1].split(\" \")[0]\n    return None\ndef _accept(prefix: bytes) -> bool | str:\n    if prefix[4:8] != b\"ftyp\":\n        return False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.AvifImagePlugin",
        "documentation": {}
    },
    {
        "label": "BdfFontFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "peekOfCode": "class BdfFontFile(FontFile.FontFile):\n    \"\"\"Font file plugin for the X11 BDF format.\"\"\"\n    def __init__(self, fp: BinaryIO) -> None:\n        super().__init__()\n        s = fp.readline()\n        if not s.startswith(b\"STARTFONT 2.1\"):\n            msg = \"not a valid BDF file\"\n            raise SyntaxError(msg)\n        props = {}\n        comments = []",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "documentation": {}
    },
    {
        "label": "bdf_char",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "peekOfCode": "def bdf_char(\n    f: BinaryIO,\n) -> (\n    tuple[\n        str,\n        int,\n        tuple[tuple[int, int], tuple[int, int, int, int], tuple[int, int, int, int]],\n        Image.Image,\n    ]\n    | None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BdfFontFile",
        "documentation": {}
    },
    {
        "label": "Format",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class Format(IntEnum):\n    JPEG = 0\nclass Encoding(IntEnum):\n    UNCOMPRESSED = 1\n    DXT = 2\n    UNCOMPRESSED_RAW_BGRA = 3\nclass AlphaEncoding(IntEnum):\n    DXT1 = 0\n    DXT3 = 1\n    DXT5 = 7",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "Encoding",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class Encoding(IntEnum):\n    UNCOMPRESSED = 1\n    DXT = 2\n    UNCOMPRESSED_RAW_BGRA = 3\nclass AlphaEncoding(IntEnum):\n    DXT1 = 0\n    DXT3 = 1\n    DXT5 = 7\ndef unpack_565(i: int) -> tuple[int, int, int]:\n    return ((i >> 11) & 0x1F) << 3, ((i >> 5) & 0x3F) << 2, (i & 0x1F) << 3",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "AlphaEncoding",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class AlphaEncoding(IntEnum):\n    DXT1 = 0\n    DXT3 = 1\n    DXT5 = 7\ndef unpack_565(i: int) -> tuple[int, int, int]:\n    return ((i >> 11) & 0x1F) << 3, ((i >> 5) & 0x3F) << 2, (i & 0x1F) << 3\ndef decode_dxt1(\n    data: bytes, alpha: bool = False\n) -> tuple[bytearray, bytearray, bytearray, bytearray]:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BLPFormatError",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class BLPFormatError(NotImplementedError):\n    pass\ndef _accept(prefix: bytes) -> bool:\n    return prefix.startswith((b\"BLP1\", b\"BLP2\"))\nclass BlpImageFile(ImageFile.ImageFile):\n    \"\"\"\n    Blizzard Mipmap Format\n    \"\"\"\n    format = \"BLP\"\n    format_description = \"Blizzard Mipmap Format\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BlpImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class BlpImageFile(ImageFile.ImageFile):\n    \"\"\"\n    Blizzard Mipmap Format\n    \"\"\"\n    format = \"BLP\"\n    format_description = \"Blizzard Mipmap Format\"\n    def _open(self) -> None:\n        self.magic = self.fp.read(4)\n        if not _accept(self.magic):\n            msg = f\"Bad BLP magic {repr(self.magic)}\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "_BLPBaseDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class _BLPBaseDecoder(abc.ABC, ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        try:\n            self._read_header()\n            self._load()\n        except struct.error as e:\n            msg = \"Truncated BLP file\"\n            raise OSError(msg) from e\n        return -1, 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BLP1Decoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class BLP1Decoder(_BLPBaseDecoder):\n    def _load(self) -> None:\n        self._compression, self._encoding, alpha = self.args\n        if self._compression == Format.JPEG:\n            self._decode_jpeg_stream()\n        elif self._compression == 1:\n            if self._encoding in (4, 5):\n                palette = self._read_palette()\n                data = self._read_bgra(palette, alpha)\n                self.set_as_raw(data)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BLP2Decoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class BLP2Decoder(_BLPBaseDecoder):\n    def _load(self) -> None:\n        self._compression, self._encoding, alpha, self._alpha_encoding = self.args\n        palette = self._read_palette()\n        assert self.fd is not None\n        self.fd.seek(self._offsets[0])\n        if self._compression == 1:\n            # Uncompressed or DirectX compression\n            if self._encoding == Encoding.UNCOMPRESSED:\n                data = self._read_bgra(palette, alpha)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BLPEncoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "class BLPEncoder(ImageFile.PyEncoder):\n    _pushes_fd = True\n    def _write_palette(self) -> bytes:\n        data = b\"\"\n        assert self.im is not None\n        palette = self.im.getpalette(\"RGBA\", \"RGBA\")\n        for i in range(len(palette) // 4):\n            r, g, b, a = palette[i * 4 : (i + 1) * 4]\n            data += struct.pack(\"<4B\", b, g, r, a)\n        while len(data) < 256 * 4:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "unpack_565",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "def unpack_565(i: int) -> tuple[int, int, int]:\n    return ((i >> 11) & 0x1F) << 3, ((i >> 5) & 0x3F) << 2, (i & 0x1F) << 3\ndef decode_dxt1(\n    data: bytes, alpha: bool = False\n) -> tuple[bytearray, bytearray, bytearray, bytearray]:\n    \"\"\"\n    input: one \"row\" of data (i.e. will produce 4*width pixels)\n    \"\"\"\n    blocks = len(data) // 8  # number of blocks in row\n    ret = (bytearray(), bytearray(), bytearray(), bytearray())",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "decode_dxt1",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "def decode_dxt1(\n    data: bytes, alpha: bool = False\n) -> tuple[bytearray, bytearray, bytearray, bytearray]:\n    \"\"\"\n    input: one \"row\" of data (i.e. will produce 4*width pixels)\n    \"\"\"\n    blocks = len(data) // 8  # number of blocks in row\n    ret = (bytearray(), bytearray(), bytearray(), bytearray())\n    for block_index in range(blocks):\n        # Decode next 8-byte block.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "decode_dxt3",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "def decode_dxt3(data: bytes) -> tuple[bytearray, bytearray, bytearray, bytearray]:\n    \"\"\"\n    input: one \"row\" of data (i.e. will produce 4*width pixels)\n    \"\"\"\n    blocks = len(data) // 16  # number of blocks in row\n    ret = (bytearray(), bytearray(), bytearray(), bytearray())\n    for block_index in range(blocks):\n        idx = block_index * 16\n        block = data[idx : idx + 16]\n        # Decode next 16-byte block.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "decode_dxt5",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "peekOfCode": "def decode_dxt5(data: bytes) -> tuple[bytearray, bytearray, bytearray, bytearray]:\n    \"\"\"\n    input: one \"row\" of data (i.e. will produce 4 * width pixels)\n    \"\"\"\n    blocks = len(data) // 16  # number of blocks in row\n    ret = (bytearray(), bytearray(), bytearray(), bytearray())\n    for block_index in range(blocks):\n        idx = block_index * 16\n        block = data[idx : idx + 16]\n        # Decode next 16-byte block.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BlpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BmpImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "class BmpImageFile(ImageFile.ImageFile):\n    \"\"\"Image plugin for the Windows Bitmap format (BMP)\"\"\"\n    # ------------------------------------------------------------- Description\n    format_description = \"Windows Bitmap\"\n    format = \"BMP\"\n    # -------------------------------------------------- BMP Compression values\n    COMPRESSIONS = {\"RAW\": 0, \"RLE8\": 1, \"RLE4\": 2, \"BITFIELDS\": 3, \"JPEG\": 4, \"PNG\": 5}\n    for k, v in COMPRESSIONS.items():\n        vars()[k] = v\n    def _bitmap(self, header: int = 0, offset: int = 0) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BmpRleDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "class BmpRleDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        rle4 = self.args[1]\n        data = bytearray()\n        x = 0\n        dest_length = self.state.xsize * self.state.ysize\n        while len(data) < dest_length:\n            pixels = self.fd.read(1)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "DibImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "class DibImageFile(BmpImageFile):\n    format = \"DIB\"\n    format_description = \"Windows Bitmap\"\n    def _open(self) -> None:\n        self._bitmap()\n#\n# --------------------------------------------------------------------\n# Write BMP file\nSAVE = {\n    \"1\": (\"1\", 1, 2),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BIT2MODE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "BIT2MODE = {\n    # bits => mode, rawmode\n    1: (\"P\", \"P;1\"),\n    4: (\"P\", \"P;4\"),\n    8: (\"P\", \"P\"),\n    16: (\"RGB\", \"BGR;15\"),\n    24: (\"RGB\", \"BGR\"),\n    32: (\"RGB\", \"BGRX\"),\n}\nUSE_RAW_ALPHA = False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "USE_RAW_ALPHA",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "USE_RAW_ALPHA = False\ndef _accept(prefix: bytes) -> bool:\n    return prefix.startswith(b\"BM\")\ndef _dib_accept(prefix: bytes) -> bool:\n    return i32(prefix) in [12, 40, 52, 56, 64, 108, 124]\n# =============================================================================\n# Image plugin for the Windows BMP format.\n# =============================================================================\nclass BmpImageFile(ImageFile.ImageFile):\n    \"\"\"Image plugin for the Windows Bitmap format (BMP)\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "peekOfCode": "SAVE = {\n    \"1\": (\"1\", 1, 2),\n    \"L\": (\"L\", 8, 256),\n    \"P\": (\"P\", 8, 256),\n    \"RGB\": (\"BGR\", 24, 0),\n    \"RGBA\": (\"BGRA\", 32, 0),\n}\ndef _dib_save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    _save(im, fp, filename, False)\ndef _save(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BmpImagePlugin",
        "documentation": {}
    },
    {
        "label": "BufrStubImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "peekOfCode": "class BufrStubImageFile(ImageFile.StubImageFile):\n    format = \"BUFR\"\n    format_description = \"BUFR\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"Not a BUFR file\"\n            raise SyntaxError(msg)\n        self.fp.seek(-4, os.SEEK_CUR)\n        # make something up\n        self._mode = \"F\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "register_handler",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "peekOfCode": "def register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific BUFR image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "_handler",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "peekOfCode": "_handler = None\ndef register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific BUFR image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.BufrStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "ContainerIO",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ContainerIO",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ContainerIO",
        "peekOfCode": "class ContainerIO(IO[AnyStr]):\n    \"\"\"\n    A file object that provides read access to a part of an existing\n    file (for example a TAR file).\n    \"\"\"\n    def __init__(self, file: IO[AnyStr], offset: int, length: int) -> None:\n        \"\"\"\n        Create file object.\n        :param file: Existing file.\n        :param offset: Start of region, in bytes.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ContainerIO",
        "documentation": {}
    },
    {
        "label": "CurImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.CurImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.CurImagePlugin",
        "peekOfCode": "class CurImageFile(BmpImagePlugin.BmpImageFile):\n    format = \"CUR\"\n    format_description = \"Windows Cursor\"\n    def _open(self) -> None:\n        offset = self.fp.tell()\n        # check magic\n        s = self.fp.read(6)\n        if not _accept(s):\n            msg = \"not a CUR file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.CurImagePlugin",
        "documentation": {}
    },
    {
        "label": "DcxImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "peekOfCode": "class DcxImageFile(PcxImageFile):\n    format = \"DCX\"\n    format_description = \"Intel DCX\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        # Header\n        s = self.fp.read(4)\n        if not _accept(s):\n            msg = \"not a DCX file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "peekOfCode": "MAGIC = 0x3ADE68B1  # QUIZ: what's this value, then?\ndef _accept(prefix: bytes) -> bool:\n    return len(prefix) >= 4 and i32(prefix) == MAGIC\n##\n# Image plugin for the Intel DCX format.\nclass DcxImageFile(PcxImageFile):\n    format = \"DCX\"\n    format_description = \"Intel DCX\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DcxImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDSD",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DDSD(IntFlag):\n    CAPS = 0x1\n    HEIGHT = 0x2\n    WIDTH = 0x4\n    PITCH = 0x8\n    PIXELFORMAT = 0x1000\n    MIPMAPCOUNT = 0x20000\n    LINEARSIZE = 0x80000\n    DEPTH = 0x800000\n# DDS caps",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDSCAPS",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DDSCAPS(IntFlag):\n    COMPLEX = 0x8\n    TEXTURE = 0x1000\n    MIPMAP = 0x400000\nclass DDSCAPS2(IntFlag):\n    CUBEMAP = 0x200\n    CUBEMAP_POSITIVEX = 0x400\n    CUBEMAP_NEGATIVEX = 0x800\n    CUBEMAP_POSITIVEY = 0x1000\n    CUBEMAP_NEGATIVEY = 0x2000",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDSCAPS2",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DDSCAPS2(IntFlag):\n    CUBEMAP = 0x200\n    CUBEMAP_POSITIVEX = 0x400\n    CUBEMAP_NEGATIVEX = 0x800\n    CUBEMAP_POSITIVEY = 0x1000\n    CUBEMAP_NEGATIVEY = 0x2000\n    CUBEMAP_POSITIVEZ = 0x4000\n    CUBEMAP_NEGATIVEZ = 0x8000\n    VOLUME = 0x200000\n# Pixel Format",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDPF",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DDPF(IntFlag):\n    ALPHAPIXELS = 0x1\n    ALPHA = 0x2\n    FOURCC = 0x4\n    PALETTEINDEXED8 = 0x20\n    RGB = 0x40\n    LUMINANCE = 0x20000\n# dxgiformat.h\nclass DXGI_FORMAT(IntEnum):\n    UNKNOWN = 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DXGI_FORMAT(IntEnum):\n    UNKNOWN = 0\n    R32G32B32A32_TYPELESS = 1\n    R32G32B32A32_FLOAT = 2\n    R32G32B32A32_UINT = 3\n    R32G32B32A32_SINT = 4\n    R32G32B32_TYPELESS = 5\n    R32G32B32_FLOAT = 6\n    R32G32B32_UINT = 7\n    R32G32B32_SINT = 8",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "D3DFMT",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class D3DFMT(IntEnum):\n    UNKNOWN = 0\n    R8G8B8 = 20\n    A8R8G8B8 = 21\n    X8R8G8B8 = 22\n    R5G6B5 = 23\n    X1R5G5B5 = 24\n    A1R5G5B5 = 25\n    A4R4G4B4 = 26\n    R3G3B2 = 27",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DdsImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a DDS file\"\n            raise SyntaxError(msg)\n        (header_size,) = struct.unpack(\"<I\", self.fp.read(4))\n        if header_size != 124:\n            msg = f\"Unsupported header size {repr(header_size)}\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DdsRgbDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "class DdsRgbDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        bitcount, masks = self.args\n        # Some masks will be padded with zeros, e.g. R 0b11 G 0b1100\n        # Calculate how many zeros each mask is padded with\n        mask_offsets = []\n        # And the maximum value of each channel without the padding\n        mask_totals = []",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_MAGIC = 0x20534444\n# DDS flags\nclass DDSD(IntFlag):\n    CAPS = 0x1\n    HEIGHT = 0x2\n    WIDTH = 0x4\n    PITCH = 0x8\n    PIXELFORMAT = 0x1000\n    MIPMAPCOUNT = 0x20000\n    LINEARSIZE = 0x80000",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "module = sys.modules[__name__]\nfor item in DDSD:\n    assert item.name is not None\n    setattr(module, f\"DDSD_{item.name}\", item.value)\nfor item1 in DDSCAPS:\n    assert item1.name is not None\n    setattr(module, f\"DDSCAPS_{item1.name}\", item1.value)\nfor item2 in DDSCAPS2:\n    assert item2.name is not None\n    setattr(module, f\"DDSCAPS2_{item2.name}\", item2.value)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_FOURCC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_FOURCC = DDPF.FOURCC\nDDS_RGB = DDPF.RGB\nDDS_RGBA = DDPF.RGB | DDPF.ALPHAPIXELS\nDDS_LUMINANCE = DDPF.LUMINANCE\nDDS_LUMINANCEA = DDPF.LUMINANCE | DDPF.ALPHAPIXELS\nDDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_RGB",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_RGB = DDPF.RGB\nDDS_RGBA = DDPF.RGB | DDPF.ALPHAPIXELS\nDDS_LUMINANCE = DDPF.LUMINANCE\nDDS_LUMINANCEA = DDPF.LUMINANCE | DDPF.ALPHAPIXELS\nDDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_RGBA",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_RGBA = DDPF.RGB | DDPF.ALPHAPIXELS\nDDS_LUMINANCE = DDPF.LUMINANCE\nDDS_LUMINANCEA = DDPF.LUMINANCE | DDPF.ALPHAPIXELS\nDDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_LUMINANCE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_LUMINANCE = DDPF.LUMINANCE\nDDS_LUMINANCEA = DDPF.LUMINANCE | DDPF.ALPHAPIXELS\nDDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_LUMINANCEA",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_LUMINANCEA = DDPF.LUMINANCE | DDPF.ALPHAPIXELS\nDDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_ALPHA",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_ALPHA = DDPF.ALPHA\nDDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_PAL8",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_PAL8 = DDPF.PALETTEINDEXED8\nDDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEADER_FLAGS_TEXTURE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEADER_FLAGS_TEXTURE = DDSD.CAPS | DDSD.HEIGHT | DDSD.WIDTH | DDSD.PIXELFORMAT\nDDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEADER_FLAGS_MIPMAP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEADER_FLAGS_MIPMAP = DDSD.MIPMAPCOUNT\nDDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEADER_FLAGS_VOLUME",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEADER_FLAGS_VOLUME = DDSD.DEPTH\nDDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEADER_FLAGS_PITCH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEADER_FLAGS_PITCH = DDSD.PITCH\nDDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEADER_FLAGS_LINEARSIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEADER_FLAGS_LINEARSIZE = DDSD.LINEARSIZE\nDDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_HEIGHT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_HEIGHT = DDSD.HEIGHT\nDDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_WIDTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_WIDTH = DDSD.WIDTH\nDDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_SURFACE_FLAGS_TEXTURE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_SURFACE_FLAGS_TEXTURE = DDSCAPS.TEXTURE\nDDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_SURFACE_FLAGS_MIPMAP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_SURFACE_FLAGS_MIPMAP = DDSCAPS.COMPLEX | DDSCAPS.MIPMAP\nDDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_SURFACE_FLAGS_CUBEMAP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_SURFACE_FLAGS_CUBEMAP = DDSCAPS.COMPLEX\nDDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_POSITIVEX",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_POSITIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEX\nDDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_NEGATIVEX",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_NEGATIVEX = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEX\nDDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_POSITIVEY",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_POSITIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEY\nDDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_NEGATIVEY",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_NEGATIVEY = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEY\nDDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_POSITIVEZ",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_POSITIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_POSITIVEZ\nDDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DDS_CUBEMAP_NEGATIVEZ",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DDS_CUBEMAP_NEGATIVEZ = DDSCAPS2.CUBEMAP | DDSCAPS2.CUBEMAP_NEGATIVEZ\nDXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXT1_FOURCC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXT1_FOURCC = D3DFMT.DXT1\nDXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXT3_FOURCC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXT3_FOURCC = D3DFMT.DXT3\nDXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXT5_FOURCC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXT5_FOURCC = D3DFMT.DXT5\nDXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_R8G8B8A8_TYPELESS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_R8G8B8A8_TYPELESS = DXGI_FORMAT.R8G8B8A8_TYPELESS\nDXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_R8G8B8A8_UNORM",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT.R8G8B8A8_UNORM\nDXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_R8G8B8A8_UNORM_SRGB",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = DXGI_FORMAT.R8G8B8A8_UNORM_SRGB\nDXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC5_TYPELESS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC5_TYPELESS = DXGI_FORMAT.BC5_TYPELESS\nDXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC5_UNORM",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC5_UNORM = DXGI_FORMAT.BC5_UNORM\nDXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC5_SNORM",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC5_SNORM = DXGI_FORMAT.BC5_SNORM\nDXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC6H_UF16",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC6H_UF16 = DXGI_FORMAT.BC6H_UF16\nDXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC6H_SF16",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC6H_SF16 = DXGI_FORMAT.BC6H_SF16\nDXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a DDS file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC7_TYPELESS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC7_TYPELESS = DXGI_FORMAT.BC7_TYPELESS\nDXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a DDS file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC7_UNORM",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC7_UNORM = DXGI_FORMAT.BC7_UNORM\nDXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a DDS file\"\n            raise SyntaxError(msg)\n        (header_size,) = struct.unpack(\"<I\", self.fp.read(4))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "DXGI_FORMAT_BC7_UNORM_SRGB",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "peekOfCode": "DXGI_FORMAT_BC7_UNORM_SRGB = DXGI_FORMAT.BC7_UNORM_SRGB\nclass DdsImageFile(ImageFile.ImageFile):\n    format = \"DDS\"\n    format_description = \"DirectDraw Surface\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a DDS file\"\n            raise SyntaxError(msg)\n        (header_size,) = struct.unpack(\"<I\", self.fp.read(4))\n        if header_size != 124:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.DdsImagePlugin",
        "documentation": {}
    },
    {
        "label": "EpsImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "class EpsImageFile(ImageFile.ImageFile):\n    \"\"\"EPS File Parser for the Python Imaging Library\"\"\"\n    format = \"EPS\"\n    format_description = \"Encapsulated Postscript\"\n    mode_map = {1: \"L\", 2: \"LAB\", 3: \"RGB\", 4: \"CMYK\"}\n    def _open(self) -> None:\n        (length, offset) = self._find_offset(self.fp)\n        # go to offset - start of \"%!PS\"\n        self.fp.seek(offset)\n        self._mode = \"RGB\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "has_ghostscript",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "def has_ghostscript() -> bool:\n    global gs_binary, gs_windows_binary\n    if gs_binary is None:\n        if sys.platform.startswith(\"win\"):\n            if gs_windows_binary is None:\n                import shutil\n                for binary in (\"gswin32c\", \"gswin64c\", \"gs\"):\n                    if shutil.which(binary) is not None:\n                        gs_windows_binary = binary\n                        break",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "Ghostscript",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "def Ghostscript(\n    tile: list[ImageFile._Tile],\n    size: tuple[int, int],\n    fp: IO[bytes],\n    scale: int = 1,\n    transparency: bool = False,\n) -> Image.core.ImagingCore:\n    \"\"\"Render an image using Ghostscript\"\"\"\n    global gs_binary\n    if not has_ghostscript():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "split = re.compile(r\"^%%([^:]*):[ \\t]*(.*)[ \\t]*$\")\nfield = re.compile(r\"^%[%!\\w]([^:]*)[ \\t]*$\")\ngs_binary: str | bool | None = None\ngs_windows_binary = None\ndef has_ghostscript() -> bool:\n    global gs_binary, gs_windows_binary\n    if gs_binary is None:\n        if sys.platform.startswith(\"win\"):\n            if gs_windows_binary is None:\n                import shutil",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "field = re.compile(r\"^%[%!\\w]([^:]*)[ \\t]*$\")\ngs_binary: str | bool | None = None\ngs_windows_binary = None\ndef has_ghostscript() -> bool:\n    global gs_binary, gs_windows_binary\n    if gs_binary is None:\n        if sys.platform.startswith(\"win\"):\n            if gs_windows_binary is None:\n                import shutil\n                for binary in (\"gswin32c\", \"gswin64c\", \"gs\"):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "gs_windows_binary",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "peekOfCode": "gs_windows_binary = None\ndef has_ghostscript() -> bool:\n    global gs_binary, gs_windows_binary\n    if gs_binary is None:\n        if sys.platform.startswith(\"win\"):\n            if gs_windows_binary is None:\n                import shutil\n                for binary in (\"gswin32c\", \"gswin64c\", \"gs\"):\n                    if shutil.which(binary) is not None:\n                        gs_windows_binary = binary",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.EpsImagePlugin",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "class Base(IntEnum):\n    # possibly incomplete\n    InteropIndex = 0x0001\n    ProcessingSoftware = 0x000B\n    NewSubfileType = 0x00FE\n    SubfileType = 0x00FF\n    ImageWidth = 0x0100\n    ImageLength = 0x0101\n    BitsPerSample = 0x0102\n    Compression = 0x0103",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "GPS",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "class GPS(IntEnum):\n    GPSVersionID = 0x00\n    GPSLatitudeRef = 0x01\n    GPSLatitude = 0x02\n    GPSLongitudeRef = 0x03\n    GPSLongitude = 0x04\n    GPSAltitudeRef = 0x05\n    GPSAltitude = 0x06\n    GPSTimeStamp = 0x07\n    GPSSatellites = 0x08",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "Interop",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "class Interop(IntEnum):\n    InteropIndex = 0x0001\n    InteropVersion = 0x0002\n    RelatedImageFileFormat = 0x1000\n    RelatedImageWidth = 0x1001\n    RelatedImageHeight = 0x1002\nclass IFD(IntEnum):\n    Exif = 0x8769\n    GPSInfo = 0x8825\n    MakerNote = 0x927C",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "IFD",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "class IFD(IntEnum):\n    Exif = 0x8769\n    GPSInfo = 0x8825\n    MakerNote = 0x927C\n    Makernote = 0x927C  # Deprecated\n    Interop = 0xA005\n    IFD1 = -1\nclass LightSource(IntEnum):\n    Unknown = 0x00\n    Daylight = 0x01",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "LightSource",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "class LightSource(IntEnum):\n    Unknown = 0x00\n    Daylight = 0x01\n    Fluorescent = 0x02\n    Tungsten = 0x03\n    Flash = 0x04\n    Fine = 0x09\n    Cloudy = 0x0A\n    Shade = 0x0B\n    DaylightFluorescent = 0x0C",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "TAGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "TAGS = {\n    **{i.value: i.name for i in Base},\n    0x920C: \"SpatialFrequencyResponse\",\n    0x9214: \"SubjectLocation\",\n    0x9215: \"ExposureIndex\",\n    0x828E: \"CFAPattern\",\n    0x920B: \"FlashEnergy\",\n    0x9216: \"TIFF/EPStandardID\",\n}\nclass GPS(IntEnum):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "GPSTAGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "peekOfCode": "GPSTAGS = {i.value: i.name for i in GPS}\nclass Interop(IntEnum):\n    InteropIndex = 0x0001\n    InteropVersion = 0x0002\n    RelatedImageFileFormat = 0x1000\n    RelatedImageWidth = 0x1001\n    RelatedImageHeight = 0x1002\nclass IFD(IntEnum):\n    Exif = 0x8769\n    GPSInfo = 0x8825",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "check_module",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def check_module(feature: str) -> bool:\n    \"\"\"\n    Checks if a module is available.\n    :param feature: The module to check for.\n    :returns: ``True`` if available, ``False`` otherwise.\n    :raises ValueError: If the module is not defined in this version of Pillow.\n    \"\"\"\n    if feature not in modules:\n        msg = f\"Unknown module {feature}\"\n        raise ValueError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "version_module",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def version_module(feature: str) -> str | None:\n    \"\"\"\n    :param feature: The module to check for.\n    :returns:\n        The loaded version number as a string, or ``None`` if unknown or not available.\n    :raises ValueError: If the module is not defined in this version of Pillow.\n    \"\"\"\n    if not check_module(feature):\n        return None\n    module, ver = modules[feature]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "get_supported_modules",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def get_supported_modules() -> list[str]:\n    \"\"\"\n    :returns: A list of all supported modules.\n    \"\"\"\n    return [f for f in modules if check_module(f)]\ncodecs = {\n    \"jpg\": (\"jpeg\", \"jpeglib\"),\n    \"jpg_2000\": (\"jpeg2k\", \"jp2klib\"),\n    \"zlib\": (\"zip\", \"zlib\"),\n    \"libtiff\": (\"libtiff\", \"libtiff\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "check_codec",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def check_codec(feature: str) -> bool:\n    \"\"\"\n    Checks if a codec is available.\n    :param feature: The codec to check for.\n    :returns: ``True`` if available, ``False`` otherwise.\n    :raises ValueError: If the codec is not defined in this version of Pillow.\n    \"\"\"\n    if feature not in codecs:\n        msg = f\"Unknown codec {feature}\"\n        raise ValueError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "version_codec",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def version_codec(feature: str) -> str | None:\n    \"\"\"\n    :param feature: The codec to check for.\n    :returns:\n        The version number as a string, or ``None`` if not available.\n        Checked at compile time for ``jpg``, run-time otherwise.\n    :raises ValueError: If the codec is not defined in this version of Pillow.\n    \"\"\"\n    if not check_codec(feature):\n        return None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "get_supported_codecs",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def get_supported_codecs() -> list[str]:\n    \"\"\"\n    :returns: A list of all supported codecs.\n    \"\"\"\n    return [f for f in codecs if check_codec(f)]\nfeatures: dict[str, tuple[str, str | bool, str | None]] = {\n    \"webp_anim\": (\"PIL._webp\", True, None),\n    \"webp_mux\": (\"PIL._webp\", True, None),\n    \"transp_webp\": (\"PIL._webp\", True, None),\n    \"raqm\": (\"PIL._imagingft\", \"HAVE_RAQM\", \"raqm_version\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "check_feature",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def check_feature(feature: str) -> bool | None:\n    \"\"\"\n    Checks if a feature is available.\n    :param feature: The feature to check for.\n    :returns: ``True`` if available, ``False`` if unavailable, ``None`` if unknown.\n    :raises ValueError: If the feature is not defined in this version of Pillow.\n    \"\"\"\n    if feature not in features:\n        msg = f\"Unknown feature {feature}\"\n        raise ValueError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "version_feature",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def version_feature(feature: str) -> str | None:\n    \"\"\"\n    :param feature: The feature to check for.\n    :returns: The version number as a string, or ``None`` if not available.\n    :raises ValueError: If the feature is not defined in this version of Pillow.\n    \"\"\"\n    if not check_feature(feature):\n        return None\n    module, flag, ver = features[feature]\n    if ver is None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "get_supported_features",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def get_supported_features() -> list[str]:\n    \"\"\"\n    :returns: A list of all supported features.\n    \"\"\"\n    supported_features = []\n    for f, (module, flag, _) in features.items():\n        if flag is True:\n            for feature, (feature_module, _) in modules.items():\n                if feature_module == module:\n                    if check_module(feature):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def check(feature: str) -> bool | None:\n    \"\"\"\n    :param feature: A module, codec, or feature name.\n    :returns:\n        ``True`` if the module, codec, or feature is available,\n        ``False`` or ``None`` otherwise.\n    \"\"\"\n    if feature in modules:\n        return check_module(feature)\n    if feature in codecs:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def version(feature: str) -> str | None:\n    \"\"\"\n    :param feature:\n        The module, codec, or feature to check for.\n    :returns:\n        The version number as a string, or ``None`` if unknown or not available.\n    \"\"\"\n    if feature in modules:\n        return version_module(feature)\n    if feature in codecs:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "get_supported",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def get_supported() -> list[str]:\n    \"\"\"\n    :returns: A list of all supported modules, features, and codecs.\n    \"\"\"\n    ret = get_supported_modules()\n    ret.extend(get_supported_features())\n    ret.extend(get_supported_codecs())\n    return ret\ndef pilinfo(out: IO[str] | None = None, supported_formats: bool = True) -> None:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "pilinfo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "def pilinfo(out: IO[str] | None = None, supported_formats: bool = True) -> None:\n    \"\"\"\n    Prints information about this installation of Pillow.\n    This function can be called with ``python3 -m PIL``.\n    It can also be called with ``python3 -m PIL.report`` or ``python3 -m PIL --report``\n    to have \"supported_formats\" set to ``False``, omitting the list of all supported\n    image file formats.\n    :param out:\n        The output stream to print to. Defaults to ``sys.stdout`` if ``None``.\n    :param supported_formats:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "modules",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "modules = {\n    \"pil\": (\"PIL._imaging\", \"PILLOW_VERSION\"),\n    \"tkinter\": (\"PIL._tkinter_finder\", \"tk_version\"),\n    \"freetype2\": (\"PIL._imagingft\", \"freetype2_version\"),\n    \"littlecms2\": (\"PIL._imagingcms\", \"littlecms_version\"),\n    \"webp\": (\"PIL._webp\", \"webpdecoder_version\"),\n    \"avif\": (\"PIL._avif\", \"libavif_version\"),\n}\ndef check_module(feature: str) -> bool:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "peekOfCode": "codecs = {\n    \"jpg\": (\"jpeg\", \"jpeglib\"),\n    \"jpg_2000\": (\"jpeg2k\", \"jp2klib\"),\n    \"zlib\": (\"zip\", \"zlib\"),\n    \"libtiff\": (\"libtiff\", \"libtiff\"),\n}\ndef check_codec(feature: str) -> bool:\n    \"\"\"\n    Checks if a codec is available.\n    :param feature: The codec to check for.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.features",
        "documentation": {}
    },
    {
        "label": "FitsImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "peekOfCode": "class FitsImageFile(ImageFile.ImageFile):\n    format = \"FITS\"\n    format_description = \"FITS\"\n    def _open(self) -> None:\n        assert self.fp is not None\n        headers: dict[bytes, bytes] = {}\n        header_in_progress = False\n        decoder_name = \"\"\n        while True:\n            header = self.fp.read(80)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "documentation": {}
    },
    {
        "label": "FitsGzipDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "peekOfCode": "class FitsGzipDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        value = gzip.decompress(self.fd.read())\n        rows = []\n        offset = 0\n        number_of_bits = min(self.args[0] // 8, 4)\n        for y in range(self.state.ysize):\n            row = bytearray()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FitsImagePlugin",
        "documentation": {}
    },
    {
        "label": "FliImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FliImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FliImagePlugin",
        "peekOfCode": "class FliImageFile(ImageFile.ImageFile):\n    format = \"FLI\"\n    format_description = \"Autodesk FLI/FLC Animation\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        # HEAD\n        s = self.fp.read(128)\n        if not (_accept(s) and s[20:22] == b\"\\x00\\x00\"):\n            msg = \"not an FLI/FLC file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FliImagePlugin",
        "documentation": {}
    },
    {
        "label": "FontFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "peekOfCode": "class FontFile:\n    \"\"\"Base class for raster font file handlers.\"\"\"\n    bitmap: Image.Image | None = None\n    def __init__(self) -> None:\n        self.info: dict[bytes, bytes | int] = {}\n        self.glyph: list[\n            tuple[\n                tuple[int, int],\n                tuple[int, int, int, int],\n                tuple[int, int, int, int],",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "documentation": {}
    },
    {
        "label": "puti16",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "peekOfCode": "def puti16(\n    fp: BinaryIO, values: tuple[int, int, int, int, int, int, int, int, int, int]\n) -> None:\n    \"\"\"Write network order (big-endian) 16-bit sequence\"\"\"\n    for v in values:\n        if v < 0:\n            v += 65536\n        fp.write(_binary.o16be(v))\nclass FontFile:\n    \"\"\"Base class for raster font file handlers.\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "peekOfCode": "WIDTH = 800\ndef puti16(\n    fp: BinaryIO, values: tuple[int, int, int, int, int, int, int, int, int, int]\n) -> None:\n    \"\"\"Write network order (big-endian) 16-bit sequence\"\"\"\n    for v in values:\n        if v < 0:\n            v += 65536\n        fp.write(_binary.o16be(v))\nclass FontFile:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FontFile",
        "documentation": {}
    },
    {
        "label": "FpxImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "peekOfCode": "class FpxImageFile(ImageFile.ImageFile):\n    format = \"FPX\"\n    format_description = \"FlashPix\"\n    def _open(self) -> None:\n        #\n        # read the OLE directory and see if this is a likely\n        # to be a FlashPix file\n        try:\n            self.ole = olefile.OleFileIO(self.fp)\n        except OSError as e:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "peekOfCode": "MODES = {\n    # opacity\n    (0x00007FFE,): (\"A\", \"L\"),\n    # monochrome\n    (0x00010000,): (\"L\", \"L\"),\n    (0x00018000, 0x00017FFE): (\"RGBA\", \"LA\"),\n    # photo YCC\n    (0x00020000, 0x00020001, 0x00020002): (\"RGB\", \"YCC;P\"),\n    (0x00028000, 0x00028001, 0x00028002, 0x00027FFE): (\"RGBA\", \"YCCA;P\"),\n    # standard RGB (NIFRGB)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FpxImagePlugin",
        "documentation": {}
    },
    {
        "label": "Format",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "class Format(IntEnum):\n    DXT1 = 0\n    UNCOMPRESSED = 1\nclass FtexImageFile(ImageFile.ImageFile):\n    format = \"FTEX\"\n    format_description = \"Texture File Format (IW2:EOC)\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not an FTEX file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "FtexImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "class FtexImageFile(ImageFile.ImageFile):\n    format = \"FTEX\"\n    format_description = \"Texture File Format (IW2:EOC)\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not an FTEX file\"\n            raise SyntaxError(msg)\n        struct.unpack(\"<i\", self.fp.read(4))  # version\n        self._size = struct.unpack(\"<2i\", self.fp.read(8))\n        mipmap_count, format_count = struct.unpack(\"<2i\", self.fp.read(8))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "{header}",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "{header} = {\n    u32:magic,\n    u32:version,\n    u32:width,\n    u32:height,\n    u32:mipmap_count,\n    u32:format_count\n}\n* The \"magic\" number is \"FTEX\".\n* \"width\" and \"height\" are the dimensions of the texture.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "{format_directory}",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "{format_directory} = format_count * { u32:format, u32:where }\nThe format value is 0 for DXT1 compressed textures and 1 for 24-bit RGB\nuncompressed textures.\nThe texture data for a format starts at the position \"where\" in the file.\nEach set of texture data in the file has the following structure:\n{data} = format_count * { u32:mipmap_size, mipmap_size * { u8 } }\n* \"mipmap_size\" is the number of bytes in that mip level. For compressed\ntextures this is the size of the texture data compressed with DXT1. For 24 bit\nuncompressed textures, this is 3 * width * height. Following this are the image\nbytes for that mipmap level.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "{data}",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "{data} = format_count * { u32:mipmap_size, mipmap_size * { u8 } }\n* \"mipmap_size\" is the number of bytes in that mip level. For compressed\ntextures this is the size of the texture data compressed with DXT1. For 24 bit\nuncompressed textures, this is 3 * width * height. Following this are the image\nbytes for that mipmap level.\nNote: All data is stored in little-Endian (Intel) byte order.\n\"\"\"\nfrom __future__ import annotations\nimport struct\nfrom enum import IntEnum",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "peekOfCode": "MAGIC = b\"FTEX\"\nclass Format(IntEnum):\n    DXT1 = 0\n    UNCOMPRESSED = 1\nclass FtexImageFile(ImageFile.ImageFile):\n    format = \"FTEX\"\n    format_description = \"Texture File Format (IW2:EOC)\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not an FTEX file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.FtexImagePlugin",
        "documentation": {}
    },
    {
        "label": "GbrImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GbrImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GbrImagePlugin",
        "peekOfCode": "class GbrImageFile(ImageFile.ImageFile):\n    format = \"GBR\"\n    format_description = \"GIMP brush file\"\n    def _open(self) -> None:\n        header_size = i32(self.fp.read(4))\n        if header_size < 20:\n            msg = \"not a GIMP brush\"\n            raise SyntaxError(msg)\n        version = i32(self.fp.read(4))\n        if version not in (1, 2):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GbrImagePlugin",
        "documentation": {}
    },
    {
        "label": "GdImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "peekOfCode": "class GdImageFile(ImageFile.ImageFile):\n    \"\"\"\n    Image plugin for the GD uncompressed format.  Note that this format\n    is not supported by the standard :py:func:`PIL.Image.open()` function.  To use\n    this plugin, you have to import the :py:mod:`PIL.GdImageFile` module and\n    use the :py:func:`PIL.GdImageFile.open()` function.\n    \"\"\"\n    format = \"GD\"\n    format_description = \"GD uncompressed images\"\n    def _open(self) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "peekOfCode": "def open(fp: StrOrBytesPath | IO[bytes], mode: str = \"r\") -> GdImageFile:\n    \"\"\"\n    Load texture from a GD image file.\n    :param fp: GD file name, or an opened file handle.\n    :param mode: Optional mode.  In this version, if the mode argument\n        is given, it must be \"r\".\n    :returns: An image instance.\n    :raises OSError: If the image could not be read.\n    \"\"\"\n    if mode != \"r\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GdImageFile",
        "documentation": {}
    },
    {
        "label": "LoadingStrategy",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "class LoadingStrategy(IntEnum):\n    \"\"\".. versionadded:: 9.1.0\"\"\"\n    RGB_AFTER_FIRST = 0\n    RGB_AFTER_DIFFERENT_PALETTE_ONLY = 1\n    RGB_ALWAYS = 2\n#: .. versionadded:: 9.1.0\nLOADING_STRATEGY = LoadingStrategy.RGB_AFTER_FIRST\n# --------------------------------------------------------------------\n# Identify/read GIF files\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "GifImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "class GifImageFile(ImageFile.ImageFile):\n    format = \"GIF\"\n    format_description = \"Compuserve GIF\"\n    _close_exclusive_fp_after_loading = False\n    global_palette = None\n    def data(self) -> bytes | None:\n        s = self.fp.read(1)\n        if s and s[0]:\n            return self.fp.read(s[0])\n        return None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "_Frame",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "class _Frame(NamedTuple):\n    im: Image.Image\n    bbox: tuple[int, int, int, int] | None\n    encoderinfo: dict[str, Any]\ndef _write_multiple_frames(\n    im: Image.Image, fp: IO[bytes], palette: _Palette | None\n) -> bool:\n    duration = im.encoderinfo.get(\"duration\")\n    disposal = im.encoderinfo.get(\"disposal\", im.info.get(\"disposal\"))\n    im_frames: list[_Frame] = []",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "get_interlace",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "def get_interlace(im: Image.Image) -> int:\n    interlace = im.encoderinfo.get(\"interlace\", 1)\n    # workaround for @PIL153\n    if min(im.size) < 16:\n        interlace = 0\n    return interlace\ndef _write_local_header(\n    fp: IO[bytes], im: Image.Image, offset: tuple[int, int], flags: int\n) -> None:\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "getheader",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "def getheader(\n    im: Image.Image, palette: _Palette | None = None, info: dict[str, Any] | None = None\n) -> tuple[list[bytes], list[int] | None]:\n    \"\"\"\n    Legacy Method to get Gif data from image.\n    Warning:: May modify image data.\n    :param im: Image object\n    :param palette: bytes object containing the source palette, or ....\n    :param info: encoderinfo\n    :returns: tuple of(list of header items, optimized palette)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "getdata",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "def getdata(\n    im: Image.Image, offset: tuple[int, int] = (0, 0), **params: Any\n) -> list[bytes]:\n    \"\"\"\n    Legacy Method\n    Return a list of strings representing this image.\n    The first string is a local image header, the rest contains\n    encoded image data.\n    To specify duration, add the time in milliseconds,\n    e.g. ``getdata(im_frame, duration=1000)``",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import _imaging\n    from ._typing import Buffer\nclass LoadingStrategy(IntEnum):\n    \"\"\".. versionadded:: 9.1.0\"\"\"\n    RGB_AFTER_FIRST = 0\n    RGB_AFTER_DIFFERENT_PALETTE_ONLY = 1\n    RGB_ALWAYS = 2\n#: .. versionadded:: 9.1.0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "LOADING_STRATEGY",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "LOADING_STRATEGY = LoadingStrategy.RGB_AFTER_FIRST\n# --------------------------------------------------------------------\n# Identify/read GIF files\ndef _accept(prefix: bytes) -> bool:\n    return prefix.startswith((b\"GIF87a\", b\"GIF89a\"))\n##\n# Image plugin for GIF images.  This plugin supports both GIF87 and\n# GIF89 images.\nclass GifImageFile(ImageFile.ImageFile):\n    format = \"GIF\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "RAWMODE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "RAWMODE = {\"1\": \"L\", \"L\": \"L\", \"P\": \"P\"}\ndef _normalize_mode(im: Image.Image) -> Image.Image:\n    \"\"\"\n    Takes an image (or frame), returns an image in a mode that is appropriate\n    for saving in a Gif.\n    It may return the original image, or it may return an image converted to\n    palette or 'L' mode.\n    :param im: Image object\n    :returns: Image object\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "_Palette",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "_Palette = Union[bytes, bytearray, list[int], ImagePalette.ImagePalette]\ndef _normalize_palette(\n    im: Image.Image, palette: _Palette | None, info: dict[str, Any]\n) -> Image.Image:\n    \"\"\"\n    Normalizes the palette for image.\n      - Sets the palette to the incoming palette, if provided.\n      - Ensures that there's a palette for L mode images\n      - Optimizes the palette if necessary/desired.\n    :param im: Image object",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "_FORCE_OPTIMIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "peekOfCode": "_FORCE_OPTIMIZE = False\ndef _get_optimize(im: Image.Image, info: dict[str, Any]) -> list[int] | None:\n    \"\"\"\n    Palette optimization is a potentially expensive operation.\n    This function determines if the palette should be optimized using\n    some heuristics, then returns the list of palette entries in use.\n    :param im: Image object\n    :param info: encoderinfo\n    :returns: list of indexes of palette entries in use, or None\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GifImagePlugin",
        "documentation": {}
    },
    {
        "label": "GradientFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "class GradientFile:\n    gradient: (\n        list[\n            tuple[\n                float,\n                float,\n                float,\n                list[float],\n                list[float],\n                Callable[[float, float], float],",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "GimpGradientFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "class GimpGradientFile(GradientFile):\n    \"\"\"File handler for GIMP's gradient format.\"\"\"\n    def __init__(self, fp: IO[bytes]) -> None:\n        if not fp.readline().startswith(b\"GIMP Gradient\"):\n            msg = \"not a GIMP gradient file\"\n            raise SyntaxError(msg)\n        line = fp.readline()\n        # GIMP 1.2 gradient files don't contain a name, but GIMP 1.3 files do\n        if line.startswith(b\"Name: \"):\n            line = fp.readline().strip()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "linear",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "def linear(middle: float, pos: float) -> float:\n    if pos <= middle:\n        if middle < EPSILON:\n            return 0.0\n        else:\n            return 0.5 * pos / middle\n    else:\n        pos = pos - middle\n        middle = 1.0 - middle\n        if middle < EPSILON:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "curved",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "def curved(middle: float, pos: float) -> float:\n    return pos ** (log(0.5) / log(max(middle, EPSILON)))\ndef sine(middle: float, pos: float) -> float:\n    return (sin((-pi / 2.0) + pi * linear(middle, pos)) + 1.0) / 2.0\ndef sphere_increasing(middle: float, pos: float) -> float:\n    return sqrt(1.0 - (linear(middle, pos) - 1.0) ** 2)\ndef sphere_decreasing(middle: float, pos: float) -> float:\n    return 1.0 - sqrt(1.0 - linear(middle, pos) ** 2)\nSEGMENTS = [linear, curved, sine, sphere_increasing, sphere_decreasing]\n\"\"\"\"\"\"  # Enable auto-doc for data member",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "sine",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "def sine(middle: float, pos: float) -> float:\n    return (sin((-pi / 2.0) + pi * linear(middle, pos)) + 1.0) / 2.0\ndef sphere_increasing(middle: float, pos: float) -> float:\n    return sqrt(1.0 - (linear(middle, pos) - 1.0) ** 2)\ndef sphere_decreasing(middle: float, pos: float) -> float:\n    return 1.0 - sqrt(1.0 - linear(middle, pos) ** 2)\nSEGMENTS = [linear, curved, sine, sphere_increasing, sphere_decreasing]\n\"\"\"\"\"\"  # Enable auto-doc for data member\nclass GradientFile:\n    gradient: (",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "sphere_increasing",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "def sphere_increasing(middle: float, pos: float) -> float:\n    return sqrt(1.0 - (linear(middle, pos) - 1.0) ** 2)\ndef sphere_decreasing(middle: float, pos: float) -> float:\n    return 1.0 - sqrt(1.0 - linear(middle, pos) ** 2)\nSEGMENTS = [linear, curved, sine, sphere_increasing, sphere_decreasing]\n\"\"\"\"\"\"  # Enable auto-doc for data member\nclass GradientFile:\n    gradient: (\n        list[\n            tuple[",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "sphere_decreasing",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "def sphere_decreasing(middle: float, pos: float) -> float:\n    return 1.0 - sqrt(1.0 - linear(middle, pos) ** 2)\nSEGMENTS = [linear, curved, sine, sphere_increasing, sphere_decreasing]\n\"\"\"\"\"\"  # Enable auto-doc for data member\nclass GradientFile:\n    gradient: (\n        list[\n            tuple[\n                float,\n                float,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "EPSILON = 1e-10\n\"\"\"\"\"\"  # Enable auto-doc for data member\ndef linear(middle: float, pos: float) -> float:\n    if pos <= middle:\n        if middle < EPSILON:\n            return 0.0\n        else:\n            return 0.5 * pos / middle\n    else:\n        pos = pos - middle",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "SEGMENTS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "peekOfCode": "SEGMENTS = [linear, curved, sine, sphere_increasing, sphere_decreasing]\n\"\"\"\"\"\"  # Enable auto-doc for data member\nclass GradientFile:\n    gradient: (\n        list[\n            tuple[\n                float,\n                float,\n                float,\n                list[float],",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpGradientFile",
        "documentation": {}
    },
    {
        "label": "GimpPaletteFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpPaletteFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpPaletteFile",
        "peekOfCode": "class GimpPaletteFile:\n    \"\"\"File handler for GIMP's palette format.\"\"\"\n    rawmode = \"RGB\"\n    def _read(self, fp: IO[bytes], limit: bool = True) -> None:\n        if not fp.readline().startswith(b\"GIMP Palette\"):\n            msg = \"not a GIMP palette file\"\n            raise SyntaxError(msg)\n        palette: list[int] = []\n        i = 0\n        while True:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GimpPaletteFile",
        "documentation": {}
    },
    {
        "label": "GribStubImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "peekOfCode": "class GribStubImageFile(ImageFile.StubImageFile):\n    format = \"GRIB\"\n    format_description = \"GRIB\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(8)):\n            msg = \"Not a GRIB file\"\n            raise SyntaxError(msg)\n        self.fp.seek(-8, os.SEEK_CUR)\n        # make something up\n        self._mode = \"F\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "register_handler",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "peekOfCode": "def register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific GRIB image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "_handler",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "peekOfCode": "_handler = None\ndef register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific GRIB image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.GribStubImagePlugin",
        "documentation": {}
    },
    {
        "label": "HDF5StubImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "peekOfCode": "class HDF5StubImageFile(ImageFile.StubImageFile):\n    format = \"HDF5\"\n    format_description = \"HDF5\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(8)):\n            msg = \"Not an HDF file\"\n            raise SyntaxError(msg)\n        self.fp.seek(-8, os.SEEK_CUR)\n        # make something up\n        self._mode = \"F\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "documentation": {}
    },
    {
        "label": "register_handler",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "peekOfCode": "def register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific HDF5 image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "documentation": {}
    },
    {
        "label": "_handler",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "peekOfCode": "_handler = None\ndef register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific HDF5 image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\n# --------------------------------------------------------------------\n# Image adapter",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Hdf5StubImagePlugin",
        "documentation": {}
    },
    {
        "label": "IcnsFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "class IcnsFile:\n    SIZES = {\n        (512, 512, 2): [(b\"ic10\", read_png_or_jpeg2000)],\n        (512, 512, 1): [(b\"ic09\", read_png_or_jpeg2000)],\n        (256, 256, 2): [(b\"ic14\", read_png_or_jpeg2000)],\n        (256, 256, 1): [(b\"ic08\", read_png_or_jpeg2000)],\n        (128, 128, 2): [(b\"ic13\", read_png_or_jpeg2000)],\n        (128, 128, 1): [\n            (b\"ic07\", read_png_or_jpeg2000),\n            (b\"it32\", read_32t),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "IcnsImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "class IcnsImageFile(ImageFile.ImageFile):\n    \"\"\"\n    PIL image support for Mac OS .icns files.\n    Chooses the best resolution, but will possibly load\n    a different size image if you mutate the size attribute\n    before calling 'load'.\n    The info dictionary has a key 'sizes' that is a list\n    of sizes that the icns file has.\n    \"\"\"\n    format = \"ICNS\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "nextheader",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "def nextheader(fobj: IO[bytes]) -> tuple[bytes, int]:\n    return struct.unpack(\">4sI\", fobj.read(HEADERSIZE))\ndef read_32t(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    # The 128x128 icon seems to have an extra header for some reason.\n    (start, length) = start_length\n    fobj.seek(start)\n    sig = fobj.read(4)\n    if sig != b\"\\x00\\x00\\x00\\x00\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "read_32t",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "def read_32t(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    # The 128x128 icon seems to have an extra header for some reason.\n    (start, length) = start_length\n    fobj.seek(start)\n    sig = fobj.read(4)\n    if sig != b\"\\x00\\x00\\x00\\x00\":\n        msg = \"Unknown signature, expecting 0x00000000\"\n        raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "read_32",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "def read_32(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    \"\"\"\n    Read a 32bit RGB icon resource.  Seems to be either uncompressed or\n    an RLE packbits-like scheme.\n    \"\"\"\n    (start, length) = start_length\n    fobj.seek(start)\n    pixel_size = (size[0] * size[2], size[1] * size[2])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "read_mk",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "def read_mk(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    # Alpha masks seem to be uncompressed\n    start = start_length[0]\n    fobj.seek(start)\n    pixel_size = (size[0] * size[2], size[1] * size[2])\n    sizesq = pixel_size[0] * pixel_size[1]\n    band = Image.frombuffer(\"L\", pixel_size, fobj.read(sizesq), \"raw\", \"L\", 0, 1)\n    return {\"A\": band}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "read_png_or_jpeg2000",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "def read_png_or_jpeg2000(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    (start, length) = start_length\n    fobj.seek(start)\n    sig = fobj.read(12)\n    im: Image.Image\n    if sig.startswith(b\"\\x89PNG\\x0d\\x0a\\x1a\\x0a\"):\n        fobj.seek(start)\n        im = PngImagePlugin.PngImageFile(fobj)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "enable_jpeg2k",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "enable_jpeg2k = features.check_codec(\"jpg_2000\")\nif enable_jpeg2k:\n    from . import Jpeg2KImagePlugin\nMAGIC = b\"icns\"\nHEADERSIZE = 8\ndef nextheader(fobj: IO[bytes]) -> tuple[bytes, int]:\n    return struct.unpack(\">4sI\", fobj.read(HEADERSIZE))\ndef read_32t(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "MAGIC = b\"icns\"\nHEADERSIZE = 8\ndef nextheader(fobj: IO[bytes]) -> tuple[bytes, int]:\n    return struct.unpack(\">4sI\", fobj.read(HEADERSIZE))\ndef read_32t(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    # The 128x128 icon seems to have an extra header for some reason.\n    (start, length) = start_length\n    fobj.seek(start)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "HEADERSIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "peekOfCode": "HEADERSIZE = 8\ndef nextheader(fobj: IO[bytes]) -> tuple[bytes, int]:\n    return struct.unpack(\">4sI\", fobj.read(HEADERSIZE))\ndef read_32t(\n    fobj: IO[bytes], start_length: tuple[int, int], size: tuple[int, int, int]\n) -> dict[str, Image.Image]:\n    # The 128x128 icon seems to have an extra header for some reason.\n    (start, length) = start_length\n    fobj.seek(start)\n    sig = fobj.read(4)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcnsImagePlugin",
        "documentation": {}
    },
    {
        "label": "IconHeader",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "peekOfCode": "class IconHeader(NamedTuple):\n    width: int\n    height: int\n    nb_color: int\n    reserved: int\n    planes: int\n    bpp: int\n    size: int\n    offset: int\n    dim: tuple[int, int]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "documentation": {}
    },
    {
        "label": "IcoFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "peekOfCode": "class IcoFile:\n    def __init__(self, buf: IO[bytes]) -> None:\n        \"\"\"\n        Parse image from file-like object containing ico file data\n        \"\"\"\n        # check magic\n        s = buf.read(6)\n        if not _accept(s):\n            msg = \"not an ICO file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "documentation": {}
    },
    {
        "label": "IcoImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "peekOfCode": "class IcoImageFile(ImageFile.ImageFile):\n    \"\"\"\n    PIL read-only image support for Microsoft Windows .ico files.\n    By default the largest resolution image in the file will be loaded. This\n    can be changed by altering the 'size' attribute before calling 'load'.\n    The info dictionary has a key 'sizes' that is a list of the sizes available\n    in the icon file.\n    Handles classic, XP and Vista icon formats.\n    When saving, PNG compression is used. Support for this was only added in\n    Windows Vista. If you are unable to view the icon in Windows, convert the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "documentation": {}
    },
    {
        "label": "_MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "peekOfCode": "_MAGIC = b\"\\0\\0\\1\\0\"\ndef _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    fp.write(_MAGIC)  # (2+2)\n    bmp = im.encoderinfo.get(\"bitmap_format\") == \"bmp\"\n    sizes = im.encoderinfo.get(\n        \"sizes\",\n        [(16, 16), (24, 24), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)],\n    )\n    frames = []\n    provided_ims = [im] + im.encoderinfo.get(\"append_images\", [])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IcoImagePlugin",
        "documentation": {}
    },
    {
        "label": "DecompressionBombWarning",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class DecompressionBombWarning(RuntimeWarning):\n    pass\nclass DecompressionBombError(Exception):\n    pass\nWARN_POSSIBLE_FORMATS: bool = False\n# Limit to around a quarter gigabyte for a 24-bit (3 bpp) image\nMAX_IMAGE_PIXELS: int | None = int(1024 * 1024 * 1024 // 4 // 3)\ntry:\n    # If the _imaging C module is not present, Pillow will not load.\n    # Note that other modules should not refer to _imaging directly;",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "DecompressionBombError",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class DecompressionBombError(Exception):\n    pass\nWARN_POSSIBLE_FORMATS: bool = False\n# Limit to around a quarter gigabyte for a 24-bit (3 bpp) image\nMAX_IMAGE_PIXELS: int | None = int(1024 * 1024 * 1024 // 4 // 3)\ntry:\n    # If the _imaging C module is not present, Pillow will not load.\n    # Note that other modules should not refer to _imaging directly;\n    # import Image and use the Image.core variable instead.\n    # Also note that Image.core is not a publicly documented interface,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Transpose",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Transpose(IntEnum):\n    FLIP_LEFT_RIGHT = 0\n    FLIP_TOP_BOTTOM = 1\n    ROTATE_90 = 2\n    ROTATE_180 = 3\n    ROTATE_270 = 4\n    TRANSPOSE = 5\n    TRANSVERSE = 6\n# transforms (also defined in Imaging.h)\nclass Transform(IntEnum):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Transform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Transform(IntEnum):\n    AFFINE = 0\n    EXTENT = 1\n    PERSPECTIVE = 2\n    QUAD = 3\n    MESH = 4\n# resampling filters (also defined in Imaging.h)\nclass Resampling(IntEnum):\n    NEAREST = 0\n    BOX = 4",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Resampling",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Resampling(IntEnum):\n    NEAREST = 0\n    BOX = 4\n    BILINEAR = 2\n    HAMMING = 5\n    BICUBIC = 3\n    LANCZOS = 1\n_filters_support = {\n    Resampling.BOX: 0.5,\n    Resampling.BILINEAR: 1.0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Dither",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Dither(IntEnum):\n    NONE = 0\n    ORDERED = 1  # Not yet implemented\n    RASTERIZE = 2  # Not yet implemented\n    FLOYDSTEINBERG = 3  # default\n# palettes/quantizers\nclass Palette(IntEnum):\n    WEB = 0\n    ADAPTIVE = 1\nclass Quantize(IntEnum):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Palette",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Palette(IntEnum):\n    WEB = 0\n    ADAPTIVE = 1\nclass Quantize(IntEnum):\n    MEDIANCUT = 0\n    MAXCOVERAGE = 1\n    FASTOCTREE = 2\n    LIBIMAGEQUANT = 3\nmodule = sys.modules[__name__]\nfor enum in (Transpose, Transform, Resampling, Dither, Palette, Quantize):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Quantize",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Quantize(IntEnum):\n    MEDIANCUT = 0\n    MAXCOVERAGE = 1\n    FASTOCTREE = 2\n    LIBIMAGEQUANT = 3\nmodule = sys.modules[__name__]\nfor enum in (Transpose, Transform, Resampling, Dither, Palette, Quantize):\n    for item in enum:\n        setattr(module, item.name, item.value)\nif hasattr(core, \"DEFAULT_STRATEGY\"):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "ImagePointTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class ImagePointTransform:\n    \"\"\"\n    Used with :py:meth:`~PIL.Image.Image.point` for single band images with more than\n    8 bits, this represents an affine transformation, where the value is multiplied by\n    ``scale`` and ``offset`` is added.\n    \"\"\"\n    def __init__(self, scale: float, offset: float) -> None:\n        self.scale = scale\n        self.offset = offset\n    def __neg__(self) -> ImagePointTransform:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "SupportsGetData",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class SupportsGetData(Protocol):\n    def getdata(\n        self,\n    ) -> tuple[Transform, Sequence[int]]: ...\nclass Image:\n    \"\"\"\n    This class represents an image object.  To create\n    :py:class:`~PIL.Image.Image` objects, use the appropriate factory\n    functions.  There's hardly ever any reason to call the Image constructor\n    directly.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Image:\n    \"\"\"\n    This class represents an image object.  To create\n    :py:class:`~PIL.Image.Image` objects, use the appropriate factory\n    functions.  There's hardly ever any reason to call the Image constructor\n    directly.\n    * :py:func:`~PIL.Image.open`\n    * :py:func:`~PIL.Image.new`\n    * :py:func:`~PIL.Image.frombytes`\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "ImagePointHandler",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class ImagePointHandler(abc.ABC):\n    \"\"\"\n    Used as a mixin by point transforms\n    (for use with :py:meth:`~PIL.Image.Image.point`)\n    \"\"\"\n    @abc.abstractmethod\n    def point(self, im: Image) -> Image:\n        pass\nclass ImageTransformHandler(abc.ABC):\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "ImageTransformHandler",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class ImageTransformHandler(abc.ABC):\n    \"\"\"\n    Used as a mixin by geometry transforms\n    (for use with :py:meth:`~PIL.Image.Image.transform`)\n    \"\"\"\n    @abc.abstractmethod\n    def transform(\n        self,\n        size: tuple[int, int],\n        image: Image,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "SupportsArrayInterface",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class SupportsArrayInterface(Protocol):\n    \"\"\"\n    An object that has an ``__array_interface__`` dictionary.\n    \"\"\"\n    @property\n    def __array_interface__(self) -> dict[str, Any]:\n        raise NotImplementedError()\nclass SupportsArrowArrayInterface(Protocol):\n    \"\"\"\n    An object that has an ``__arrow_c_array__`` method corresponding to the arrow c",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "SupportsArrowArrayInterface",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class SupportsArrowArrayInterface(Protocol):\n    \"\"\"\n    An object that has an ``__arrow_c_array__`` method corresponding to the arrow c\n    data interface.\n    \"\"\"\n    def __arrow_c_array__(\n        self, requested_schema: \"PyCapsule\" = None  # type: ignore[name-defined]  # noqa: F821, UP037\n    ) -> tuple[\"PyCapsule\", \"PyCapsule\"]:  # type: ignore[name-defined]  # noqa: F821, UP037\n        raise NotImplementedError()\ndef fromarray(obj: SupportsArrayInterface, mode: str | None = None) -> Image:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "Exif",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "class Exif(_ExifBase):\n    \"\"\"\n    This class provides read and write access to EXIF image data::\n      from PIL import Image\n      im = Image.open(\"exif.png\")\n      exif = im.getexif()  # Returns an instance of this class\n    Information can be read and written, iterated over or deleted::\n      print(exif[274])  # 1\n      exif[274] = 2\n      for k, v in exif.items():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "isImageType",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def isImageType(t: Any) -> TypeGuard[Image]:\n    \"\"\"\n    Checks if an object is an image object.\n    .. warning::\n       This function is for internal use only.\n    :param t: object to check if it's an image\n    :returns: True if the object is an image\n    \"\"\"\n    deprecate(\"Image.isImageType(im)\", 12, \"isinstance(im, Image.Image)\")\n    return hasattr(t, \"im\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "getmodebase",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def getmodebase(mode: str) -> str:\n    \"\"\"\n    Gets the \"base\" mode for given mode.  This function returns \"L\" for\n    images that contain grayscale data, and \"RGB\" for images that\n    contain color data.\n    :param mode: Input mode.\n    :returns: \"L\" or \"RGB\".\n    :exception KeyError: If the input mode was not a standard mode.\n    \"\"\"\n    return ImageMode.getmode(mode).basemode",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "getmodetype",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def getmodetype(mode: str) -> str:\n    \"\"\"\n    Gets the storage type mode.  Given a mode, this function returns a\n    single-layer mode suitable for storing individual bands.\n    :param mode: Input mode.\n    :returns: \"L\", \"I\", or \"F\".\n    :exception KeyError: If the input mode was not a standard mode.\n    \"\"\"\n    return ImageMode.getmode(mode).basetype\ndef getmodebandnames(mode: str) -> tuple[str, ...]:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "getmodebandnames",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def getmodebandnames(mode: str) -> tuple[str, ...]:\n    \"\"\"\n    Gets a list of individual band names.  Given a mode, this function returns\n    a tuple containing the names of individual bands (use\n    :py:method:`~PIL.Image.getmodetype` to get the mode used to store each\n    individual band.\n    :param mode: Input mode.\n    :returns: A tuple containing band names.  The length of the tuple\n        gives the number of bands in an image of the given mode.\n    :exception KeyError: If the input mode was not a standard mode.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "getmodebands",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def getmodebands(mode: str) -> int:\n    \"\"\"\n    Gets the number of individual bands for this mode.\n    :param mode: Input mode.\n    :returns: The number of bands in this mode.\n    :exception KeyError: If the input mode was not a standard mode.\n    \"\"\"\n    return len(ImageMode.getmode(mode).bands)\n# --------------------------------------------------------------------\n# Helpers",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "preinit",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def preinit() -> None:\n    \"\"\"\n    Explicitly loads BMP, GIF, JPEG, PPM and PPM file format drivers.\n    It is called when opening or saving images.\n    \"\"\"\n    global _initialized\n    if _initialized >= 1:\n        return\n    try:\n        from . import BmpImagePlugin",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def init() -> bool:\n    \"\"\"\n    Explicitly initializes the Python Imaging Library. This function\n    loads all available file format drivers.\n    It is called when opening or saving images if :py:meth:`~preinit()` is\n    insufficient, and by :py:meth:`~PIL.features.pilinfo`.\n    \"\"\"\n    global _initialized\n    if _initialized >= 2:\n        return False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "new",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def new(\n    mode: str,\n    size: tuple[int, int] | list[int],\n    color: float | tuple[float, ...] | str | None = 0,\n) -> Image:\n    \"\"\"\n    Creates a new image with the given mode and size.\n    :param mode: The mode to use for the new image. See:\n       :ref:`concept-modes`.\n    :param size: A 2-tuple, containing (width, height) in pixels.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "frombytes",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def frombytes(\n    mode: str,\n    size: tuple[int, int],\n    data: bytes | bytearray | SupportsArrayInterface,\n    decoder_name: str = \"raw\",\n    *args: Any,\n) -> Image:\n    \"\"\"\n    Creates a copy of an image memory from pixel data in a buffer.\n    In its simplest form, this function takes three arguments",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "frombuffer",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def frombuffer(\n    mode: str,\n    size: tuple[int, int],\n    data: bytes | SupportsArrayInterface,\n    decoder_name: str = \"raw\",\n    *args: Any,\n) -> Image:\n    \"\"\"\n    Creates an image memory referencing pixel data in a byte buffer.\n    This function is similar to :py:func:`~PIL.Image.frombytes`, but uses data",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "fromarray",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def fromarray(obj: SupportsArrayInterface, mode: str | None = None) -> Image:\n    \"\"\"\n    Creates an image memory from an object exporting the array interface\n    (using the buffer protocol)::\n      from PIL import Image\n      import numpy as np\n      a = np.zeros((5, 5))\n      im = Image.fromarray(a)\n    If ``obj`` is not contiguous, then the ``tobytes`` method is called\n    and :py:func:`~PIL.Image.frombuffer` is used.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "fromarrow",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def fromarrow(\n    obj: SupportsArrowArrayInterface, mode: str, size: tuple[int, int]\n) -> Image:\n    \"\"\"Creates an image with zero-copy shared memory from an object exporting\n    the arrow_c_array interface protocol::\n      from PIL import Image\n      import pyarrow as pa\n      arr = pa.array([0]*(5*5*4), type=pa.uint8())\n      im = Image.fromarrow(arr, 'RGBA', (5, 5))\n    If the data representation of the ``obj`` is not compatible with",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "fromqimage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def fromqimage(im: ImageQt.QImage) -> ImageFile.ImageFile:\n    \"\"\"Creates an image instance from a QImage image\"\"\"\n    from . import ImageQt\n    if not ImageQt.qt_is_installed:\n        msg = \"Qt bindings are not installed\"\n        raise ImportError(msg)\n    return ImageQt.fromqimage(im)\ndef fromqpixmap(im: ImageQt.QPixmap) -> ImageFile.ImageFile:\n    \"\"\"Creates an image instance from a QPixmap image\"\"\"\n    from . import ImageQt",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "fromqpixmap",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def fromqpixmap(im: ImageQt.QPixmap) -> ImageFile.ImageFile:\n    \"\"\"Creates an image instance from a QPixmap image\"\"\"\n    from . import ImageQt\n    if not ImageQt.qt_is_installed:\n        msg = \"Qt bindings are not installed\"\n        raise ImportError(msg)\n    return ImageQt.fromqpixmap(im)\n_fromarray_typemap = {\n    # (shape, typestr) => mode, rawmode\n    # first two members of shape are set to one",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def open(\n    fp: StrOrBytesPath | IO[bytes],\n    mode: Literal[\"r\"] = \"r\",\n    formats: list[str] | tuple[str, ...] | None = None,\n) -> ImageFile.ImageFile:\n    \"\"\"\n    Opens and identifies the given image file.\n    This is a lazy operation; this function identifies the file, but\n    the file remains open and the actual image data is not read from\n    the file until you try to process the data (or call the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "alpha_composite",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def alpha_composite(im1: Image, im2: Image) -> Image:\n    \"\"\"\n    Alpha composite im2 over im1.\n    :param im1: The first image. Must have mode RGBA.\n    :param im2: The second image.  Must have mode RGBA, and the same size as\n       the first image.\n    :returns: An :py:class:`~PIL.Image.Image` object.\n    \"\"\"\n    im1.load()\n    im2.load()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "blend",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def blend(im1: Image, im2: Image, alpha: float) -> Image:\n    \"\"\"\n    Creates a new image by interpolating between two input images, using\n    a constant alpha::\n        out = image1 * (1.0 - alpha) + image2 * alpha\n    :param im1: The first image.\n    :param im2: The second image.  Must have the same mode and size as\n       the first image.\n    :param alpha: The interpolation alpha factor.  If alpha is 0.0, a\n       copy of the first image is returned. If alpha is 1.0, a copy of",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "composite",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def composite(image1: Image, image2: Image, mask: Image) -> Image:\n    \"\"\"\n    Create composite image by blending images using a transparency mask.\n    :param image1: The first image.\n    :param image2: The second image.  Must have the same mode and\n       size as the first image.\n    :param mask: A mask image.  This image can have mode\n       \"1\", \"L\", or \"RGBA\", and must have the same size as the\n       other two images.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "eval",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def eval(image: Image, *args: Callable[[int], float]) -> Image:\n    \"\"\"\n    Applies the function (which should take one argument) to each pixel\n    in the given image. If the image has more than one band, the same\n    function is applied to each band. Note that the function is\n    evaluated once for each possible pixel value, so you cannot use\n    random components or other generators.\n    :param image: The input image.\n    :param function: A function object, taking one integer argument.\n    :returns: An :py:class:`~PIL.Image.Image` object.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def merge(mode: str, bands: Sequence[Image]) -> Image:\n    \"\"\"\n    Merge a set of single band images into a new multiband image.\n    :param mode: The mode to use for the output image. See:\n        :ref:`concept-modes`.\n    :param bands: A sequence containing one single-band image for\n        each band in the output image.  All bands must have the\n        same size.\n    :returns: An :py:class:`~PIL.Image.Image` object.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_open",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_open(\n    id: str,\n    factory: (\n        Callable[[IO[bytes], str | bytes], ImageFile.ImageFile]\n        | type[ImageFile.ImageFile]\n    ),\n    accept: Callable[[bytes], bool | str] | None = None,\n) -> None:\n    \"\"\"\n    Register an image file plugin.  This function should not be used",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_mime",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_mime(id: str, mimetype: str) -> None:\n    \"\"\"\n    Registers an image MIME type by populating ``Image.MIME``. This function\n    should not be used in application code.\n    ``Image.MIME`` provides a mapping from image format identifiers to mime\n    formats, but :py:meth:`~PIL.ImageFile.ImageFile.get_format_mimetype` can\n    provide a different result for specific images.\n    :param id: An image format identifier.\n    :param mimetype: The image MIME type for this format.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_save",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_save(\n    id: str, driver: Callable[[Image, IO[bytes], str | bytes], None]\n) -> None:\n    \"\"\"\n    Registers an image save function.  This function should not be\n    used in application code.\n    :param id: An image format identifier.\n    :param driver: A function to save images in this format.\n    \"\"\"\n    SAVE[id.upper()] = driver",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_save_all",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_save_all(\n    id: str, driver: Callable[[Image, IO[bytes], str | bytes], None]\n) -> None:\n    \"\"\"\n    Registers an image function to save all the frames\n    of a multiframe format.  This function should not be\n    used in application code.\n    :param id: An image format identifier.\n    :param driver: A function to save images in this format.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_extension",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_extension(id: str, extension: str) -> None:\n    \"\"\"\n    Registers an image extension.  This function should not be\n    used in application code.\n    :param id: An image format identifier.\n    :param extension: An extension used for this format.\n    \"\"\"\n    EXTENSION[extension.lower()] = id.upper()\ndef register_extensions(id: str, extensions: list[str]) -> None:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_extensions",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_extensions(id: str, extensions: list[str]) -> None:\n    \"\"\"\n    Registers image extensions.  This function should not be\n    used in application code.\n    :param id: An image format identifier.\n    :param extensions: A list of extensions used for this format.\n    \"\"\"\n    for extension in extensions:\n        register_extension(id, extension)\ndef registered_extensions() -> dict[str, str]:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "registered_extensions",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def registered_extensions() -> dict[str, str]:\n    \"\"\"\n    Returns a dictionary containing all file extensions belonging\n    to registered plugins\n    \"\"\"\n    init()\n    return EXTENSION\ndef register_decoder(name: str, decoder: type[ImageFile.PyDecoder]) -> None:\n    \"\"\"\n    Registers an image decoder.  This function should not be",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_decoder",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_decoder(name: str, decoder: type[ImageFile.PyDecoder]) -> None:\n    \"\"\"\n    Registers an image decoder.  This function should not be\n    used in application code.\n    :param name: The name of the decoder\n    :param decoder: An ImageFile.PyDecoder object\n    .. versionadded:: 4.1.0\n    \"\"\"\n    DECODERS[name] = decoder\ndef register_encoder(name: str, encoder: type[ImageFile.PyEncoder]) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "register_encoder",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def register_encoder(name: str, encoder: type[ImageFile.PyEncoder]) -> None:\n    \"\"\"\n    Registers an image encoder.  This function should not be\n    used in application code.\n    :param name: The name of the encoder\n    :param encoder: An ImageFile.PyEncoder object\n    .. versionadded:: 4.1.0\n    \"\"\"\n    ENCODERS[name] = encoder\n# --------------------------------------------------------------------",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "effect_mandelbrot",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def effect_mandelbrot(\n    size: tuple[int, int], extent: tuple[float, float, float, float], quality: int\n) -> Image:\n    \"\"\"\n    Generate a Mandelbrot set covering the given extent.\n    :param size: The requested size in pixels, as a 2-tuple:\n       (width, height).\n    :param extent: The extent to cover, as a 4-tuple:\n       (x0, y0, x1, y1).\n    :param quality: Quality.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "effect_noise",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def effect_noise(size: tuple[int, int], sigma: float) -> Image:\n    \"\"\"\n    Generate Gaussian noise centered around 128.\n    :param size: The requested size in pixels, as a 2-tuple:\n       (width, height).\n    :param sigma: Standard deviation of noise.\n    \"\"\"\n    return Image()._new(core.effect_noise(size, sigma))\ndef linear_gradient(mode: str) -> Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "linear_gradient",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def linear_gradient(mode: str) -> Image:\n    \"\"\"\n    Generate 256x256 linear gradient from black to white, top to bottom.\n    :param mode: Input mode.\n    \"\"\"\n    return Image()._new(core.linear_gradient(mode))\ndef radial_gradient(mode: str) -> Image:\n    \"\"\"\n    Generate 256x256 radial gradient from black to white, centre to edge.\n    :param mode: Input mode.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "radial_gradient",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "def radial_gradient(mode: str) -> Image:\n    \"\"\"\n    Generate 256x256 radial gradient from black to white, centre to edge.\n    :param mode: Input mode.\n    \"\"\"\n    return Image()._new(core.radial_gradient(mode))\n# --------------------------------------------------------------------\n# Resources\ndef _apply_env_variables(env: dict[str, str] | None = None) -> None:\n    env_dict = env if env is not None else os.environ",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DecompressionBombWarning(RuntimeWarning):\n    pass\nclass DecompressionBombError(Exception):\n    pass\nWARN_POSSIBLE_FORMATS: bool = False\n# Limit to around a quarter gigabyte for a 24-bit (3 bpp) image\nMAX_IMAGE_PIXELS: int | None = int(1024 * 1024 * 1024 // 4 // 3)\ntry:\n    # If the _imaging C module is not present, Pillow will not load.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "_filters_support",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "_filters_support = {\n    Resampling.BOX: 0.5,\n    Resampling.BILINEAR: 1.0,\n    Resampling.HAMMING: 1.0,\n    Resampling.BICUBIC: 2.0,\n    Resampling.LANCZOS: 3.0,\n}\n# dithers\nclass Dither(IntEnum):\n    NONE = 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "module = sys.modules[__name__]\nfor enum in (Transpose, Transform, Resampling, Dither, Palette, Quantize):\n    for item in enum:\n        setattr(module, item.name, item.value)\nif hasattr(core, \"DEFAULT_STRATEGY\"):\n    DEFAULT_STRATEGY = core.DEFAULT_STRATEGY\n    FILTERED = core.FILTERED\n    HUFFMAN_ONLY = core.HUFFMAN_ONLY\n    RLE = core.RLE\n    FIXED = core.FIXED",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    import mmap\n    from xml.etree.ElementTree import Element\n    from IPython.lib.pretty import PrettyPrinter\n    from . import ImageFile, ImageFilter, ImagePalette, ImageQt, TiffImagePlugin\n    from ._typing import CapsuleType, NumpyArray, StrOrBytesPath, TypeGuard\nID: list[str] = []\nOPEN: dict[\n    str,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "] = {}\nMIME: dict[str, str] = {}\nSAVE: dict[str, Callable[[Image, IO[bytes], str | bytes], None]] = {}\nSAVE_ALL: dict[str, Callable[[Image, IO[bytes], str | bytes], None]] = {}\nEXTENSION: dict[str, str] = {}\nDECODERS: dict[str, type[ImageFile.PyDecoder]] = {}\nENCODERS: dict[str, type[ImageFile.PyEncoder]] = {}\n# --------------------------------------------------------------------\n# Modes\n_ENDIAN = \"<\" if sys.byteorder == \"little\" else \">\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "_ENDIAN",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "_ENDIAN = \"<\" if sys.byteorder == \"little\" else \">\"\ndef _conv_type_shape(im: Image) -> tuple[tuple[int, ...], str]:\n    m = ImageMode.getmode(im.mode)\n    shape: tuple[int, ...] = (im.height, im.width)\n    extra = len(m.bands)\n    if extra != 1:\n        shape += (extra,)\n    return shape, m.typestr\nMODES = [\n    \"1\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "MODES = [\n    \"1\",\n    \"CMYK\",\n    \"F\",\n    \"HSV\",\n    \"I\",\n    \"I;16\",\n    \"I;16B\",\n    \"I;16L\",\n    \"I;16N\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "_MAPMODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "_MAPMODES = (\"L\", \"P\", \"RGBX\", \"RGBA\", \"CMYK\", \"I;16\", \"I;16L\", \"I;16B\")\ndef getmodebase(mode: str) -> str:\n    \"\"\"\n    Gets the \"base\" mode for given mode.  This function returns \"L\" for\n    images that contain grayscale data, and \"RGB\" for images that\n    contain color data.\n    :param mode: Input mode.\n    :returns: \"L\" or \"RGB\".\n    :exception KeyError: If the input mode was not a standard mode.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "_initialized",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "_initialized = 0\ndef preinit() -> None:\n    \"\"\"\n    Explicitly loads BMP, GIF, JPEG, PPM and PPM file format drivers.\n    It is called when opening or saving images.\n    \"\"\"\n    global _initialized\n    if _initialized >= 1:\n        return\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "_fromarray_typemap",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "peekOfCode": "_fromarray_typemap = {\n    # (shape, typestr) => mode, rawmode\n    # first two members of shape are set to one\n    ((1, 1), \"|b1\"): (\"1\", \"1;8\"),\n    ((1, 1), \"|u1\"): (\"L\", \"L\"),\n    ((1, 1), \"|i1\"): (\"I\", \"I;8\"),\n    ((1, 1), \"<u2\"): (\"I\", \"I;16\"),\n    ((1, 1), \">u2\"): (\"I\", \"I;16B\"),\n    ((1, 1), \"<i2\"): (\"I\", \"I;16S\"),\n    ((1, 1), \">i2\"): (\"I\", \"I;16BS\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Image",
        "documentation": {}
    },
    {
        "label": "constant",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def constant(image: Image.Image, value: int) -> Image.Image:\n    \"\"\"Fill a channel with a given gray level.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    return Image.new(\"L\", image.size, value)\ndef duplicate(image: Image.Image) -> Image.Image:\n    \"\"\"Copy a channel. Alias for :py:meth:`PIL.Image.Image.copy`.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    return image.copy()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "duplicate",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def duplicate(image: Image.Image) -> Image.Image:\n    \"\"\"Copy a channel. Alias for :py:meth:`PIL.Image.Image.copy`.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    return image.copy()\ndef invert(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Invert an image (channel). ::\n        out = MAX - image\n    :rtype: :py:class:`~PIL.Image.Image`",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "invert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def invert(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Invert an image (channel). ::\n        out = MAX - image\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image.load()\n    return image._new(image.im.chop_invert())\ndef lighter(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "lighter",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def lighter(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Compares the two images, pixel by pixel, and returns a new image containing\n    the lighter values. ::\n        out = max(image1, image2)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_lighter(image2.im))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "darker",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def darker(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Compares the two images, pixel by pixel, and returns a new image containing\n    the darker values. ::\n        out = min(image1, image2)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_darker(image2.im))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "difference",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def difference(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Returns the absolute value of the pixel-by-pixel difference between the two\n    images. ::\n        out = abs(image1 - image2)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_difference(image2.im))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def multiply(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Superimposes two images on top of each other.\n    If you multiply an image with a solid black image, the result is black. If\n    you multiply with a solid white image, the image is unaffected. ::\n        out = image1 * image2 / MAX\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def screen(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Superimposes two inverted images on top of each other. ::\n        out = MAX - ((MAX - image1) * (MAX - image2) / MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_screen(image2.im))\ndef soft_light(image1: Image.Image, image2: Image.Image) -> Image.Image:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "soft_light",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def soft_light(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Superimposes two images on top of each other using the Soft Light algorithm\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_soft_light(image2.im))\ndef hard_light(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "hard_light",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def hard_light(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Superimposes two images on top of each other using the Hard Light algorithm\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_hard_light(image2.im))\ndef overlay(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "overlay",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def overlay(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"\n    Superimposes two images on top of each other using the Overlay algorithm\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_overlay(image2.im))\ndef add(\n    image1: Image.Image, image2: Image.Image, scale: float = 1.0, offset: float = 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def add(\n    image1: Image.Image, image2: Image.Image, scale: float = 1.0, offset: float = 0\n) -> Image.Image:\n    \"\"\"\n    Adds two images, dividing the result by scale and adding the\n    offset. If omitted, scale defaults to 1.0, and offset to 0.0. ::\n        out = ((image1 + image2) / scale + offset)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def subtract(\n    image1: Image.Image, image2: Image.Image, scale: float = 1.0, offset: float = 0\n) -> Image.Image:\n    \"\"\"\n    Subtracts two images, dividing the result by scale and adding the offset.\n    If omitted, scale defaults to 1.0, and offset to 0.0. ::\n        out = ((image1 - image2) / scale + offset)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "add_modulo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def add_modulo(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Add two images, without clipping the result. ::\n        out = ((image1 + image2) % MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_add_modulo(image2.im))\ndef subtract_modulo(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Subtract two images, without clipping the result. ::",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "subtract_modulo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def subtract_modulo(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Subtract two images, without clipping the result. ::\n        out = ((image1 - image2) % MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_subtract_modulo(image2.im))\ndef logical_and(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Logical AND between two images.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "logical_and",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def logical_and(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Logical AND between two images.\n    Both of the images must have mode \"1\". If you would like to perform a\n    logical AND on an image with a mode other than \"1\", try\n    :py:meth:`~PIL.ImageChops.multiply` instead, using a black-and-white mask\n    as the second image. ::\n        out = ((image1 and image2) % MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "logical_or",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def logical_or(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Logical OR between two images.\n    Both of the images must have mode \"1\". ::\n        out = ((image1 or image2) % MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_or(image2.im))\ndef logical_xor(image1: Image.Image, image2: Image.Image) -> Image.Image:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "logical_xor",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def logical_xor(image1: Image.Image, image2: Image.Image) -> Image.Image:\n    \"\"\"Logical XOR between two images.\n    Both of the images must have mode \"1\". ::\n        out = ((bool(image1) != bool(image2)) % MAX)\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    image1.load()\n    image2.load()\n    return image1._new(image1.im.chop_xor(image2.im))\ndef blend(image1: Image.Image, image2: Image.Image, alpha: float) -> Image.Image:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "blend",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def blend(image1: Image.Image, image2: Image.Image, alpha: float) -> Image.Image:\n    \"\"\"Blend images using constant transparency weight. Alias for\n    :py:func:`PIL.Image.blend`.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    return Image.blend(image1, image2, alpha)\ndef composite(\n    image1: Image.Image, image2: Image.Image, mask: Image.Image\n) -> Image.Image:\n    \"\"\"Create composite using transparency mask. Alias for",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "composite",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def composite(\n    image1: Image.Image, image2: Image.Image, mask: Image.Image\n) -> Image.Image:\n    \"\"\"Create composite using transparency mask. Alias for\n    :py:func:`PIL.Image.composite`.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"\n    return Image.composite(image1, image2, mask)\ndef offset(image: Image.Image, xoffset: int, yoffset: int | None = None) -> Image.Image:\n    \"\"\"Returns a copy of the image where data has been offset by the given",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "offset",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "peekOfCode": "def offset(image: Image.Image, xoffset: int, yoffset: int | None = None) -> Image.Image:\n    \"\"\"Returns a copy of the image where data has been offset by the given\n    distances. Data wraps around the edges. If ``yoffset`` is omitted, it\n    is assumed to be equal to ``xoffset``.\n    :param image: Input image.\n    :param xoffset: The horizontal distance.\n    :param yoffset: The vertical distance.  If omitted, both\n        distances are set to the same value.\n    :rtype: :py:class:`~PIL.Image.Image`\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageChops",
        "documentation": {}
    },
    {
        "label": "Intent",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class Intent(IntEnum):\n    PERCEPTUAL = 0\n    RELATIVE_COLORIMETRIC = 1\n    SATURATION = 2\n    ABSOLUTE_COLORIMETRIC = 3\nclass Direction(IntEnum):\n    INPUT = 0\n    OUTPUT = 1\n    PROOF = 2\n#",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "Direction",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class Direction(IntEnum):\n    INPUT = 0\n    OUTPUT = 1\n    PROOF = 2\n#\n# flags\nclass Flags(IntFlag):\n    \"\"\"Flags and documentation are taken from ``lcms2.h``.\"\"\"\n    NONE = 0\n    NOCACHE = 0x0040",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "Flags",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class Flags(IntFlag):\n    \"\"\"Flags and documentation are taken from ``lcms2.h``.\"\"\"\n    NONE = 0\n    NOCACHE = 0x0040\n    \"\"\"Inhibit 1-pixel cache\"\"\"\n    NOOPTIMIZE = 0x0100\n    \"\"\"Inhibit optimizations\"\"\"\n    NULLTRANSFORM = 0x0200\n    \"\"\"Don't transform anyway\"\"\"\n    GAMUTCHECK = 0x1000",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "ImageCmsProfile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class ImageCmsProfile:\n    def __init__(self, profile: str | SupportsRead[bytes] | core.CmsProfile) -> None:\n        \"\"\"\n        :param profile: Either a string representing a filename,\n            a file like object containing a profile or a\n            low-level profile object\n        \"\"\"\n        self.filename = None\n        self.product_name = None  # profile.product_name\n        self.product_info = None  # profile.product_info",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "ImageCmsTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class ImageCmsTransform(Image.ImagePointHandler):\n    \"\"\"\n    Transform.  This can be used with the procedural API, or with the standard\n    :py:func:`~PIL.Image.Image.point` method.\n    Will return the output profile in the ``output.info['icc_profile']``.\n    \"\"\"\n    def __init__(\n        self,\n        input: ImageCmsProfile,\n        output: ImageCmsProfile,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "PyCMSError",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "class PyCMSError(Exception):\n    \"\"\"(pyCMS) Exception class.\n    This is used for all errors in the pyCMS API.\"\"\"\n    pass\ndef profileToProfile(\n    im: Image.Image,\n    inputProfile: _CmsProfileCompatible,\n    outputProfile: _CmsProfileCompatible,\n    renderingIntent: Intent = Intent.PERCEPTUAL,\n    outputMode: str | None = None,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "get_display_profile",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def get_display_profile(handle: SupportsInt | None = None) -> ImageCmsProfile | None:\n    \"\"\"\n    (experimental) Fetches the profile for the current display device.\n    :returns: ``None`` if the profile is not known.\n    \"\"\"\n    if sys.platform != \"win32\":\n        return None\n    from . import ImageWin  # type: ignore[unused-ignore, unreachable]\n    if isinstance(handle, ImageWin.HDC):\n        profile = core.get_display_profile_win32(int(handle), 1)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "profileToProfile",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def profileToProfile(\n    im: Image.Image,\n    inputProfile: _CmsProfileCompatible,\n    outputProfile: _CmsProfileCompatible,\n    renderingIntent: Intent = Intent.PERCEPTUAL,\n    outputMode: str | None = None,\n    inPlace: bool = False,\n    flags: Flags = Flags.NONE,\n) -> Image.Image | None:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getOpenProfile",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getOpenProfile(\n    profileFilename: str | SupportsRead[bytes] | core.CmsProfile,\n) -> ImageCmsProfile:\n    \"\"\"\n    (pyCMS) Opens an ICC profile file.\n    The PyCMSProfile object can be passed back into pyCMS for use in creating\n    transforms and such (as in ImageCms.buildTransformFromOpenProfiles()).\n    If ``profileFilename`` is not a valid filename for an ICC profile,\n    a :exc:`PyCMSError` will be raised.\n    :param profileFilename: String, as a valid filename path to the ICC profile",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "buildTransform",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def buildTransform(\n    inputProfile: _CmsProfileCompatible,\n    outputProfile: _CmsProfileCompatible,\n    inMode: str,\n    outMode: str,\n    renderingIntent: Intent = Intent.PERCEPTUAL,\n    flags: Flags = Flags.NONE,\n) -> ImageCmsTransform:\n    \"\"\"\n    (pyCMS) Builds an ICC transform mapping from the ``inputProfile`` to the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "buildProofTransform",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def buildProofTransform(\n    inputProfile: _CmsProfileCompatible,\n    outputProfile: _CmsProfileCompatible,\n    proofProfile: _CmsProfileCompatible,\n    inMode: str,\n    outMode: str,\n    renderingIntent: Intent = Intent.PERCEPTUAL,\n    proofRenderingIntent: Intent = Intent.ABSOLUTE_COLORIMETRIC,\n    flags: Flags = Flags.SOFTPROOFING,\n) -> ImageCmsTransform:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "applyTransform",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def applyTransform(\n    im: Image.Image, transform: ImageCmsTransform, inPlace: bool = False\n) -> Image.Image | None:\n    \"\"\"\n    (pyCMS) Applies a transform to a given image.\n    If ``im.mode != transform.input_mode``, a :exc:`PyCMSError` is raised.\n    If ``inPlace`` is ``True`` and ``transform.input_mode != transform.output_mode``, a\n    :exc:`PyCMSError` is raised.\n    If ``im.mode``, ``transform.input_mode`` or ``transform.output_mode`` is not\n    supported by pyCMSdll or the profiles you used for the transform, a",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "createProfile",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def createProfile(\n    colorSpace: Literal[\"LAB\", \"XYZ\", \"sRGB\"], colorTemp: SupportsFloat = 0\n) -> core.CmsProfile:\n    \"\"\"\n    (pyCMS) Creates a profile.\n    If colorSpace not in ``[\"LAB\", \"XYZ\", \"sRGB\"]``,\n    a :exc:`PyCMSError` is raised.\n    If using LAB and ``colorTemp`` is not a positive integer,\n    a :exc:`PyCMSError` is raised.\n    If an error occurs while creating the profile,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileName",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileName(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the internal product name for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile,\n    a :exc:`PyCMSError` is raised If an error occurs while trying\n    to obtain the name tag, a :exc:`PyCMSError` is raised.\n    Use this function to obtain the INTERNAL name of the profile (stored\n    in an ICC tag in the profile itself), usually the one used when the\n    profile was originally created.  Sometimes this tag also contains\n    additional information supplied by the creator.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileInfo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileInfo(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the internal product information for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile,\n    a :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the info tag,\n    a :exc:`PyCMSError` is raised.\n    Use this function to obtain the information stored in the profile's\n    info tag.  This often contains details about the profile, and how it\n    was created, as supplied by the creator.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileCopyright",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileCopyright(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the copyright for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n    :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the copyright tag,\n    a :exc:`PyCMSError` is raised.\n    Use this function to obtain the information stored in the profile's\n    copyright tag.\n    :param profile: EITHER a valid CmsProfile object, OR a string of the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileManufacturer",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileManufacturer(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the manufacturer for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n    :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the manufacturer tag, a\n    :exc:`PyCMSError` is raised.\n    Use this function to obtain the information stored in the profile's\n    manufacturer tag.\n    :param profile: EITHER a valid CmsProfile object, OR a string of the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileModel",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileModel(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the model for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n    :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the model tag,\n    a :exc:`PyCMSError` is raised.\n    Use this function to obtain the information stored in the profile's\n    model tag.\n    :param profile: EITHER a valid CmsProfile object, OR a string of the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getProfileDescription",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getProfileDescription(profile: _CmsProfileCompatible) -> str:\n    \"\"\"\n    (pyCMS) Gets the description for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n    :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the description tag,\n    a :exc:`PyCMSError` is raised.\n    Use this function to obtain the information stored in the profile's\n    description tag.\n    :param profile: EITHER a valid CmsProfile object, OR a string of the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getDefaultIntent",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def getDefaultIntent(profile: _CmsProfileCompatible) -> int:\n    \"\"\"\n    (pyCMS) Gets the default intent name for the given profile.\n    If ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n    :exc:`PyCMSError` is raised.\n    If an error occurs while trying to obtain the default intent, a\n    :exc:`PyCMSError` is raised.\n    Use this function to determine the default (and usually best optimized)\n    rendering intent for this profile.  Most profiles support multiple\n    rendering intents, but are intended mostly for one type of conversion.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "isIntentSupported",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def isIntentSupported(\n    profile: _CmsProfileCompatible, intent: Intent, direction: Direction\n) -> Literal[-1, 1]:\n    \"\"\"\n    (pyCMS) Checks if a given intent is supported.\n    Use this function to verify that you can use your desired\n    ``intent`` with ``profile``, and that ``profile`` can be used for the\n    input/output/proof profile as you desire.\n    Some profiles are created specifically for one \"direction\", can cannot\n    be used for others. Some profiles can only be used for certain",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "versions",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "def versions() -> tuple[str, str | None, str, str]:\n    \"\"\"\n    (pyCMS) Fetches versions.\n    \"\"\"\n    deprecate(\n        \"PIL.ImageCms.versions()\",\n        12,\n        '(PIL.features.version(\"littlecms2\"), sys.version, PIL.__version__)',\n    )\n    return _VERSION, core.littlecms_version, sys.version.split()[0], __version__",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "_DESCRIPTION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "_DESCRIPTION = \"\"\"\npyCMS\n    a Python / PIL interface to the littleCMS ICC Color Management System\n    Copyright (C) 2002-2003 Kevin Cazabon\n    kevin@cazabon.com\n    https://www.cazabon.com\n    pyCMS home page:  https://www.cazabon.com/pyCMS\n    littleCMS home page:  https://www.littlecms.com\n    (littleCMS is Copyright (C) 1998-2001 Marti Maria)\n    Originally released under LGPL.  Graciously donated to PIL in",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "_VERSION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "_VERSION = \"1.0.0 pil\"\ndef __getattr__(name: str) -> Any:\n    if name == \"DESCRIPTION\":\n        deprecate(\"PIL.ImageCms.DESCRIPTION\", 12)\n        return _DESCRIPTION\n    elif name == \"VERSION\":\n        deprecate(\"PIL.ImageCms.VERSION\", 12)\n        return _VERSION\n    elif name == \"FLAGS\":\n        deprecate(\"PIL.ImageCms.FLAGS\", 12, \"PIL.ImageCms.Flags\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "_MAX_FLAG",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "_MAX_FLAG = reduce(operator.or_, Flags)\n_FLAGS = {\n    \"MATRIXINPUT\": 1,\n    \"MATRIXOUTPUT\": 2,\n    \"MATRIXONLY\": (1 | 2),\n    \"NOWHITEONWHITEFIXUP\": 4,  # Don't hot fix scum dot\n    # Don't create prelinearization tables on precalculated transforms\n    # (internal use):\n    \"NOPRELINEARIZATION\": 16,\n    \"GUESSDEVICECLASS\": 32,  # Guess device class (for transform2devicelink)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "_FLAGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "_FLAGS = {\n    \"MATRIXINPUT\": 1,\n    \"MATRIXOUTPUT\": 2,\n    \"MATRIXONLY\": (1 | 2),\n    \"NOWHITEONWHITEFIXUP\": 4,  # Don't hot fix scum dot\n    # Don't create prelinearization tables on precalculated transforms\n    # (internal use):\n    \"NOPRELINEARIZATION\": 16,\n    \"GUESSDEVICECLASS\": 32,  # Guess device class (for transform2devicelink)\n    \"NOTCACHE\": 64,  # Inhibit 1-pixel cache",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "buildTransformFromOpenProfiles",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "buildTransformFromOpenProfiles = buildTransform\nbuildProofTransformFromOpenProfiles = buildProofTransform\ndef applyTransform(\n    im: Image.Image, transform: ImageCmsTransform, inPlace: bool = False\n) -> Image.Image | None:\n    \"\"\"\n    (pyCMS) Applies a transform to a given image.\n    If ``im.mode != transform.input_mode``, a :exc:`PyCMSError` is raised.\n    If ``inPlace`` is ``True`` and ``transform.input_mode != transform.output_mode``, a\n    :exc:`PyCMSError` is raised.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "buildProofTransformFromOpenProfiles",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "peekOfCode": "buildProofTransformFromOpenProfiles = buildProofTransform\ndef applyTransform(\n    im: Image.Image, transform: ImageCmsTransform, inPlace: bool = False\n) -> Image.Image | None:\n    \"\"\"\n    (pyCMS) Applies a transform to a given image.\n    If ``im.mode != transform.input_mode``, a :exc:`PyCMSError` is raised.\n    If ``inPlace`` is ``True`` and ``transform.input_mode != transform.output_mode``, a\n    :exc:`PyCMSError` is raised.\n    If ``im.mode``, ``transform.input_mode`` or ``transform.output_mode`` is not",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageCms",
        "documentation": {}
    },
    {
        "label": "getrgb",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "peekOfCode": "def getrgb(color: str) -> tuple[int, int, int] | tuple[int, int, int, int]:\n    \"\"\"\n     Convert a color string to an RGB or RGBA tuple. If the string cannot be\n     parsed, this function raises a :py:exc:`ValueError` exception.\n    .. versionadded:: 1.1.4\n    :param color: A color string\n    :return: ``(red, green, blue[, alpha])``\n    \"\"\"\n    if len(color) > 100:\n        msg = \"color specifier is too long\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "documentation": {}
    },
    {
        "label": "getcolor",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "peekOfCode": "def getcolor(color: str, mode: str) -> int | tuple[int, ...]:\n    \"\"\"\n    Same as :py:func:`~PIL.ImageColor.getrgb` for most modes. However, if\n    ``mode`` is HSV, converts the RGB value to a HSV value, or if ``mode`` is\n    not color or a palette image, converts the RGB value to a grayscale value.\n    If the string cannot be parsed, this function raises a :py:exc:`ValueError`\n    exception.\n    .. versionadded:: 1.1.4\n    :param color: A color string\n    :param mode: Convert result to this mode",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageColor",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "class ImageDraw:\n    font: (\n        ImageFont.ImageFont | ImageFont.FreeTypeFont | ImageFont.TransposedFont | None\n    ) = None\n    def __init__(self, im: Image.Image, mode: str | None = None) -> None:\n        \"\"\"\n        Create a drawing instance.\n        :param im: The image to draw in.\n        :param mode: Optional mode to use for color values.  For RGB\n           images, this argument can be RGB or RGBA (to blend the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "Draw",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "def Draw(im: Image.Image, mode: str | None = None) -> ImageDraw:\n    \"\"\"\n    A simple 2D drawing interface for PIL images.\n    :param im: The image to draw in.\n    :param mode: Optional mode to use for color values.  For RGB\n       images, this argument can be RGB or RGBA (to blend the\n       drawing into the image).  For all other modes, this argument\n       must be the same as the image mode.  If omitted, the mode\n       defaults to the mode of the image.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "getdraw",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "def getdraw(\n    im: Image.Image | None = None, hints: list[str] | None = None\n) -> tuple[ImageDraw2.Draw | None, ModuleType]:\n    \"\"\"\n    :param im: The image to draw in.\n    :param hints: An optional list of hints. Deprecated.\n    :returns: A (drawing context, drawing resource factory) tuple.\n    \"\"\"\n    if hints is not None:\n        deprecate(\"'hints' parameter\", 12)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "def floodfill(\n    image: Image.Image,\n    xy: tuple[int, int],\n    value: float | tuple[int, ...],\n    border: float | tuple[int, ...] | None = None,\n    thresh: float = 0,\n) -> None:\n    \"\"\"\n    .. warning:: This method is experimental.\n    Fills a bounded region with a given color.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import ImageDraw2, ImageFont\n_Ink = Union[float, tuple[int, ...], str]\n\"\"\"\nA simple 2D drawing interface for PIL images.\n<p>\nApplication code should use the <b>Draw</b> factory, instead of\ndirectly.\n\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "_Ink",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "peekOfCode": "_Ink = Union[float, tuple[int, ...], str]\n\"\"\"\nA simple 2D drawing interface for PIL images.\n<p>\nApplication code should use the <b>Draw</b> factory, instead of\ndirectly.\n\"\"\"\nclass ImageDraw:\n    font: (\n        ImageFont.ImageFont | ImageFont.FreeTypeFont | ImageFont.TransposedFont | None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw",
        "documentation": {}
    },
    {
        "label": "Pen",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "peekOfCode": "class Pen:\n    \"\"\"Stores an outline color and width.\"\"\"\n    def __init__(self, color: str, width: int = 1, opacity: int = 255) -> None:\n        self.color = ImageColor.getrgb(color)\n        self.width = width\nclass Brush:\n    \"\"\"Stores a fill color\"\"\"\n    def __init__(self, color: str, opacity: int = 255) -> None:\n        self.color = ImageColor.getrgb(color)\nclass Font:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "documentation": {}
    },
    {
        "label": "Brush",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "peekOfCode": "class Brush:\n    \"\"\"Stores a fill color\"\"\"\n    def __init__(self, color: str, opacity: int = 255) -> None:\n        self.color = ImageColor.getrgb(color)\nclass Font:\n    \"\"\"Stores a TrueType font and color\"\"\"\n    def __init__(\n        self, color: str, file: StrOrBytesPath | BinaryIO, size: float = 12\n    ) -> None:\n        # FIXME: add support for bitmap fonts",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "peekOfCode": "class Font:\n    \"\"\"Stores a TrueType font and color\"\"\"\n    def __init__(\n        self, color: str, file: StrOrBytesPath | BinaryIO, size: float = 12\n    ) -> None:\n        # FIXME: add support for bitmap fonts\n        self.color = ImageColor.getrgb(color)\n        self.font = ImageFont.truetype(file, size)\nclass Draw:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "documentation": {}
    },
    {
        "label": "Draw",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "peekOfCode": "class Draw:\n    \"\"\"\n    (Experimental) WCK-style drawing interface\n    \"\"\"\n    def __init__(\n        self,\n        image: Image.Image | str,\n        size: tuple[int, int] | list[int] | None = None,\n        color: float | tuple[float, ...] | str | None = None,\n    ) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageDraw2",
        "documentation": {}
    },
    {
        "label": "_Enhance",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "peekOfCode": "class _Enhance:\n    image: Image.Image\n    degenerate: Image.Image\n    def enhance(self, factor: float) -> Image.Image:\n        \"\"\"\n        Returns an enhanced image.\n        :param factor: A floating point value controlling the enhancement.\n                       Factor 1.0 always returns a copy of the original image,\n                       lower factors mean less color (brightness, contrast,\n                       etc), and higher values more. There are no restrictions",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "peekOfCode": "class Color(_Enhance):\n    \"\"\"Adjust image color balance.\n    This class can be used to adjust the colour balance of an image, in\n    a manner similar to the controls on a colour TV set. An enhancement\n    factor of 0.0 gives a black and white image. A factor of 1.0 gives\n    the original image.\n    \"\"\"\n    def __init__(self, image: Image.Image) -> None:\n        self.image = image\n        self.intermediate_mode = \"L\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "documentation": {}
    },
    {
        "label": "Contrast",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "peekOfCode": "class Contrast(_Enhance):\n    \"\"\"Adjust image contrast.\n    This class can be used to control the contrast of an image, similar\n    to the contrast control on a TV set. An enhancement factor of 0.0\n    gives a solid gray image. A factor of 1.0 gives the original image.\n    \"\"\"\n    def __init__(self, image: Image.Image) -> None:\n        self.image = image\n        if image.mode != \"L\":\n            image = image.convert(\"L\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "documentation": {}
    },
    {
        "label": "Brightness",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "peekOfCode": "class Brightness(_Enhance):\n    \"\"\"Adjust image brightness.\n    This class can be used to control the brightness of an image.  An\n    enhancement factor of 0.0 gives a black image. A factor of 1.0 gives the\n    original image.\n    \"\"\"\n    def __init__(self, image: Image.Image) -> None:\n        self.image = image\n        self.degenerate = Image.new(image.mode, image.size, 0)\n        if \"A\" in image.getbands():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "documentation": {}
    },
    {
        "label": "Sharpness",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "peekOfCode": "class Sharpness(_Enhance):\n    \"\"\"Adjust image sharpness.\n    This class can be used to adjust the sharpness of an image. An\n    enhancement factor of 0.0 gives a blurred image, a factor of 1.0 gives the\n    original image, and a factor of 2.0 gives a sharpened image.\n    \"\"\"\n    def __init__(self, image: Image.Image) -> None:\n        self.image = image\n        self.degenerate = image.filter(ImageFilter.SMOOTH)\n        if \"A\" in image.getbands():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageEnhance",
        "documentation": {}
    },
    {
        "label": "_Tile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class _Tile(NamedTuple):\n    codec_name: str\n    extents: tuple[int, int, int, int] | None\n    offset: int = 0\n    args: tuple[Any, ...] | str | None = None\n#\n# --------------------------------------------------------------------\n# ImageFile base class\nclass ImageFile(Image.Image):\n    \"\"\"Base class for image file format handlers.\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "ImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class ImageFile(Image.Image):\n    \"\"\"Base class for image file format handlers.\"\"\"\n    def __init__(\n        self, fp: StrOrBytesPath | IO[bytes], filename: str | bytes | None = None\n    ) -> None:\n        super().__init__()\n        self._min_frame = 0\n        self.custom_mimetype: str | None = None\n        self.tile: list[_Tile] = []\n        \"\"\" A list of tile descriptors \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "StubHandler",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class StubHandler(abc.ABC):\n    def open(self, im: StubImageFile) -> None:\n        pass\n    @abc.abstractmethod\n    def load(self, im: StubImageFile) -> Image.Image:\n        pass\nclass StubImageFile(ImageFile, metaclass=abc.ABCMeta):\n    \"\"\"\n    Base class for stub image loaders.\n    A stub loader is an image loader that can identify files of a",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "StubImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class StubImageFile(ImageFile, metaclass=abc.ABCMeta):\n    \"\"\"\n    Base class for stub image loaders.\n    A stub loader is an image loader that can identify files of a\n    certain format, but relies on external code to load the file.\n    \"\"\"\n    @abc.abstractmethod\n    def _open(self) -> None:\n        pass\n    def load(self) -> Image.core.PixelAccess | None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "Parser",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class Parser:\n    \"\"\"\n    Incremental image parser.  This class implements the standard\n    feed/close consumer interface.\n    \"\"\"\n    incremental = None\n    image: Image.Image | None = None\n    data: bytes | None = None\n    decoder: Image.core.ImagingDecoder | PyDecoder | None = None\n    offset = 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "PyCodecState",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class PyCodecState:\n    def __init__(self) -> None:\n        self.xsize = 0\n        self.ysize = 0\n        self.xoff = 0\n        self.yoff = 0\n    def extents(self) -> tuple[int, int, int, int]:\n        return self.xoff, self.yoff, self.xoff + self.xsize, self.yoff + self.ysize\nclass PyCodec:\n    fd: IO[bytes] | None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "PyCodec",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class PyCodec:\n    fd: IO[bytes] | None\n    def __init__(self, mode: str, *args: Any) -> None:\n        self.im: Image.core.ImagingCore | None = None\n        self.state = PyCodecState()\n        self.fd = None\n        self.mode = mode\n        self.init(args)\n    def init(self, args: tuple[Any, ...]) -> None:\n        \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "PyDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class PyDecoder(PyCodec):\n    \"\"\"\n    Python implementation of a format decoder. Override this class and\n    add the decoding logic in the :meth:`decode` method.\n    See :ref:`Writing Your Own File Codec in Python<file-codecs-py>`\n    \"\"\"\n    _pulls_fd = False\n    @property\n    def pulls_fd(self) -> bool:\n        return self._pulls_fd",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "PyEncoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "class PyEncoder(PyCodec):\n    \"\"\"\n    Python implementation of a format encoder. Override this class and\n    add the decoding logic in the :meth:`encode` method.\n    See :ref:`Writing Your Own File Codec in Python<file-codecs-py>`\n    \"\"\"\n    _pushes_fd = False\n    @property\n    def pushes_fd(self) -> bool:\n        return self._pushes_fd",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "raise_oserror",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "def raise_oserror(error: int) -> OSError:\n    deprecate(\n        \"raise_oserror\",\n        12,\n        action=\"It is only useful for translating error codes returned by a codec's \"\n        \"decode() method, which ImageFile already does automatically.\",\n    )\n    raise _get_oserror(error, encoder=False)\ndef _tilesort(t: _Tile) -> int:\n    # sort on offset",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from ._typing import StrOrBytesPath\nlogger = logging.getLogger(__name__)\nMAXBLOCK = 65536\nSAFEBLOCK = 1024 * 1024\nLOAD_TRUNCATED_IMAGES = False\n\"\"\"Whether or not to load truncated image files. User code may change this.\"\"\"\nERRORS = {\n    -1: \"image buffer overrun error\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nMAXBLOCK = 65536\nSAFEBLOCK = 1024 * 1024\nLOAD_TRUNCATED_IMAGES = False\n\"\"\"Whether or not to load truncated image files. User code may change this.\"\"\"\nERRORS = {\n    -1: \"image buffer overrun error\",\n    -2: \"decoding error\",\n    -3: \"unknown error\",\n    -8: \"bad configuration\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "MAXBLOCK",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "MAXBLOCK = 65536\nSAFEBLOCK = 1024 * 1024\nLOAD_TRUNCATED_IMAGES = False\n\"\"\"Whether or not to load truncated image files. User code may change this.\"\"\"\nERRORS = {\n    -1: \"image buffer overrun error\",\n    -2: \"decoding error\",\n    -3: \"unknown error\",\n    -8: \"bad configuration\",\n    -9: \"out of memory error\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "SAFEBLOCK",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "SAFEBLOCK = 1024 * 1024\nLOAD_TRUNCATED_IMAGES = False\n\"\"\"Whether or not to load truncated image files. User code may change this.\"\"\"\nERRORS = {\n    -1: \"image buffer overrun error\",\n    -2: \"decoding error\",\n    -3: \"unknown error\",\n    -8: \"bad configuration\",\n    -9: \"out of memory error\",\n}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "LOAD_TRUNCATED_IMAGES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "LOAD_TRUNCATED_IMAGES = False\n\"\"\"Whether or not to load truncated image files. User code may change this.\"\"\"\nERRORS = {\n    -1: \"image buffer overrun error\",\n    -2: \"decoding error\",\n    -3: \"unknown error\",\n    -8: \"bad configuration\",\n    -9: \"out of memory error\",\n}\n\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "peekOfCode": "ERRORS = {\n    -1: \"image buffer overrun error\",\n    -2: \"decoding error\",\n    -3: \"unknown error\",\n    -8: \"bad configuration\",\n    -9: \"out of memory error\",\n}\n\"\"\"\nDict of known error codes returned from :meth:`.PyDecoder.decode`,\n:meth:`.PyEncoder.encode` :meth:`.PyEncoder.encode_to_pyfd` and",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFile",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class Filter(abc.ABC):\n    @abc.abstractmethod\n    def filter(self, image: _imaging.ImagingCore) -> _imaging.ImagingCore:\n        pass\nclass MultibandFilter(Filter):\n    pass\nclass BuiltinFilter(MultibandFilter):\n    filterargs: tuple[Any, ...]\n    def filter(self, image: _imaging.ImagingCore) -> _imaging.ImagingCore:\n        if image.mode == \"P\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "MultibandFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class MultibandFilter(Filter):\n    pass\nclass BuiltinFilter(MultibandFilter):\n    filterargs: tuple[Any, ...]\n    def filter(self, image: _imaging.ImagingCore) -> _imaging.ImagingCore:\n        if image.mode == \"P\":\n            msg = \"cannot filter palette images\"\n            raise ValueError(msg)\n        return image.filter(*self.filterargs)\nclass Kernel(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "BuiltinFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class BuiltinFilter(MultibandFilter):\n    filterargs: tuple[Any, ...]\n    def filter(self, image: _imaging.ImagingCore) -> _imaging.ImagingCore:\n        if image.mode == \"P\":\n            msg = \"cannot filter palette images\"\n            raise ValueError(msg)\n        return image.filter(*self.filterargs)\nclass Kernel(BuiltinFilter):\n    \"\"\"\n    Create a convolution kernel. This only supports 3x3 and 5x5 integer and floating",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "Kernel",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class Kernel(BuiltinFilter):\n    \"\"\"\n    Create a convolution kernel. This only supports 3x3 and 5x5 integer and floating\n    point kernels.\n    Kernels can only be applied to \"L\" and \"RGB\" images.\n    :param size: Kernel size, given as (width, height). This must be (3,3) or (5,5).\n    :param kernel: A sequence containing kernel weights. The kernel will be flipped\n                   vertically before being applied to the image.\n    :param scale: Scale factor. If given, the result for each pixel is divided by this\n                  value. The default is the sum of the kernel weights.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "RankFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class RankFilter(Filter):\n    \"\"\"\n    Create a rank filter.  The rank filter sorts all pixels in\n    a window of the given size, and returns the ``rank``'th value.\n    :param size: The kernel size, in pixels.\n    :param rank: What pixel value to pick.  Use 0 for a min filter,\n                 ``size * size / 2`` for a median filter, ``size * size - 1``\n                 for a max filter, etc.\n    \"\"\"\n    name = \"Rank\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "MedianFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class MedianFilter(RankFilter):\n    \"\"\"\n    Create a median filter. Picks the median pixel value in a window with the\n    given size.\n    :param size: The kernel size, in pixels.\n    \"\"\"\n    name = \"Median\"\n    def __init__(self, size: int = 3) -> None:\n        self.size = size\n        self.rank = size * size // 2",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "MinFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class MinFilter(RankFilter):\n    \"\"\"\n    Create a min filter.  Picks the lowest pixel value in a window with the\n    given size.\n    :param size: The kernel size, in pixels.\n    \"\"\"\n    name = \"Min\"\n    def __init__(self, size: int = 3) -> None:\n        self.size = size\n        self.rank = 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "MaxFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class MaxFilter(RankFilter):\n    \"\"\"\n    Create a max filter.  Picks the largest pixel value in a window with the\n    given size.\n    :param size: The kernel size, in pixels.\n    \"\"\"\n    name = \"Max\"\n    def __init__(self, size: int = 3) -> None:\n        self.size = size\n        self.rank = size * size - 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "ModeFilter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class ModeFilter(Filter):\n    \"\"\"\n    Create a mode filter. Picks the most frequent pixel value in a box with the\n    given size.  Pixel values that occur only once or twice are ignored; if no\n    pixel value occurs more than twice, the original pixel value is preserved.\n    :param size: The kernel size, in pixels.\n    \"\"\"\n    name = \"Mode\"\n    def __init__(self, size: int = 3) -> None:\n        self.size = size",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "GaussianBlur",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class GaussianBlur(MultibandFilter):\n    \"\"\"Blurs the image with a sequence of extended box filters, which\n    approximates a Gaussian kernel. For details on accuracy see\n    <https://www.mia.uni-saarland.de/Publications/gwosdek-ssvm11.pdf>\n    :param radius: Standard deviation of the Gaussian kernel. Either a sequence of two\n                   numbers for x and y, or a single number for both.\n    \"\"\"\n    name = \"GaussianBlur\"\n    def __init__(self, radius: float | Sequence[float] = 2) -> None:\n        self.radius = radius",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "BoxBlur",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class BoxBlur(MultibandFilter):\n    \"\"\"Blurs the image by setting each pixel to the average value of the pixels\n    in a square box extending radius pixels in each direction.\n    Supports float radius of arbitrary size. Uses an optimized implementation\n    which runs in linear time relative to the size of the image\n    for any radius value.\n    :param radius: Size of the box in a direction. Either a sequence of two numbers for\n                   x and y, or a single number for both.\n                   Radius 0 does not blur, returns an identical image.\n                   Radius 1 takes 1 pixel in each direction, i.e. 9 pixels in total.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "UnsharpMask",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class UnsharpMask(MultibandFilter):\n    \"\"\"Unsharp mask filter.\n    See Wikipedia's entry on `digital unsharp masking`_ for an explanation of\n    the parameters.\n    :param radius: Blur Radius\n    :param percent: Unsharp strength, in percent\n    :param threshold: Threshold controls the minimum brightness change that\n      will be sharpened\n    .. _digital unsharp masking: https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "BLUR",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class BLUR(BuiltinFilter):\n    name = \"Blur\"\n    # fmt: off\n    filterargs = (5, 5), 16, 0, (\n        1, 1, 1, 1, 1,\n        1, 0, 0, 0, 1,\n        1, 0, 0, 0, 1,\n        1, 0, 0, 0, 1,\n        1, 1, 1, 1, 1,\n    )",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "CONTOUR",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class CONTOUR(BuiltinFilter):\n    name = \"Contour\"\n    # fmt: off\n    filterargs = (3, 3), 1, 255, (\n        -1, -1, -1,\n        -1,  8, -1,\n        -1, -1, -1,\n    )\n    # fmt: on\nclass DETAIL(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "DETAIL",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class DETAIL(BuiltinFilter):\n    name = \"Detail\"\n    # fmt: off\n    filterargs = (3, 3), 6, 0, (\n        0,  -1,  0,\n        -1, 10, -1,\n        0,  -1,  0,\n    )\n    # fmt: on\nclass EDGE_ENHANCE(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "EDGE_ENHANCE",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class EDGE_ENHANCE(BuiltinFilter):\n    name = \"Edge-enhance\"\n    # fmt: off\n    filterargs = (3, 3), 2, 0, (\n        -1, -1, -1,\n        -1, 10, -1,\n        -1, -1, -1,\n    )\n    # fmt: on\nclass EDGE_ENHANCE_MORE(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "EDGE_ENHANCE_MORE",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class EDGE_ENHANCE_MORE(BuiltinFilter):\n    name = \"Edge-enhance More\"\n    # fmt: off\n    filterargs = (3, 3), 1, 0, (\n        -1, -1, -1,\n        -1,  9, -1,\n        -1, -1, -1,\n    )\n    # fmt: on\nclass EMBOSS(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "EMBOSS",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class EMBOSS(BuiltinFilter):\n    name = \"Emboss\"\n    # fmt: off\n    filterargs = (3, 3), 1, 128, (\n        -1, 0, 0,\n        0,  1, 0,\n        0,  0, 0,\n    )\n    # fmt: on\nclass FIND_EDGES(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "FIND_EDGES",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class FIND_EDGES(BuiltinFilter):\n    name = \"Find Edges\"\n    # fmt: off\n    filterargs = (3, 3), 1, 0, (\n        -1, -1, -1,\n        -1,  8, -1,\n        -1, -1, -1,\n    )\n    # fmt: on\nclass SHARPEN(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "SHARPEN",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class SHARPEN(BuiltinFilter):\n    name = \"Sharpen\"\n    # fmt: off\n    filterargs = (3, 3), 16, 0, (\n        -2, -2, -2,\n        -2, 32, -2,\n        -2, -2, -2,\n    )\n    # fmt: on\nclass SMOOTH(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "SMOOTH",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class SMOOTH(BuiltinFilter):\n    name = \"Smooth\"\n    # fmt: off\n    filterargs = (3, 3), 13, 0, (\n        1, 1, 1,\n        1, 5, 1,\n        1, 1, 1,\n    )\n    # fmt: on\nclass SMOOTH_MORE(BuiltinFilter):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "SMOOTH_MORE",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class SMOOTH_MORE(BuiltinFilter):\n    name = \"Smooth More\"\n    # fmt: off\n    filterargs = (5, 5), 100, 0, (\n        1, 1,  1, 1, 1,\n        1, 5,  5, 5, 1,\n        1, 5, 44, 5, 1,\n        1, 5,  5, 5, 1,\n        1, 1,  1, 1, 1,\n    )",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "Color3DLUT",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "class Color3DLUT(MultibandFilter):\n    \"\"\"Three-dimensional color lookup table.\n    Transforms 3-channel pixels using the values of the channels as coordinates\n    in the 3D lookup table and interpolating the nearest elements.\n    This method allows you to apply almost any color transformation\n    in constant time by using pre-calculated decimated tables.\n    .. versionadded:: 5.2.0\n    :param size: Size of the table. One int or tuple of (int, int, int).\n                 Minimal size in any dimension is 2, maximum is 65.\n    :param table: Flat lookup table. A list of ``channels * size**3``",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import _imaging\n    from ._typing import NumpyArray\nclass Filter(abc.ABC):\n    @abc.abstractmethod\n    def filter(self, image: _imaging.ImagingCore) -> _imaging.ImagingCore:\n        pass\nclass MultibandFilter(Filter):\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFilter",
        "documentation": {}
    },
    {
        "label": "Axis",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "class Axis(TypedDict):\n    minimum: int | None\n    default: int | None\n    maximum: int | None\n    name: bytes | None\nclass Layout(IntEnum):\n    BASIC = 0\n    RAQM = 1\nMAX_STRING_LENGTH = 1_000_000\ncore: ModuleType | DeferredError",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "Layout",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "class Layout(IntEnum):\n    BASIC = 0\n    RAQM = 1\nMAX_STRING_LENGTH = 1_000_000\ncore: ModuleType | DeferredError\ntry:\n    from . import _imagingft as core\nexcept ImportError as ex:\n    core = DeferredError.new(ex)\ndef _string_length_check(text: str | bytes | bytearray) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "class ImageFont:\n    \"\"\"PIL font wrapper\"\"\"\n    font: ImagingFont\n    def _load_pilfont(self, filename: str) -> None:\n        with open(filename, \"rb\") as fp:\n            image: ImageFile.ImageFile | None = None\n            root = os.path.splitext(filename)[0]\n            for ext in (\".png\", \".gif\", \".pbm\"):\n                if image:\n                    image.close()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "FreeTypeFont",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "class FreeTypeFont:\n    \"\"\"FreeType font wrapper (requires _imagingft service)\"\"\"\n    font: Font\n    font_bytes: bytes\n    def __init__(\n        self,\n        font: StrOrBytesPath | BinaryIO,\n        size: float = 10,\n        index: int = 0,\n        encoding: str = \"\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "TransposedFont",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "class TransposedFont:\n    \"\"\"Wrapper for writing rotated or mirrored text\"\"\"\n    def __init__(\n        self, font: ImageFont | FreeTypeFont, orientation: Image.Transpose | None = None\n    ):\n        \"\"\"\n        Wrapper that creates a transposed font from any existing font\n        object.\n        :param font: A font object.\n        :param orientation: An optional orientation.  If given, this should",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "def load(filename: str) -> ImageFont:\n    \"\"\"\n    Load a font file. This function loads a font object from the given\n    bitmap font file, and returns the corresponding font object. For loading TrueType\n    or OpenType fonts instead, see :py:func:`~PIL.ImageFont.truetype`.\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    f = ImageFont()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "truetype",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "def truetype(\n    font: StrOrBytesPath | BinaryIO,\n    size: float = 10,\n    index: int = 0,\n    encoding: str = \"\",\n    layout_engine: Layout | None = None,\n) -> FreeTypeFont:\n    \"\"\"\n    Load a TrueType or OpenType font from a file or file-like object,\n    and create a font object. This function loads a font object from the given",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "load_path",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "def load_path(filename: str | bytes) -> ImageFont:\n    \"\"\"\n    Load font file. Same as :py:func:`~PIL.ImageFont.load`, but searches for a\n    bitmap font along the Python path.\n    :param filename: Name of font file.\n    :return: A font object.\n    :exception OSError: If the file could not be read.\n    \"\"\"\n    if not isinstance(filename, str):\n        filename = filename.decode(\"utf-8\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "load_default_imagefont",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "def load_default_imagefont() -> ImageFont:\n    f = ImageFont()\n    f._load_pilfont_data(\n        # courB08\n        BytesIO(\n            base64.b64decode(\n                b\"\"\"\nUElMZm9udAo7Ozs7OzsxMDsKREFUQQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "load_default",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "def load_default(size: float | None = None) -> FreeTypeFont | ImageFont:\n    \"\"\"If FreeType support is available, load a version of Aileron Regular,\n    https://dotcolon.net/fonts/aileron, with a more limited character set.\n    Otherwise, load a \"better than nothing\" font.\n    .. versionadded:: 1.1.4\n    :param size: The font size of Aileron Regular.\n        .. versionadded:: 10.1.0\n    :return: A font object.\n    \"\"\"\n    if isinstance(core, ModuleType) or size is not None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import ImageFile\n    from ._imaging import ImagingFont\n    from ._imagingft import Font\nclass Axis(TypedDict):\n    minimum: int | None\n    default: int | None\n    maximum: int | None\n    name: bytes | None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "MAX_STRING_LENGTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "peekOfCode": "MAX_STRING_LENGTH = 1_000_000\ncore: ModuleType | DeferredError\ntry:\n    from . import _imagingft as core\nexcept ImportError as ex:\n    core = DeferredError.new(ex)\ndef _string_length_check(text: str | bytes | bytearray) -> None:\n    if MAX_STRING_LENGTH is not None and len(text) > MAX_STRING_LENGTH:\n        msg = \"too many characters in string\"\n        raise ValueError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageFont",
        "documentation": {}
    },
    {
        "label": "grab",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "peekOfCode": "def grab(\n    bbox: tuple[int, int, int, int] | None = None,\n    include_layered_windows: bool = False,\n    all_screens: bool = False,\n    xdisplay: str | None = None,\n    window: int | ImageWin.HWND | None = None,\n) -> Image.Image:\n    im: Image.Image\n    if xdisplay is None:\n        if sys.platform == \"darwin\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "documentation": {}
    },
    {
        "label": "grabclipboard",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "peekOfCode": "def grabclipboard() -> Image.Image | list[str] | None:\n    if sys.platform == \"darwin\":\n        p = subprocess.run(\n            [\"osascript\", \"-e\", \"get the clipboard as «class PNGf»\"],\n            capture_output=True,\n        )\n        if p.returncode != 0:\n            return None\n        import binascii\n        data = io.BytesIO(binascii.unhexlify(p.stdout[11:-3]))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import ImageWin\ndef grab(\n    bbox: tuple[int, int, int, int] | None = None,\n    include_layered_windows: bool = False,\n    all_screens: bool = False,\n    xdisplay: str | None = None,\n    window: int | ImageWin.HWND | None = None,\n) -> Image.Image:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageGrab",
        "documentation": {}
    },
    {
        "label": "_Operand",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "class _Operand:\n    \"\"\"Wraps an image operand, providing standard operators\"\"\"\n    def __init__(self, im: Image.Image):\n        self.im = im\n    def __fixup(self, im1: _Operand | float) -> Image.Image:\n        # convert image to suitable mode\n        if isinstance(im1, _Operand):\n            # argument was an image.\n            if im1.im.mode in (\"1\", \"L\"):\n                return im1.im.convert(\"I\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_int",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_int(self: _Operand) -> _Operand:\n    return _Operand(self.im.convert(\"I\"))\ndef imagemath_float(self: _Operand) -> _Operand:\n    return _Operand(self.im.convert(\"F\"))\n# logical\ndef imagemath_equal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"eq\", self, other, mode=\"I\")\ndef imagemath_notequal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"ne\", self, other, mode=\"I\")\ndef imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_float",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_float(self: _Operand) -> _Operand:\n    return _Operand(self.im.convert(\"F\"))\n# logical\ndef imagemath_equal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"eq\", self, other, mode=\"I\")\ndef imagemath_notequal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"ne\", self, other, mode=\"I\")\ndef imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"min\", self, other)\ndef imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_equal",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_equal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"eq\", self, other, mode=\"I\")\ndef imagemath_notequal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"ne\", self, other, mode=\"I\")\ndef imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"min\", self, other)\ndef imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"max\", self, other)\ndef imagemath_convert(self: _Operand, mode: str) -> _Operand:\n    return _Operand(self.im.convert(mode))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_notequal",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_notequal(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"ne\", self, other, mode=\"I\")\ndef imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"min\", self, other)\ndef imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"max\", self, other)\ndef imagemath_convert(self: _Operand, mode: str) -> _Operand:\n    return _Operand(self.im.convert(mode))\nops = {\n    \"int\": imagemath_int,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_min",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_min(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"min\", self, other)\ndef imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"max\", self, other)\ndef imagemath_convert(self: _Operand, mode: str) -> _Operand:\n    return _Operand(self.im.convert(mode))\nops = {\n    \"int\": imagemath_int,\n    \"float\": imagemath_float,\n    \"equal\": imagemath_equal,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_max",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_max(self: _Operand, other: _Operand | float | None) -> _Operand:\n    return self.apply(\"max\", self, other)\ndef imagemath_convert(self: _Operand, mode: str) -> _Operand:\n    return _Operand(self.im.convert(mode))\nops = {\n    \"int\": imagemath_int,\n    \"float\": imagemath_float,\n    \"equal\": imagemath_equal,\n    \"notequal\": imagemath_notequal,\n    \"min\": imagemath_min,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "imagemath_convert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def imagemath_convert(self: _Operand, mode: str) -> _Operand:\n    return _Operand(self.im.convert(mode))\nops = {\n    \"int\": imagemath_int,\n    \"float\": imagemath_float,\n    \"equal\": imagemath_equal,\n    \"notequal\": imagemath_notequal,\n    \"min\": imagemath_min,\n    \"max\": imagemath_max,\n    \"convert\": imagemath_convert,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "lambda_eval",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def lambda_eval(\n    expression: Callable[[dict[str, Any]], Any],\n    options: dict[str, Any] = {},\n    **kw: Any,\n) -> Any:\n    \"\"\"\n    Returns the result of an image function.\n    :py:mod:`~PIL.ImageMath` only supports single-layer images. To process multi-band\n    images, use the :py:meth:`~PIL.Image.Image.split` method or\n    :py:func:`~PIL.Image.merge` function.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "unsafe_eval",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def unsafe_eval(\n    expression: str,\n    options: dict[str, Any] = {},\n    **kw: Any,\n) -> Any:\n    \"\"\"\n    Evaluates an image expression. This uses Python's ``eval()`` function to process\n    the expression string, and carries the security risks of doing so. It is not\n    recommended to process expressions without considering this.\n    :py:meth:`~lambda_eval` is a more secure alternative.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "eval",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "def eval(\n    expression: str,\n    _dict: dict[str, Any] = {},\n    **kw: Any,\n) -> Any:\n    \"\"\"\n    Evaluates an image expression.\n    Deprecated. Use lambda_eval() or unsafe_eval() instead.\n    :param expression: A string containing a Python-style expression.\n    :param _dict: Values to add to the evaluation context.  You",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "ops",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "peekOfCode": "ops = {\n    \"int\": imagemath_int,\n    \"float\": imagemath_float,\n    \"equal\": imagemath_equal,\n    \"notequal\": imagemath_notequal,\n    \"min\": imagemath_min,\n    \"max\": imagemath_max,\n    \"convert\": imagemath_convert,\n}\ndef lambda_eval(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMath",
        "documentation": {}
    },
    {
        "label": "ModeDescriptor",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "peekOfCode": "class ModeDescriptor(NamedTuple):\n    \"\"\"Wrapper for mode strings.\"\"\"\n    mode: str\n    bands: tuple[str, ...]\n    basemode: str\n    basetype: str\n    typestr: str\n    def __str__(self) -> str:\n        return self.mode\n@lru_cache",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "documentation": {}
    },
    {
        "label": "getmode",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "peekOfCode": "def getmode(mode: str) -> ModeDescriptor:\n    \"\"\"Gets a mode descriptor for the given mode.\"\"\"\n    endian = \"<\" if sys.byteorder == \"little\" else \">\"\n    modes = {\n        # core modes\n        # Bits need to be extended to bytes\n        \"1\": (\"L\", \"L\", (\"1\",), \"|b1\"),\n        \"L\": (\"L\", \"L\", (\"L\",), \"|u1\"),\n        \"I\": (\"L\", \"I\", (\"I\",), f\"{endian}i4\"),\n        \"F\": (\"L\", \"F\", (\"F\",), f\"{endian}f4\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMode",
        "documentation": {}
    },
    {
        "label": "LutBuilder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "peekOfCode": "class LutBuilder:\n    \"\"\"A class for building a MorphLut from a descriptive language\n    The input patterns is a list of a strings sequences like these::\n        4:(...\n           .1.\n           111)->1\n    (whitespaces including linebreaks are ignored). The option 4\n    describes a series of symmetry operations (in this case a\n    4-rotation), the pattern is described by:\n    - . or X - Ignore",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "documentation": {}
    },
    {
        "label": "MorphOp",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "peekOfCode": "class MorphOp:\n    \"\"\"A class for binary morphological operators\"\"\"\n    def __init__(\n        self,\n        lut: bytearray | None = None,\n        op_name: str | None = None,\n        patterns: list[str] | None = None,\n    ) -> None:\n        \"\"\"Create a binary morphological operator\"\"\"\n        self.lut = lut",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "documentation": {}
    },
    {
        "label": "LUT_SIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "peekOfCode": "LUT_SIZE = 1 << 9\n# fmt: off\nROTATION_MATRIX = [\n    6, 3, 0,\n    7, 4, 1,\n    8, 5, 2,\n]\nMIRROR_MATRIX = [\n    2, 1, 0,\n    5, 4, 3,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "documentation": {}
    },
    {
        "label": "ROTATION_MATRIX",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "peekOfCode": "ROTATION_MATRIX = [\n    6, 3, 0,\n    7, 4, 1,\n    8, 5, 2,\n]\nMIRROR_MATRIX = [\n    2, 1, 0,\n    5, 4, 3,\n    8, 7, 6,\n]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "documentation": {}
    },
    {
        "label": "MIRROR_MATRIX",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "peekOfCode": "MIRROR_MATRIX = [\n    2, 1, 0,\n    5, 4, 3,\n    8, 7, 6,\n]\n# fmt: on\nclass LutBuilder:\n    \"\"\"A class for building a MorphLut from a descriptive language\n    The input patterns is a list of a strings sequences like these::\n        4:(...",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageMorph",
        "documentation": {}
    },
    {
        "label": "SupportsGetMesh",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "class SupportsGetMesh(Protocol):\n    \"\"\"\n    An object that supports the ``getmesh`` method, taking an image as an\n    argument, and returning a list of tuples. Each tuple contains two tuples,\n    the source box as a tuple of 4 integers, and a tuple of 8 integers for the\n    final quadrilateral, in order of top left, bottom left, bottom right, top\n    right.\n    \"\"\"\n    def getmesh(\n        self, image: Image.Image",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "autocontrast",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def autocontrast(\n    image: Image.Image,\n    cutoff: float | tuple[float, float] = 0,\n    ignore: int | Sequence[int] | None = None,\n    mask: Image.Image | None = None,\n    preserve_tone: bool = False,\n) -> Image.Image:\n    \"\"\"\n    Maximize (normalize) image contrast. This function calculates a\n    histogram of the input image (or mask region), removes ``cutoff`` percent of the",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "colorize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def colorize(\n    image: Image.Image,\n    black: str | tuple[int, ...],\n    white: str | tuple[int, ...],\n    mid: str | int | tuple[int, ...] | None = None,\n    blackpoint: int = 0,\n    whitepoint: int = 255,\n    midpoint: int = 127,\n) -> Image.Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "contain",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def contain(\n    image: Image.Image, size: tuple[int, int], method: int = Image.Resampling.BICUBIC\n) -> Image.Image:\n    \"\"\"\n    Returns a resized version of the image, set to the maximum width and height\n    within the requested size, while maintaining the original aspect ratio.\n    :param image: The image to resize.\n    :param size: The requested output size in pixels, given as a\n                 (width, height) tuple.\n    :param method: Resampling method to use. Default is",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "cover",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def cover(\n    image: Image.Image, size: tuple[int, int], method: int = Image.Resampling.BICUBIC\n) -> Image.Image:\n    \"\"\"\n    Returns a resized version of the image, so that the requested size is\n    covered, while maintaining the original aspect ratio.\n    :param image: The image to resize.\n    :param size: The requested output size in pixels, given as a\n                 (width, height) tuple.\n    :param method: Resampling method to use. Default is",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "pad",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def pad(\n    image: Image.Image,\n    size: tuple[int, int],\n    method: int = Image.Resampling.BICUBIC,\n    color: str | int | tuple[int, ...] | None = None,\n    centering: tuple[float, float] = (0.5, 0.5),\n) -> Image.Image:\n    \"\"\"\n    Returns a resized and padded version of the image, expanded to fill the\n    requested aspect ratio and size.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "crop",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def crop(image: Image.Image, border: int = 0) -> Image.Image:\n    \"\"\"\n    Remove border from image.  The same amount of pixels are removed\n    from all four sides.  This function works on all image modes.\n    .. seealso:: :py:meth:`~PIL.Image.Image.crop`\n    :param image: The image to crop.\n    :param border: The number of pixels to remove.\n    :return: An image.\n    \"\"\"\n    left, top, right, bottom = _border(border)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "scale",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def scale(\n    image: Image.Image, factor: float, resample: int = Image.Resampling.BICUBIC\n) -> Image.Image:\n    \"\"\"\n    Returns a rescaled image by a specific factor given in parameter.\n    A factor greater than 1 expands the image, between 0 and 1 contracts the\n    image.\n    :param image: The image to rescale.\n    :param factor: The expansion factor, as a float.\n    :param resample: Resampling method to use. Default is",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "deform",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def deform(\n    image: Image.Image,\n    deformer: SupportsGetMesh,\n    resample: int = Image.Resampling.BILINEAR,\n) -> Image.Image:\n    \"\"\"\n    Deform the image.\n    :param image: The image to deform.\n    :param deformer: A deformer object.  Any object that implements a\n                    ``getmesh`` method can be used.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "equalize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def equalize(image: Image.Image, mask: Image.Image | None = None) -> Image.Image:\n    \"\"\"\n    Equalize the image histogram. This function applies a non-linear\n    mapping to the input image, in order to create a uniform\n    distribution of grayscale values in the output image.\n    :param image: The image to equalize.\n    :param mask: An optional mask.  If given, only the pixels selected by\n                 the mask are included in the analysis.\n    :return: An image.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "expand",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def expand(\n    image: Image.Image,\n    border: int | tuple[int, ...] = 0,\n    fill: str | int | tuple[int, ...] = 0,\n) -> Image.Image:\n    \"\"\"\n    Add border to the image\n    :param image: The image to expand.\n    :param border: Border width, in pixels.\n    :param fill: Pixel fill value (a color value).  Default is 0 (black).",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "fit",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def fit(\n    image: Image.Image,\n    size: tuple[int, int],\n    method: int = Image.Resampling.BICUBIC,\n    bleed: float = 0.0,\n    centering: tuple[float, float] = (0.5, 0.5),\n) -> Image.Image:\n    \"\"\"\n    Returns a resized and cropped version of the image, cropped to the\n    requested aspect ratio and size.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "flip",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def flip(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Flip the image vertically (top to bottom).\n    :param image: The image to flip.\n    :return: An image.\n    \"\"\"\n    return image.transpose(Image.Transpose.FLIP_TOP_BOTTOM)\ndef grayscale(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Convert the image to grayscale.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "grayscale",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def grayscale(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Convert the image to grayscale.\n    :param image: The image to convert.\n    :return: An image.\n    \"\"\"\n    return image.convert(\"L\")\ndef invert(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Invert (negate) the image.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "invert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def invert(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Invert (negate) the image.\n    :param image: The image to invert.\n    :return: An image.\n    \"\"\"\n    lut = list(range(255, -1, -1))\n    return image.point(lut) if image.mode == \"1\" else _lut(image, lut)\ndef mirror(image: Image.Image) -> Image.Image:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "mirror",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def mirror(image: Image.Image) -> Image.Image:\n    \"\"\"\n    Flip image horizontally (left to right).\n    :param image: The image to mirror.\n    :return: An image.\n    \"\"\"\n    return image.transpose(Image.Transpose.FLIP_LEFT_RIGHT)\ndef posterize(image: Image.Image, bits: int) -> Image.Image:\n    \"\"\"\n    Reduce the number of bits for each color channel.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "posterize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def posterize(image: Image.Image, bits: int) -> Image.Image:\n    \"\"\"\n    Reduce the number of bits for each color channel.\n    :param image: The image to posterize.\n    :param bits: The number of bits to keep for each channel (1-8).\n    :return: An image.\n    \"\"\"\n    mask = ~(2 ** (8 - bits) - 1)\n    lut = [i & mask for i in range(256)]\n    return _lut(image, lut)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "solarize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def solarize(image: Image.Image, threshold: int = 128) -> Image.Image:\n    \"\"\"\n    Invert all pixel values above a threshold.\n    :param image: The image to solarize.\n    :param threshold: All pixels above this grayscale level are inverted.\n    :return: An image.\n    \"\"\"\n    lut = []\n    for i in range(256):\n        if i < threshold:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "exif_transpose",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def exif_transpose(image: Image.Image, *, in_place: Literal[True]) -> None: ...\n@overload\ndef exif_transpose(\n    image: Image.Image, *, in_place: Literal[False] = False\n) -> Image.Image: ...\ndef exif_transpose(image: Image.Image, *, in_place: bool = False) -> Image.Image | None:\n    \"\"\"\n    If an image has an EXIF Orientation tag, other than 1, transpose the image\n    accordingly, and remove the orientation data.\n    :param image: The image to transpose.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "exif_transpose",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def exif_transpose(\n    image: Image.Image, *, in_place: Literal[False] = False\n) -> Image.Image: ...\ndef exif_transpose(image: Image.Image, *, in_place: bool = False) -> Image.Image | None:\n    \"\"\"\n    If an image has an EXIF Orientation tag, other than 1, transpose the image\n    accordingly, and remove the orientation data.\n    :param image: The image to transpose.\n    :param in_place: Boolean. Keyword-only argument.\n        If ``True``, the original image is modified in-place, and ``None`` is returned.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "exif_transpose",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "peekOfCode": "def exif_transpose(image: Image.Image, *, in_place: bool = False) -> Image.Image | None:\n    \"\"\"\n    If an image has an EXIF Orientation tag, other than 1, transpose the image\n    accordingly, and remove the orientation data.\n    :param image: The image to transpose.\n    :param in_place: Boolean. Keyword-only argument.\n        If ``True``, the original image is modified in-place, and ``None`` is returned.\n        If ``False`` (default), a new :py:class:`~PIL.Image.Image` object is returned\n        with the transposition applied. If there is no transposition, a copy of the\n        image will be returned.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageOps",
        "documentation": {}
    },
    {
        "label": "ImagePalette",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "class ImagePalette:\n    \"\"\"\n    Color palette for palette mapped images\n    :param mode: The mode to use for the palette. See:\n        :ref:`concept-modes`. Defaults to \"RGB\"\n    :param palette: An optional palette. If given, it must be a bytearray,\n        an array or a list of ints between 0-255. The list must consist of\n        all channels for one color followed by the next color (e.g. RGBRGBRGB).\n        Defaults to an empty palette.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "raw",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def raw(rawmode: str, data: Sequence[int] | bytes | bytearray) -> ImagePalette:\n    palette = ImagePalette()\n    palette.rawmode = rawmode\n    palette.palette = data\n    palette.dirty = 1\n    return palette\n# --------------------------------------------------------------------\n# Factories\ndef make_linear_lut(black: int, white: float) -> list[int]:\n    if black == 0:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "make_linear_lut",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def make_linear_lut(black: int, white: float) -> list[int]:\n    if black == 0:\n        return [int(white * i // 255) for i in range(256)]\n    msg = \"unavailable when black is non-zero\"\n    raise NotImplementedError(msg)  # FIXME\ndef make_gamma_lut(exp: float) -> list[int]:\n    return [int(((i / 255.0) ** exp) * 255.0 + 0.5) for i in range(256)]\ndef negative(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    palette.reverse()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "make_gamma_lut",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def make_gamma_lut(exp: float) -> list[int]:\n    return [int(((i / 255.0) ** exp) * 255.0 + 0.5) for i in range(256)]\ndef negative(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    palette.reverse()\n    return ImagePalette(mode, [i // len(mode) for i in palette])\ndef random(mode: str = \"RGB\") -> ImagePalette:\n    from random import randint\n    palette = [randint(0, 255) for _ in range(256 * len(mode))]\n    return ImagePalette(mode, palette)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "negative",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def negative(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    palette.reverse()\n    return ImagePalette(mode, [i // len(mode) for i in palette])\ndef random(mode: str = \"RGB\") -> ImagePalette:\n    from random import randint\n    palette = [randint(0, 255) for _ in range(256 * len(mode))]\n    return ImagePalette(mode, palette)\ndef sepia(white: str = \"#fff0c0\") -> ImagePalette:\n    bands = [make_linear_lut(0, band) for band in ImageColor.getrgb(white)]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def random(mode: str = \"RGB\") -> ImagePalette:\n    from random import randint\n    palette = [randint(0, 255) for _ in range(256 * len(mode))]\n    return ImagePalette(mode, palette)\ndef sepia(white: str = \"#fff0c0\") -> ImagePalette:\n    bands = [make_linear_lut(0, band) for band in ImageColor.getrgb(white)]\n    return ImagePalette(\"RGB\", [bands[i % 3][i // 3] for i in range(256 * 3)])\ndef wedge(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    return ImagePalette(mode, [i // len(mode) for i in palette])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "sepia",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def sepia(white: str = \"#fff0c0\") -> ImagePalette:\n    bands = [make_linear_lut(0, band) for band in ImageColor.getrgb(white)]\n    return ImagePalette(\"RGB\", [bands[i % 3][i // 3] for i in range(256 * 3)])\ndef wedge(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    return ImagePalette(mode, [i // len(mode) for i in palette])\ndef load(filename: str) -> tuple[bytes, str]:\n    # FIXME: supports GIMP gradients only\n    with open(filename, \"rb\") as fp:\n        paletteHandlers: list[",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "wedge",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def wedge(mode: str = \"RGB\") -> ImagePalette:\n    palette = list(range(256 * len(mode)))\n    return ImagePalette(mode, [i // len(mode) for i in palette])\ndef load(filename: str) -> tuple[bytes, str]:\n    # FIXME: supports GIMP gradients only\n    with open(filename, \"rb\") as fp:\n        paletteHandlers: list[\n            type[\n                GimpPaletteFile.GimpPaletteFile\n                | GimpGradientFile.GimpGradientFile",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "def load(filename: str) -> tuple[bytes, str]:\n    # FIXME: supports GIMP gradients only\n    with open(filename, \"rb\") as fp:\n        paletteHandlers: list[\n            type[\n                GimpPaletteFile.GimpPaletteFile\n                | GimpGradientFile.GimpGradientFile\n                | PaletteFile.PaletteFile\n            ]\n        ] = [",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import Image\nclass ImagePalette:\n    \"\"\"\n    Color palette for palette mapped images\n    :param mode: The mode to use for the palette. See:\n        :ref:`concept-modes`. Defaults to \"RGB\"\n    :param palette: An optional palette. If given, it must be a bytearray,\n        an array or a list of ints between 0-255. The list must consist of",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePalette",
        "documentation": {}
    },
    {
        "label": "Path",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePath",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePath",
        "peekOfCode": "Path = Image.core.path",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImagePath",
        "documentation": {}
    },
    {
        "label": "rgb",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def rgb(r: int, g: int, b: int, a: int = 255) -> int:\n    \"\"\"(Internal) Turns an RGB color into a Qt compatible color integer.\"\"\"\n    # use qRgb to pack the colors, and then turn the resulting long\n    # into a negative integer with the same bitpattern.\n    return qRgba(r, g, b, a) & 0xFFFFFFFF\ndef fromqimage(im: QImage | QPixmap) -> ImageFile.ImageFile:\n    \"\"\"\n    :param im: QImage or PIL ImageQt object\n    \"\"\"\n    buffer = QBuffer()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "fromqimage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def fromqimage(im: QImage | QPixmap) -> ImageFile.ImageFile:\n    \"\"\"\n    :param im: QImage or PIL ImageQt object\n    \"\"\"\n    buffer = QBuffer()\n    qt_openmode: object\n    if qt_version == \"6\":\n        try:\n            qt_openmode = getattr(QIODevice, \"OpenModeFlag\")\n        except AttributeError:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "fromqpixmap",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def fromqpixmap(im: QPixmap) -> ImageFile.ImageFile:\n    return fromqimage(im)\ndef align8to32(bytes: bytes, width: int, mode: str) -> bytes:\n    \"\"\"\n    converts each scanline of data from 8 bit to 32 bit aligned\n    \"\"\"\n    bits_per_pixel = {\"1\": 1, \"L\": 8, \"P\": 8, \"I;16\": 16}[mode]\n    # calculate bytes per line and the extra padding if needed\n    bits_per_line = bits_per_pixel * width\n    full_bytes_per_line, remaining_bits_per_line = divmod(bits_per_line, 8)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "align8to32",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def align8to32(bytes: bytes, width: int, mode: str) -> bytes:\n    \"\"\"\n    converts each scanline of data from 8 bit to 32 bit aligned\n    \"\"\"\n    bits_per_pixel = {\"1\": 1, \"L\": 8, \"P\": 8, \"I;16\": 16}[mode]\n    # calculate bytes per line and the extra padding if needed\n    bits_per_line = bits_per_pixel * width\n    full_bytes_per_line, remaining_bits_per_line = divmod(bits_per_line, 8)\n    bytes_per_line = full_bytes_per_line + (1 if remaining_bits_per_line else 0)\n    extra_padding = -bytes_per_line % 4",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "toqimage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def toqimage(im: Image.Image | str | QByteArray) -> ImageQt:\n    return ImageQt(im)\ndef toqpixmap(im: Image.Image | str | QByteArray) -> QPixmap:\n    qimage = toqimage(im)\n    pixmap = getattr(QPixmap, \"fromImage\")(qimage)\n    if qt_version == \"6\":\n        pixmap.detach()\n    return pixmap",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "toqpixmap",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "def toqpixmap(im: Image.Image | str | QByteArray) -> QPixmap:\n    qimage = toqimage(im)\n    pixmap = getattr(QPixmap, \"fromImage\")(qimage)\n    if qt_version == \"6\":\n        pixmap.detach()\n    return pixmap",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    import PyQt6\n    import PySide6\n    from . import ImageFile\n    QBuffer: type\n    QByteArray = Union[PyQt6.QtCore.QByteArray, PySide6.QtCore.QByteArray]\n    QIODevice = Union[PyQt6.QtCore.QIODevice, PySide6.QtCore.QIODevice]\n    QImage = Union[PyQt6.QtGui.QImage, PySide6.QtGui.QImage]\n    QPixmap = Union[PyQt6.QtGui.QPixmap, PySide6.QtGui.QPixmap]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "qt_versions",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "peekOfCode": "qt_versions = [\n    [\"6\", \"PyQt6\"],\n    [\"side6\", \"PySide6\"],\n]\n# If a version has already been imported, attempt it first\nqt_versions.sort(key=lambda version: version[1] in sys.modules, reverse=True)\nfor version, qt_module in qt_versions:\n    try:\n        qRgba: Callable[[int, int, int, int], int]\n        if qt_module == \"PyQt6\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageQt",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "peekOfCode": "class Iterator:\n    \"\"\"\n    This class implements an iterator object that can be used to loop\n    over an image sequence.\n    You can use the ``[]`` operator to access elements by index. This operator\n    will raise an :py:exc:`IndexError` if you try to access a nonexistent\n    frame.\n    :param im: An image object.\n    \"\"\"\n    def __init__(self, im: Image.Image) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "documentation": {}
    },
    {
        "label": "all_frames",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "peekOfCode": "def all_frames(\n    im: Image.Image | list[Image.Image],\n    func: Callable[[Image.Image], Image.Image] | None = None,\n) -> list[Image.Image]:\n    \"\"\"\n    Applies a given function to all frames in an image or a list of images.\n    The frames are returned as a list of separate images.\n    :param im: An image, or a list of images.\n    :param func: The function to apply to all of the image frames.\n    :returns: A list of images.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageSequence",
        "documentation": {}
    },
    {
        "label": "Viewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class Viewer:\n    \"\"\"Base class for viewers.\"\"\"\n    # main api\n    def show(self, image: Image.Image, **options: Any) -> int:\n        \"\"\"\n        The main function for displaying an image.\n        Converts the given image to the target format and displays it.\n        \"\"\"\n        if not (\n            image.mode in (\"1\", \"RGBA\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "WindowsViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class WindowsViewer(Viewer):\n    \"\"\"The default viewer on Windows is the default system application for PNG files.\"\"\"\n    format = \"PNG\"\n    options = {\"compress_level\": 1, \"save_all\": True}\n    def get_command(self, file: str, **options: Any) -> str:\n        return (\n            f'start \"Pillow\" /WAIT \"{file}\" '\n            \"&& ping -n 4 127.0.0.1 >NUL \"\n            f'&& del /f \"{file}\"'\n        )",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "MacViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class MacViewer(Viewer):\n    \"\"\"The default viewer on macOS using ``Preview.app``.\"\"\"\n    format = \"PNG\"\n    options = {\"compress_level\": 1, \"save_all\": True}\n    def get_command(self, file: str, **options: Any) -> str:\n        # on darwin open returns immediately resulting in the temp\n        # file removal while app is opening\n        command = \"open -a Preview.app\"\n        command = f\"({command} {quote(file)}; sleep 20; rm -f {quote(file)})&\"\n        return command",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "UnixViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class UnixViewer(abc.ABC, Viewer):\n    format = \"PNG\"\n    options = {\"compress_level\": 1, \"save_all\": True}\n    @abc.abstractmethod\n    def get_command_ex(self, file: str, **options: Any) -> tuple[str, str]:\n        pass\n    def get_command(self, file: str, **options: Any) -> str:\n        command = self.get_command_ex(file, **options)[0]\n        return f\"{command} {quote(file)}\"\nclass XDGViewer(UnixViewer):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "XDGViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class XDGViewer(UnixViewer):\n    \"\"\"\n    The freedesktop.org ``xdg-open`` command.\n    \"\"\"\n    def get_command_ex(self, file: str, **options: Any) -> tuple[str, str]:\n        command = executable = \"xdg-open\"\n        return command, executable\n    def show_file(self, path: str, **options: Any) -> int:\n        \"\"\"\n        Display given file.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "DisplayViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class DisplayViewer(UnixViewer):\n    \"\"\"\n    The ImageMagick ``display`` command.\n    This viewer supports the ``title`` parameter.\n    \"\"\"\n    def get_command_ex(\n        self, file: str, title: str | None = None, **options: Any\n    ) -> tuple[str, str]:\n        command = executable = \"display\"\n        if title:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "GmDisplayViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class GmDisplayViewer(UnixViewer):\n    \"\"\"The GraphicsMagick ``gm display`` command.\"\"\"\n    def get_command_ex(self, file: str, **options: Any) -> tuple[str, str]:\n        executable = \"gm\"\n        command = \"gm display\"\n        return command, executable\n    def show_file(self, path: str, **options: Any) -> int:\n        \"\"\"\n        Display given file.\n        \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "EogViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class EogViewer(UnixViewer):\n    \"\"\"The GNOME Image Viewer ``eog`` command.\"\"\"\n    def get_command_ex(self, file: str, **options: Any) -> tuple[str, str]:\n        executable = \"eog\"\n        command = \"eog -n\"\n        return command, executable\n    def show_file(self, path: str, **options: Any) -> int:\n        \"\"\"\n        Display given file.\n        \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "XVViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class XVViewer(UnixViewer):\n    \"\"\"\n    The X Viewer ``xv`` command.\n    This viewer supports the ``title`` parameter.\n    \"\"\"\n    def get_command_ex(\n        self, file: str, title: str | None = None, **options: Any\n    ) -> tuple[str, str]:\n        # note: xv is pretty outdated.  most modern systems have\n        # imagemagick's display command instead.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "IPythonViewer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "class IPythonViewer(Viewer):\n    \"\"\"The viewer for IPython frontends.\"\"\"\n    def show_image(self, image: Image.Image, **options: Any) -> int:\n        ipython_display(image)\n        return 1\ntry:\n    from IPython.display import display as ipython_display\nexcept ImportError:\n    pass\nelse:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "def register(viewer: type[Viewer] | Viewer, order: int = 1) -> None:\n    \"\"\"\n    The :py:func:`register` function is used to register additional viewers::\n        from PIL import ImageShow\n        ImageShow.register(MyViewer())  # MyViewer will be used as a last resort\n        ImageShow.register(MySecondViewer(), 0)  # MySecondViewer will be prioritised\n        ImageShow.register(ImageShow.XVViewer(), 0)  # XVViewer will be prioritised\n    :param viewer: The viewer to be registered.\n    :param order:\n        Zero or a negative integer to prepend this viewer to the list,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "def show(image: Image.Image, title: str | None = None, **options: Any) -> bool:\n    r\"\"\"\n    Display a given image.\n    :param image: An image object.\n    :param title: Optional title. Not all viewers can display the title.\n    :param \\**options: Additional viewer options.\n    :returns: ``True`` if a suitable viewer was found, ``False`` otherwise.\n    \"\"\"\n    for viewer in _viewers:\n        if viewer.show(image, title=title, **options):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "_viewers",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "peekOfCode": "_viewers = []\ndef register(viewer: type[Viewer] | Viewer, order: int = 1) -> None:\n    \"\"\"\n    The :py:func:`register` function is used to register additional viewers::\n        from PIL import ImageShow\n        ImageShow.register(MyViewer())  # MyViewer will be used as a last resort\n        ImageShow.register(MySecondViewer(), 0)  # MySecondViewer will be prioritised\n        ImageShow.register(ImageShow.XVViewer(), 0)  # XVViewer will be prioritised\n    :param viewer: The viewer to be registered.\n    :param order:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageShow",
        "documentation": {}
    },
    {
        "label": "Stat",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "peekOfCode": "class Stat:\n    def __init__(\n        self, image_or_list: Image.Image | list[int], mask: Image.Image | None = None\n    ) -> None:\n        \"\"\"\n        Calculate statistics for the given image. If a mask is included,\n        only the regions covered by that mask are included in the\n        statistics. You can also pass in a previously calculated histogram.\n        :param image: A PIL image, or a precalculated histogram.\n            .. note::",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "documentation": {}
    },
    {
        "label": "Global",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "peekOfCode": "Global = Stat  # compatibility",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageStat",
        "documentation": {}
    },
    {
        "label": "PhotoImage",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "peekOfCode": "class PhotoImage:\n    \"\"\"\n    A Tkinter-compatible photo image.  This can be used\n    everywhere Tkinter expects an image object.  If the image is an RGBA\n    image, pixels having alpha 0 are treated as transparent.\n    The constructor takes either a PIL image, or a mode and a size.\n    Alternatively, you can use the ``file`` or ``data`` options to initialize\n    the photo image object.\n    :param image: Either a PIL image, or a mode string.  If a mode string is\n                  used, a size must also be given.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "documentation": {}
    },
    {
        "label": "BitmapImage",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "peekOfCode": "class BitmapImage:\n    \"\"\"\n    A Tkinter-compatible bitmap image.  This can be used everywhere Tkinter\n    expects an image object.\n    The given image must have mode \"1\".  Pixels having value 0 are treated as\n    transparent.  Options, if any, are passed on to Tkinter.  The most commonly\n    used option is ``foreground``, which is used to specify the color for the\n    non-transparent parts.  See the Tkinter documentation for information on\n    how to specify colours.\n    :param image: A PIL image.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "documentation": {}
    },
    {
        "label": "getimage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "peekOfCode": "def getimage(photo: PhotoImage) -> Image.Image:\n    \"\"\"Copies the contents of a PhotoImage to a PIL image memory.\"\"\"\n    im = Image.new(\"RGBA\", (photo.width(), photo.height()))\n    _pyimagingtkcall(\"PyImagingPhotoGet\", photo, im.getim())\n    return im",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from ._typing import CapsuleType\n# --------------------------------------------------------------------\n# Check for Tkinter interface hooks\ndef _get_image_from_kw(kw: dict[str, Any]) -> ImageFile.ImageFile | None:\n    source = None\n    if \"file\" in kw:\n        source = kw.pop(\"file\")\n    elif \"data\" in kw:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTk",
        "documentation": {}
    },
    {
        "label": "Transform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class Transform(Image.ImageTransformHandler):\n    \"\"\"Base class for other transforms defined in :py:mod:`~PIL.ImageTransform`.\"\"\"\n    method: Image.Transform\n    def __init__(self, data: Sequence[Any]) -> None:\n        self.data = data\n    def getdata(self) -> tuple[Image.Transform, Sequence[int]]:\n        return self.method, self.data\n    def transform(\n        self,\n        size: tuple[int, int],",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "AffineTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class AffineTransform(Transform):\n    \"\"\"\n    Define an affine image transform.\n    This function takes a 6-tuple (a, b, c, d, e, f) which contain the first\n    two rows from the inverse of an affine transform matrix. For each pixel\n    (x, y) in the output image, the new value is taken from a position (a x +\n    b y + c, d x + e y + f) in the input image, rounded to nearest pixel.\n    This function can be used to scale, translate, rotate, and shear the\n    original image.\n    See :py:meth:`.Image.transform`",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "PerspectiveTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class PerspectiveTransform(Transform):\n    \"\"\"\n    Define a perspective image transform.\n    This function takes an 8-tuple (a, b, c, d, e, f, g, h). For each pixel\n    (x, y) in the output image, the new value is taken from a position\n    ((a x + b y + c) / (g x + h y + 1), (d x + e y + f) / (g x + h y + 1)) in\n    the input image, rounded to nearest pixel.\n    This function can be used to scale, translate, rotate, and shear the\n    original image.\n    See :py:meth:`.Image.transform`",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "ExtentTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class ExtentTransform(Transform):\n    \"\"\"\n    Define a transform to extract a subregion from an image.\n    Maps a rectangle (defined by two corners) from the image to a rectangle of\n    the given size. The resulting image will contain data sampled from between\n    the corners, such that (x0, y0) in the input image will end up at (0,0) in\n    the output image, and (x1, y1) at size.\n    This method can be used to crop, stretch, shrink, or mirror an arbitrary\n    rectangle in the current image. It is slightly slower than crop, but about\n    as fast as a corresponding resize operation.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "QuadTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class QuadTransform(Transform):\n    \"\"\"\n    Define a quad image transform.\n    Maps a quadrilateral (a region defined by four corners) from the image to a\n    rectangle of the given size.\n    See :py:meth:`.Image.transform`\n    :param xy: An 8-tuple (x0, y0, x1, y1, x2, y2, x3, y3) which contain the\n        upper left, lower left, lower right, and upper right corner of the\n        source quadrilateral.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "MeshTransform",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "peekOfCode": "class MeshTransform(Transform):\n    \"\"\"\n    Define a mesh image transform.  A mesh transform consists of one or more\n    individual quad transforms.\n    See :py:meth:`.Image.transform`\n    :param data: A list of (bbox, quad) tuples.\n    \"\"\"\n    method = Image.Transform.MESH",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageTransform",
        "documentation": {}
    },
    {
        "label": "HDC",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "peekOfCode": "class HDC:\n    \"\"\"\n    Wraps an HDC integer. The resulting object can be passed to the\n    :py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`\n    methods.\n    \"\"\"\n    def __init__(self, dc: int) -> None:\n        self.dc = dc\n    def __int__(self) -> int:\n        return self.dc",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "documentation": {}
    },
    {
        "label": "HWND",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "peekOfCode": "class HWND:\n    \"\"\"\n    Wraps an HWND integer. The resulting object can be passed to the\n    :py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`\n    methods, instead of a DC.\n    \"\"\"\n    def __init__(self, wnd: int) -> None:\n        self.wnd = wnd\n    def __int__(self) -> int:\n        return self.wnd",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "documentation": {}
    },
    {
        "label": "Dib",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "peekOfCode": "class Dib:\n    \"\"\"\n    A Windows bitmap with the given mode and size.  The mode can be one of \"1\",\n    \"L\", \"P\", or \"RGB\".\n    If the display requires a palette, this constructor creates a suitable\n    palette and associates it with the image. For an \"L\" image, 128 graylevels\n    are allocated. For an \"RGB\" image, a 6x6x6 colour cube is used, together\n    with 20 graylevels.\n    To make sure that palettes work properly under Windows, you must call the\n    ``palette`` method upon certain events from Windows.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "peekOfCode": "class Window:\n    \"\"\"Create a Window with the given title size.\"\"\"\n    def __init__(\n        self, title: str = \"PIL\", width: int | None = None, height: int | None = None\n    ) -> None:\n        self.hwnd = Image.core.createwindow(\n            title, self.__dispatcher, width or 0, height or 0\n        )\n    def __dispatcher(self, action: str, *args: int) -> None:\n        getattr(self, f\"ui_handle_{action}\")(*args)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "documentation": {}
    },
    {
        "label": "ImageWindow",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "peekOfCode": "class ImageWindow(Window):\n    \"\"\"Create an image window which displays the given image.\"\"\"\n    def __init__(self, image: Image.Image | Dib, title: str = \"PIL\") -> None:\n        if not isinstance(image, Dib):\n            image = Dib(image)\n        self.image = image\n        width, height = image.size\n        super().__init__(title, width=width, height=height)\n    def ui_handle_repair(self, dc: int, x0: int, y0: int, x1: int, y1: int) -> None:\n        self.image.draw(dc, (x0, y0, x1, y1))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImageWin",
        "documentation": {}
    },
    {
        "label": "ImImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "class ImImageFile(ImageFile.ImageFile):\n    format = \"IM\"\n    format_description = \"IFUNC Image Memory\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        # Quick rejection: if there's not an LF among the first\n        # 100 bytes, this is (probably) not a text header.\n        if b\"\\n\" not in self.fp.read(100):\n            msg = \"not an IM file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "def number(s: Any) -> float:\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)\n##\n# Image plugin for the IFUNC IM file format.\nclass ImImageFile(ImageFile.ImageFile):\n    format = \"IM\"\n    format_description = \"IFUNC Image Memory\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "COMMENT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "COMMENT = \"Comment\"\nDATE = \"Date\"\nEQUIPMENT = \"Digitalization equipment\"\nFRAMES = \"File size (no of images)\"\nLUT = \"Lut\"\nNAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "DATE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "DATE = \"Date\"\nEQUIPMENT = \"Digitalization equipment\"\nFRAMES = \"File size (no of images)\"\nLUT = \"Lut\"\nNAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "EQUIPMENT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "EQUIPMENT = \"Digitalization equipment\"\nFRAMES = \"File size (no of images)\"\nLUT = \"Lut\"\nNAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "FRAMES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "FRAMES = \"File size (no of images)\"\nLUT = \"Lut\"\nNAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "LUT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "LUT = \"Lut\"\nNAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "NAME = \"Name\"\nSCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,\n    LUT: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "SCALE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "SCALE = \"Scale (x,y)\"\nSIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,\n    LUT: 0,\n    NAME: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "SIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "SIZE = \"Image size (x*y)\"\nMODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,\n    LUT: 0,\n    NAME: 0,\n    SCALE: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "MODE = \"Image type\"\nTAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,\n    LUT: 0,\n    NAME: 0,\n    SCALE: 0,\n    SIZE: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "TAGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "TAGS = {\n    COMMENT: 0,\n    DATE: 0,\n    EQUIPMENT: 0,\n    FRAMES: 0,\n    LUT: 0,\n    NAME: 0,\n    SCALE: 0,\n    SIZE: 0,\n    MODE: 0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "OPEN",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "OPEN = {\n    # ifunc93/p3cfunc formats\n    \"0 1 image\": (\"1\", \"1\"),\n    \"L 1 image\": (\"1\", \"1\"),\n    \"Greyscale image\": (\"L\", \"L\"),\n    \"Grayscale image\": (\"L\", \"L\"),\n    \"RGB image\": (\"RGB\", \"RGB;L\"),\n    \"RLB image\": (\"RGB\", \"RLB\"),\n    \"RYB image\": (\"RGB\", \"RLB\"),\n    \"B1 image\": (\"1\", \"1\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "split = re.compile(rb\"^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$\")\ndef number(s: Any) -> float:\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)\n##\n# Image plugin for the IFUNC IM file format.\nclass ImImageFile(ImageFile.ImageFile):\n    format = \"IM\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "peekOfCode": "SAVE = {\n    # mode: (im type, raw mode)\n    \"1\": (\"0 1\", \"1\"),\n    \"L\": (\"Greyscale\", \"L\"),\n    \"LA\": (\"LA\", \"LA;L\"),\n    \"P\": (\"Greyscale\", \"P\"),\n    \"PA\": (\"LA\", \"PA;L\"),\n    \"I\": (\"L 32S\", \"I;32S\"),\n    \"I;16\": (\"L 16\", \"I;16\"),\n    \"I;16L\": (\"L 16L\", \"I;16L\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImtImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "peekOfCode": "class ImtImageFile(ImageFile.ImageFile):\n    format = \"IMT\"\n    format_description = \"IM Tools\"\n    def _open(self) -> None:\n        # Quick rejection: if there's not a LF among the first\n        # 100 bytes, this is (probably) not a text header.\n        assert self.fp is not None\n        buffer = self.fp.read(100)\n        if b\"\\n\" not in buffer:\n            msg = \"not an IM file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "peekOfCode": "field = re.compile(rb\"([a-z]*) ([^ \\r\\n]*)\")\n##\n# Image plugin for IM Tools images.\nclass ImtImageFile(ImageFile.ImageFile):\n    format = \"IMT\"\n    format_description = \"IM Tools\"\n    def _open(self) -> None:\n        # Quick rejection: if there's not a LF among the first\n        # 100 bytes, this is (probably) not a text header.\n        assert self.fp is not None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.ImtImagePlugin",
        "documentation": {}
    },
    {
        "label": "IptcImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "peekOfCode": "class IptcImageFile(ImageFile.ImageFile):\n    format = \"IPTC\"\n    format_description = \"IPTC/NAA\"\n    def getint(self, key: tuple[int, int]) -> int:\n        return _i(self.info[key])\n    def field(self) -> tuple[tuple[int, int] | None, int]:\n        #\n        # get a IPTC field header\n        s = self.fp.read(5)\n        if not s.strip(b\"\\x00\"):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "peekOfCode": "def i(c: bytes) -> int:\n    \"\"\".. deprecated:: 10.2.0\"\"\"\n    deprecate(\"IptcImagePlugin.i\", 12)\n    return _i(c)\ndef dump(c: Sequence[int | bytes]) -> None:\n    \"\"\".. deprecated:: 10.2.0\"\"\"\n    deprecate(\"IptcImagePlugin.dump\", 12)\n    for i in c:\n        print(f\"{_i8(i):02x}\", end=\" \")\n    print()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "peekOfCode": "def dump(c: Sequence[int | bytes]) -> None:\n    \"\"\".. deprecated:: 10.2.0\"\"\"\n    deprecate(\"IptcImagePlugin.dump\", 12)\n    for i in c:\n        print(f\"{_i8(i):02x}\", end=\" \")\n    print()\n##\n# Image plugin for IPTC/NAA datastreams.  To read IPTC/NAA fields\n# from TIFF and JPEG files, use the <b>getiptcinfo</b> function.\nclass IptcImageFile(ImageFile.ImageFile):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "documentation": {}
    },
    {
        "label": "getiptcinfo",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "peekOfCode": "def getiptcinfo(\n    im: ImageFile.ImageFile,\n) -> dict[tuple[int, int], bytes | list[bytes]] | None:\n    \"\"\"\n    Get IPTC information from TIFF, JPEG, or IPTC file.\n    :param im: An image containing IPTC data.\n    :returns: A dictionary containing IPTC information, or None if\n        no IPTC information block was found.\n    \"\"\"\n    from . import JpegImagePlugin, TiffImagePlugin",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "documentation": {}
    },
    {
        "label": "COMPRESSION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "peekOfCode": "COMPRESSION = {1: \"raw\", 5: \"jpeg\"}\ndef __getattr__(name: str) -> bytes:\n    if name == \"PAD\":\n        deprecate(\"IptcImagePlugin.PAD\", 12)\n        return b\"\\0\\0\\0\\0\"\n    msg = f\"module '{__name__}' has no attribute '{name}'\"\n    raise AttributeError(msg)\n#\n# Helpers\ndef _i(c: bytes) -> int:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.IptcImagePlugin",
        "documentation": {}
    },
    {
        "label": "BoxReader",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "peekOfCode": "class BoxReader:\n    \"\"\"\n    A small helper class to read fields stored in JPEG2000 header boxes\n    and to easily step into and read sub-boxes.\n    \"\"\"\n    def __init__(self, fp: IO[bytes], length: int = -1) -> None:\n        self.fp = fp\n        self.has_length = length >= 0\n        self.length = length\n        self.remaining_in_box = -1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "documentation": {}
    },
    {
        "label": "Jpeg2KImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "peekOfCode": "class Jpeg2KImageFile(ImageFile.ImageFile):\n    format = \"JPEG2000\"\n    format_description = \"JPEG 2000 (ISO 15444)\"\n    def _open(self) -> None:\n        sig = self.fp.read(4)\n        if sig == b\"\\xff\\x4f\\xff\\x51\":\n            self.codec = \"j2k\"\n            self._size, self._mode = _parse_codestream(self.fp)\n            self._parse_comment()\n        else:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.Jpeg2KImagePlugin",
        "documentation": {}
    },
    {
        "label": "JpegImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "class JpegImageFile(ImageFile.ImageFile):\n    format = \"JPEG\"\n    format_description = \"JPEG (ISO 10918)\"\n    def _open(self) -> None:\n        s = self.fp.read(3)\n        if not _accept(s):\n            msg = \"not a JPEG file\"\n            raise SyntaxError(msg)\n        s = b\"\\xff\"\n        # Create attributes",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "Skip",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def Skip(self: JpegImageFile, marker: int) -> None:\n    n = i16(self.fp.read(2)) - 2\n    ImageFile._safe_read(self.fp, n)\ndef APP(self: JpegImageFile, marker: int) -> None:\n    #\n    # Application marker.  Store these in the APP dictionary.\n    # Also look for well-known application markers.\n    n = i16(self.fp.read(2)) - 2\n    s = ImageFile._safe_read(self.fp, n)\n    app = f\"APP{marker & 15}\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "APP",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def APP(self: JpegImageFile, marker: int) -> None:\n    #\n    # Application marker.  Store these in the APP dictionary.\n    # Also look for well-known application markers.\n    n = i16(self.fp.read(2)) - 2\n    s = ImageFile._safe_read(self.fp, n)\n    app = f\"APP{marker & 15}\"\n    self.app[app] = s  # compatibility\n    self.applist.append((app, s))\n    if marker == 0xFFE0 and s.startswith(b\"JFIF\"):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "COM",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def COM(self: JpegImageFile, marker: int) -> None:\n    #\n    # Comment marker.  Store these in the APP dictionary.\n    n = i16(self.fp.read(2)) - 2\n    s = ImageFile._safe_read(self.fp, n)\n    self.info[\"comment\"] = s\n    self.app[\"COM\"] = s  # compatibility\n    self.applist.append((\"COM\", s))\ndef SOF(self: JpegImageFile, marker: int) -> None:\n    #",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "SOF",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def SOF(self: JpegImageFile, marker: int) -> None:\n    #\n    # Start of frame marker.  Defines the size and mode of the\n    # image.  JPEG is colour blind, so we use some simple\n    # heuristics to map the number of layers to an appropriate\n    # mode.  Note that this could be made a bit brighter, by\n    # looking for JFIF and Adobe APP markers.\n    n = i16(self.fp.read(2)) - 2\n    s = ImageFile._safe_read(self.fp, n)\n    self._size = i16(s, 3), i16(s, 1)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "DQT",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def DQT(self: JpegImageFile, marker: int) -> None:\n    #\n    # Define quantization table.  Note that there might be more\n    # than one table in each marker.\n    # FIXME: The quantization tables can be used to estimate the\n    # compression quality.\n    n = i16(self.fp.read(2)) - 2\n    s = ImageFile._safe_read(self.fp, n)\n    while len(s):\n        v = s[0]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "get_sampling",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def get_sampling(im: Image.Image) -> int:\n    # There's no subsampling when images have only 1 layer\n    # (grayscale images) or when they are CMYK (4 layers),\n    # so set subsampling to the default value.\n    #\n    # NOTE: currently Pillow can't encode JPEG to YCCK format.\n    # If YCCK support is added in the future, subsampling code will have\n    # to be updated (here and in JpegEncode.c) to deal with 4 layers.\n    if not isinstance(im, JpegImageFile) or im.layers in (1, 4):\n        return -1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "jpeg_factory",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "def jpeg_factory(\n    fp: IO[bytes], filename: str | bytes | None = None\n) -> JpegImageFile | MpoImageFile:\n    im = JpegImageFile(fp, filename)\n    try:\n        mpheader = im._getmp()\n        if mpheader is not None and mpheader[45057] > 1:\n            for segment, content in im.applist:\n                if segment == \"APP1\" and b' hdrgm:Version=\"' in content:\n                    # Ultra HDR images are not yet supported",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from .MpoImagePlugin import MpoImageFile\n#\n# Parser\ndef Skip(self: JpegImageFile, marker: int) -> None:\n    n = i16(self.fp.read(2)) - 2\n    ImageFile._safe_read(self.fp, n)\ndef APP(self: JpegImageFile, marker: int) -> None:\n    #",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "MARKER",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "MARKER = {\n    0xFFC0: (\"SOF0\", \"Baseline DCT\", SOF),\n    0xFFC1: (\"SOF1\", \"Extended Sequential DCT\", SOF),\n    0xFFC2: (\"SOF2\", \"Progressive DCT\", SOF),\n    0xFFC3: (\"SOF3\", \"Spatial lossless\", SOF),\n    0xFFC4: (\"DHT\", \"Define Huffman table\", Skip),\n    0xFFC5: (\"SOF5\", \"Differential sequential DCT\", SOF),\n    0xFFC6: (\"SOF6\", \"Differential progressive DCT\", SOF),\n    0xFFC7: (\"SOF7\", \"Differential spatial\", SOF),\n    0xFFC8: (\"JPG\", \"Extension\", None),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "RAWMODE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "RAWMODE = {\n    \"1\": \"L\",\n    \"L\": \"L\",\n    \"RGB\": \"RGB\",\n    \"RGBX\": \"RGB\",\n    \"CMYK\": \"CMYK;I\",  # assume adobe conventions\n    \"YCbCr\": \"YCbCr\",\n}\n# fmt: off\nzigzag_index = (",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "zigzag_index",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "zigzag_index = (\n    0,  1,  5,  6, 14, 15, 27, 28,\n    2,  4,  7, 13, 16, 26, 29, 42,\n    3,  8, 12, 17, 25, 30, 41, 43,\n    9, 11, 18, 24, 31, 40, 44, 53,\n    10, 19, 23, 32, 39, 45, 52, 54,\n    20, 22, 33, 38, 46, 51, 55, 60,\n    21, 34, 37, 47, 50, 56, 59, 61,\n    35, 36, 48, 49, 57, 58, 62, 63,\n)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "samplings",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "peekOfCode": "samplings = {\n    (1, 1, 1, 1, 1, 1): 0,\n    (2, 1, 1, 1, 1, 1): 1,\n    (2, 2, 1, 1, 1, 1): 2,\n}\n# fmt: on\ndef get_sampling(im: Image.Image) -> int:\n    # There's no subsampling when images have only 1 layer\n    # (grayscale images) or when they are CMYK (4 layers),\n    # so set subsampling to the default value.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "presets",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegPresets",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegPresets",
        "peekOfCode": "presets = {\n            'web_low':      {'subsampling':  2,  # \"4:2:0\"\n                             'quantization': [\n                               [20, 16, 25, 39, 50, 46, 62, 68,\n                                16, 18, 23, 38, 38, 53, 65, 68,\n                                25, 23, 31, 38, 53, 65, 68, 68,\n                                39, 38, 38, 53, 65, 68, 68, 68,\n                                50, 38, 53, 65, 68, 68, 68, 68,\n                                46, 53, 65, 68, 68, 68, 68, 68,\n                                62, 65, 68, 68, 68, 68, 68, 68,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.JpegPresets",
        "documentation": {}
    },
    {
        "label": "McIdasImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.McIdasImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.McIdasImagePlugin",
        "peekOfCode": "class McIdasImageFile(ImageFile.ImageFile):\n    format = \"MCIDAS\"\n    format_description = \"McIdas area file\"\n    def _open(self) -> None:\n        # parse area file directory\n        assert self.fp is not None\n        s = self.fp.read(256)\n        if not _accept(s) or len(s) != 256:\n            msg = \"not an McIdas area file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.McIdasImagePlugin",
        "documentation": {}
    },
    {
        "label": "MicImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MicImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MicImagePlugin",
        "peekOfCode": "class MicImageFile(TiffImagePlugin.TiffImageFile):\n    format = \"MIC\"\n    format_description = \"Microsoft Image Composer\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        # read the OLE directory and see if this is a likely\n        # to be a Microsoft Image Composer file\n        try:\n            self.ole = olefile.OleFileIO(self.fp)\n        except OSError as e:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MicImagePlugin",
        "documentation": {}
    },
    {
        "label": "BitStream",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "peekOfCode": "class BitStream:\n    def __init__(self, fp: SupportsRead[bytes]) -> None:\n        self.fp = fp\n        self.bits = 0\n        self.bitbuffer = 0\n    def next(self) -> int:\n        return i8(self.fp.read(1))\n    def peek(self, bits: int) -> int:\n        while self.bits < bits:\n            self.bitbuffer = (self.bitbuffer << 8) + self.next()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "MpegImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "peekOfCode": "class MpegImageFile(ImageFile.ImageFile):\n    format = \"MPEG\"\n    format_description = \"MPEG\"\n    def _open(self) -> None:\n        assert self.fp is not None\n        s = BitStream(self.fp)\n        if s.read(32) != 0x1B3:\n            msg = \"not an MPEG file\"\n            raise SyntaxError(msg)\n        self._mode = \"RGB\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpegImagePlugin",
        "documentation": {}
    },
    {
        "label": "MpoImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpoImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpoImagePlugin",
        "peekOfCode": "class MpoImageFile(JpegImagePlugin.JpegImageFile):\n    format = \"MPO\"\n    format_description = \"MPO (CIPA DC-007)\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        self.fp.seek(0)  # prep the fp in order to pass the JPEG test\n        JpegImagePlugin.JpegImageFile._open(self)\n        self._after_jpeg_open()\n    def _after_jpeg_open(self, mpheader: dict[int, Any] | None = None) -> None:\n        self.mpinfo = mpheader if mpheader is not None else self._getmp()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MpoImagePlugin",
        "documentation": {}
    },
    {
        "label": "MspImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "peekOfCode": "class MspImageFile(ImageFile.ImageFile):\n    format = \"MSP\"\n    format_description = \"Windows Paint\"\n    def _open(self) -> None:\n        # Header\n        assert self.fp is not None\n        s = self.fp.read(32)\n        if not _accept(s):\n            msg = \"not an MSP file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "documentation": {}
    },
    {
        "label": "MspDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "peekOfCode": "class MspDecoder(ImageFile.PyDecoder):\n    # The algo for the MSP decoder is from\n    # https://www.fileformat.info/format/mspaint/egff.htm\n    # cc-by-attribution -- That page references is taken from the\n    # Encyclopedia of Graphics File Formats and is licensed by\n    # O'Reilly under the Creative Common/Attribution license\n    #\n    # For RLE encoded files, the 32byte header is followed by a scan\n    # line map, encoded as one 16bit word of encoded byte length per\n    # line.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.MspImagePlugin",
        "documentation": {}
    },
    {
        "label": "PaletteFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PaletteFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PaletteFile",
        "peekOfCode": "class PaletteFile:\n    \"\"\"File handler for Teragon-style palette files.\"\"\"\n    rawmode = \"RGB\"\n    def __init__(self, fp: IO[bytes]) -> None:\n        palette = [o8(i) * 3 for i in range(256)]\n        while True:\n            s = fp.readline()\n            if not s:\n                break\n            if s.startswith(b\"#\"):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PaletteFile",
        "documentation": {}
    },
    {
        "label": "build_prototype_image",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "peekOfCode": "def build_prototype_image() -> Image.Image:\n    image = Image.new(\"L\", (1, len(_Palm8BitColormapValues)))\n    image.putdata(list(range(len(_Palm8BitColormapValues))))\n    palettedata: tuple[int, ...] = ()\n    for colormapValue in _Palm8BitColormapValues:\n        palettedata += colormapValue\n    palettedata += (0, 0, 0) * (256 - len(_Palm8BitColormapValues))\n    image.putpalette(palettedata)\n    return image\nPalm8BitColormapImage = build_prototype_image()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "documentation": {}
    },
    {
        "label": "_Palm8BitColormapValues",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "peekOfCode": "_Palm8BitColormapValues = (\n    (255, 255, 255), (255, 204, 255), (255, 153, 255), (255, 102, 255),\n    (255,  51, 255), (255,   0, 255), (255, 255, 204), (255, 204, 204),\n    (255, 153, 204), (255, 102, 204), (255,  51, 204), (255,   0, 204),\n    (255, 255, 153), (255, 204, 153), (255, 153, 153), (255, 102, 153),\n    (255,  51, 153), (255,   0, 153), (204, 255, 255), (204, 204, 255),\n    (204, 153, 255), (204, 102, 255), (204,  51, 255), (204,   0, 255),\n    (204, 255, 204), (204, 204, 204), (204, 153, 204), (204, 102, 204),\n    (204,  51, 204), (204,   0, 204), (204, 255, 153), (204, 204, 153),\n    (204, 153, 153), (204, 102, 153), (204,  51, 153), (204,   0, 153),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "documentation": {}
    },
    {
        "label": "Palm8BitColormapImage",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "peekOfCode": "Palm8BitColormapImage = build_prototype_image()\n# OK, we now have in Palm8BitColormapImage,\n# a \"P\"-mode image with the right palette\n#\n# --------------------------------------------------------------------\n_FLAGS = {\"custom-colormap\": 0x4000, \"is-compressed\": 0x8000, \"has-transparent\": 0x2000}\n_COMPRESSION_TYPES = {\"none\": 0xFF, \"rle\": 0x01, \"scanline\": 0x00}\n#\n# --------------------------------------------------------------------\n##",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "documentation": {}
    },
    {
        "label": "_FLAGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "peekOfCode": "_FLAGS = {\"custom-colormap\": 0x4000, \"is-compressed\": 0x8000, \"has-transparent\": 0x2000}\n_COMPRESSION_TYPES = {\"none\": 0xFF, \"rle\": 0x01, \"scanline\": 0x00}\n#\n# --------------------------------------------------------------------\n##\n# (Internal) Image save plugin for the Palm format.\ndef _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    if im.mode == \"P\":\n        rawmode = \"P\"\n        bpp = 8",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "documentation": {}
    },
    {
        "label": "_COMPRESSION_TYPES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "peekOfCode": "_COMPRESSION_TYPES = {\"none\": 0xFF, \"rle\": 0x01, \"scanline\": 0x00}\n#\n# --------------------------------------------------------------------\n##\n# (Internal) Image save plugin for the Palm format.\ndef _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    if im.mode == \"P\":\n        rawmode = \"P\"\n        bpp = 8\n        version = 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PalmImagePlugin",
        "documentation": {}
    },
    {
        "label": "PcdImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcdImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcdImagePlugin",
        "peekOfCode": "class PcdImageFile(ImageFile.ImageFile):\n    format = \"PCD\"\n    format_description = \"Kodak PhotoCD\"\n    def _open(self) -> None:\n        # rough\n        assert self.fp is not None\n        self.fp.seek(2048)\n        s = self.fp.read(2048)\n        if not s.startswith(b\"PCD_\"):\n            msg = \"not a PCD file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcdImagePlugin",
        "documentation": {}
    },
    {
        "label": "PcfFontFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "class PcfFontFile(FontFile.FontFile):\n    \"\"\"Font file plugin for the X11 PCF format.\"\"\"\n    name = \"name\"\n    def __init__(self, fp: BinaryIO, charset_encoding: str = \"iso8859-1\"):\n        self.charset_encoding = charset_encoding\n        magic = l32(fp.read(4))\n        if magic != PCF_MAGIC:\n            msg = \"not a PCF file\"\n            raise SyntaxError(msg)\n        super().__init__()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "sz",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "def sz(s: bytes, o: int) -> bytes:\n    return s[o : s.index(b\"\\0\", o)]\nclass PcfFontFile(FontFile.FontFile):\n    \"\"\"Font file plugin for the X11 PCF format.\"\"\"\n    name = \"name\"\n    def __init__(self, fp: BinaryIO, charset_encoding: str = \"iso8859-1\"):\n        self.charset_encoding = charset_encoding\n        magic = l32(fp.read(4))\n        if magic != PCF_MAGIC:\n            msg = \"not a PCF file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_MAGIC = 0x70636601  # \"\\x01fcp\"\nPCF_PROPERTIES = 1 << 0\nPCF_ACCELERATORS = 1 << 1\nPCF_METRICS = 1 << 2\nPCF_BITMAPS = 1 << 3\nPCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_PROPERTIES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_PROPERTIES = 1 << 0\nPCF_ACCELERATORS = 1 << 1\nPCF_METRICS = 1 << 2\nPCF_BITMAPS = 1 << 3\nPCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_ACCELERATORS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_ACCELERATORS = 1 << 1\nPCF_METRICS = 1 << 2\nPCF_BITMAPS = 1 << 3\nPCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_METRICS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_METRICS = 1 << 2\nPCF_BITMAPS = 1 << 3\nPCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_BITMAPS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_BITMAPS = 1 << 3\nPCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_INK_METRICS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_INK_METRICS = 1 << 4\nPCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,\n    lambda bits: ((bits + 63) >> 3) & ~7,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_BDF_ENCODINGS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_BDF_ENCODINGS = 1 << 5\nPCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,\n    lambda bits: ((bits + 63) >> 3) & ~7,\n]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_SWIDTHS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_SWIDTHS = 1 << 6\nPCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,\n    lambda bits: ((bits + 63) >> 3) & ~7,\n]\ndef sz(s: bytes, o: int) -> bytes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_GLYPH_NAMES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_GLYPH_NAMES = 1 << 7\nPCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,\n    lambda bits: ((bits + 63) >> 3) & ~7,\n]\ndef sz(s: bytes, o: int) -> bytes:\n    return s[o : s.index(b\"\\0\", o)]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PCF_BDF_ACCELERATORS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "peekOfCode": "PCF_BDF_ACCELERATORS = 1 << 8\nBYTES_PER_ROW: list[Callable[[int], int]] = [\n    lambda bits: ((bits + 7) >> 3),\n    lambda bits: ((bits + 15) >> 3) & ~1,\n    lambda bits: ((bits + 31) >> 3) & ~3,\n    lambda bits: ((bits + 63) >> 3) & ~7,\n]\ndef sz(s: bytes, o: int) -> bytes:\n    return s[o : s.index(b\"\\0\", o)]\nclass PcfFontFile(FontFile.FontFile):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcfFontFile",
        "documentation": {}
    },
    {
        "label": "PcxImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "peekOfCode": "class PcxImageFile(ImageFile.ImageFile):\n    format = \"PCX\"\n    format_description = \"Paintbrush\"\n    def _open(self) -> None:\n        # header\n        assert self.fp is not None\n        s = self.fp.read(68)\n        if not _accept(s):\n            msg = \"not a PCX file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _accept(prefix: bytes) -> bool:\n    return prefix[0] == 10 and prefix[1] in [0, 2, 3, 5]\n##\n# Image plugin for Paintbrush images.\nclass PcxImageFile(ImageFile.ImageFile):\n    format = \"PCX\"\n    format_description = \"Paintbrush\"\n    def _open(self) -> None:\n        # header",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "peekOfCode": "SAVE = {\n    # mode: (version, bits, planes, raw mode)\n    \"1\": (2, 1, 1, \"1\"),\n    \"L\": (5, 8, 1, \"L\"),\n    \"P\": (5, 8, 1, \"P\"),\n    \"RGB\": (5, 8, 3, \"RGB;L\"),\n}\ndef _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    try:\n        version, bits, planes, rawmode = SAVE[im.mode]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PcxImagePlugin",
        "documentation": {}
    },
    {
        "label": "PdfFormatError",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfFormatError(RuntimeError):\n    \"\"\"An error that probably indicates a syntactic or semantic error in the\n    PDF file structure\"\"\"\n    pass\ndef check_format_condition(condition: bool, error_message: str) -> None:\n    if not condition:\n        raise PdfFormatError(error_message)\nclass IndirectReferenceTuple(NamedTuple):\n    object_id: int\n    generation: int",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "IndirectReferenceTuple",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class IndirectReferenceTuple(NamedTuple):\n    object_id: int\n    generation: int\nclass IndirectReference(IndirectReferenceTuple):\n    def __str__(self) -> str:\n        return f\"{self.object_id} {self.generation} R\"\n    def __bytes__(self) -> bytes:\n        return self.__str__().encode(\"us-ascii\")\n    def __eq__(self, other: object) -> bool:\n        if self.__class__ is not other.__class__:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "IndirectReference",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class IndirectReference(IndirectReferenceTuple):\n    def __str__(self) -> str:\n        return f\"{self.object_id} {self.generation} R\"\n    def __bytes__(self) -> bytes:\n        return self.__str__().encode(\"us-ascii\")\n    def __eq__(self, other: object) -> bool:\n        if self.__class__ is not other.__class__:\n            return False\n        assert isinstance(other, IndirectReference)\n        return other.object_id == self.object_id and other.generation == self.generation",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "IndirectObjectDef",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class IndirectObjectDef(IndirectReference):\n    def __str__(self) -> str:\n        return f\"{self.object_id} {self.generation} obj\"\nclass XrefTable:\n    def __init__(self) -> None:\n        self.existing_entries: dict[int, tuple[int, int]] = (\n            {}\n        )  # object ID => (offset, generation)\n        self.new_entries: dict[int, tuple[int, int]] = (\n            {}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "XrefTable",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class XrefTable:\n    def __init__(self) -> None:\n        self.existing_entries: dict[int, tuple[int, int]] = (\n            {}\n        )  # object ID => (offset, generation)\n        self.new_entries: dict[int, tuple[int, int]] = (\n            {}\n        )  # object ID => (offset, generation)\n        self.deleted_entries = {0: 65536}  # object ID => generation\n        self.reading_finished = False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfName",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfName:\n    name: bytes\n    def __init__(self, name: PdfName | bytes | str) -> None:\n        if isinstance(name, PdfName):\n            self.name = name.name\n        elif isinstance(name, bytes):\n            self.name = name\n        else:\n            self.name = name.encode(\"us-ascii\")\n    def name_as_str(self) -> str:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfArray",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfArray(list[Any]):\n    def __bytes__(self) -> bytes:\n        return b\"[ \" + b\" \".join(pdf_repr(x) for x in self) + b\" ]\"\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    _DictBase = collections.UserDict[Union[str, bytes], Any]\nelse:\n    _DictBase = collections.UserDict\nclass PdfDict(_DictBase):\n    def __setattr__(self, key: str, value: Any) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfDict",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfDict(_DictBase):\n    def __setattr__(self, key: str, value: Any) -> None:\n        if key == \"data\":\n            collections.UserDict.__setattr__(self, key, value)\n        else:\n            self[key.encode(\"us-ascii\")] = value\n    def __getattr__(self, key: str) -> str | time.struct_time:\n        try:\n            value = self[key.encode(\"us-ascii\")]\n        except KeyError as e:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfBinary",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfBinary:\n    def __init__(self, data: list[int] | bytes) -> None:\n        self.data = data\n    def __bytes__(self) -> bytes:\n        return b\"<%s>\" % b\"\".join(b\"%02X\" % b for b in self.data)\nclass PdfStream:\n    def __init__(self, dictionary: PdfDict, buf: bytes) -> None:\n        self.dictionary = dictionary\n        self.buf = buf\n    def decode(self) -> bytes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfStream",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfStream:\n    def __init__(self, dictionary: PdfDict, buf: bytes) -> None:\n        self.dictionary = dictionary\n        self.buf = buf\n    def decode(self) -> bytes:\n        try:\n            filter = self.dictionary[b\"Filter\"]\n        except KeyError:\n            return self.buf\n        if filter == b\"FlateDecode\":",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PdfParser",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "class PdfParser:\n    \"\"\"Based on\n    https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf\n    Supports PDF up to 1.4\n    \"\"\"\n    def __init__(\n        self,\n        filename: str | None = None,\n        f: IO[bytes] | None = None,\n        buf: bytes | bytearray | None = None,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "encode_text",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "def encode_text(s: str) -> bytes:\n    return codecs.BOM_UTF16_BE + s.encode(\"utf_16_be\")\nPDFDocEncoding = {\n    0x16: \"\\u0017\",\n    0x18: \"\\u02d8\",\n    0x19: \"\\u02c7\",\n    0x1A: \"\\u02c6\",\n    0x1B: \"\\u02d9\",\n    0x1C: \"\\u02dd\",\n    0x1D: \"\\u02db\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "decode_text",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "def decode_text(b: bytes) -> str:\n    if b[: len(codecs.BOM_UTF16_BE)] == codecs.BOM_UTF16_BE:\n        return b[len(codecs.BOM_UTF16_BE) :].decode(\"utf_16_be\")\n    else:\n        return \"\".join(PDFDocEncoding.get(byte, chr(byte)) for byte in b)\nclass PdfFormatError(RuntimeError):\n    \"\"\"An error that probably indicates a syntactic or semantic error in the\n    PDF file structure\"\"\"\n    pass\ndef check_format_condition(condition: bool, error_message: str) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "check_format_condition",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "def check_format_condition(condition: bool, error_message: str) -> None:\n    if not condition:\n        raise PdfFormatError(error_message)\nclass IndirectReferenceTuple(NamedTuple):\n    object_id: int\n    generation: int\nclass IndirectReference(IndirectReferenceTuple):\n    def __str__(self) -> str:\n        return f\"{self.object_id} {self.generation} R\"\n    def __bytes__(self) -> bytes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "pdf_repr",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "def pdf_repr(x: Any) -> bytes:\n    if x is True:\n        return b\"true\"\n    elif x is False:\n        return b\"false\"\n    elif x is None:\n        return b\"null\"\n    elif isinstance(x, (PdfName, PdfDict, PdfArray, PdfBinary)):\n        return bytes(x)\n    elif isinstance(x, (int, float)):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PDFDocEncoding",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "PDFDocEncoding = {\n    0x16: \"\\u0017\",\n    0x18: \"\\u02d8\",\n    0x19: \"\\u02c7\",\n    0x1A: \"\\u02c6\",\n    0x1B: \"\\u02d9\",\n    0x1C: \"\\u02dd\",\n    0x1D: \"\\u02db\",\n    0x1E: \"\\u02da\",\n    0x1F: \"\\u02dc\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    _DictBase = collections.UserDict[Union[str, bytes], Any]\nelse:\n    _DictBase = collections.UserDict\nclass PdfDict(_DictBase):\n    def __setattr__(self, key: str, value: Any) -> None:\n        if key == \"data\":\n            collections.UserDict.__setattr__(self, key, value)\n        else:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PdfParser",
        "documentation": {}
    },
    {
        "label": "PixarImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PixarImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PixarImagePlugin",
        "peekOfCode": "class PixarImageFile(ImageFile.ImageFile):\n    format = \"PIXAR\"\n    format_description = \"PIXAR raster image\"\n    def _open(self) -> None:\n        # assuming a 4-byte magic label\n        assert self.fp is not None\n        s = self.fp.read(4)\n        if not _accept(s):\n            msg = \"not a PIXAR file\"\n            raise SyntaxError(msg)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PixarImagePlugin",
        "documentation": {}
    },
    {
        "label": "Disposal",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class Disposal(IntEnum):\n    OP_NONE = 0\n    \"\"\"\n    No disposal is done on this frame before rendering the next frame.\n    See :ref:`Saving APNG sequences<apng-saving>`.\n    \"\"\"\n    OP_BACKGROUND = 1\n    \"\"\"\n    This frame’s modified region is cleared to fully transparent black before rendering\n    the next frame.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "Blend",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class Blend(IntEnum):\n    OP_SOURCE = 0\n    \"\"\"\n    All color components of this frame, including alpha, overwrite the previous output\n    image contents.\n    See :ref:`Saving APNG sequences<apng-saving>`.\n    \"\"\"\n    OP_OVER = 1\n    \"\"\"\n    This frame should be alpha composited with the previous output image contents.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "ChunkStream",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class ChunkStream:\n    def __init__(self, fp: IO[bytes]) -> None:\n        self.fp: IO[bytes] | None = fp\n        self.queue: list[tuple[bytes, int, int]] | None = []\n    def read(self) -> tuple[bytes, int, int]:\n        \"\"\"Fetch a new chunk. Returns header information.\"\"\"\n        cid = None\n        assert self.fp is not None\n        if self.queue:\n            cid, pos, length = self.queue.pop()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "iTXt",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class iTXt(str):\n    \"\"\"\n    Subclass of string to allow iTXt chunks to look like strings while\n    keeping their extra information\n    \"\"\"\n    lang: str | bytes | None\n    tkey: str | bytes | None\n    @staticmethod\n    def __new__(\n        cls, text: str, lang: str | None = None, tkey: str | None = None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "PngInfo",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class PngInfo:\n    \"\"\"\n    PNG chunk container (for use with save(pnginfo=))\n    \"\"\"\n    def __init__(self) -> None:\n        self.chunks: list[tuple[bytes, bytes, bool]] = []\n    def add(self, cid: bytes, data: bytes, after_idat: bool = False) -> None:\n        \"\"\"Appends an arbitrary chunk. Use with caution.\n        :param cid: a byte string, 4 bytes long.\n        :param data: a byte string of the encoded data",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_RewindState",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class _RewindState(NamedTuple):\n    info: dict[str | tuple[int, int], Any]\n    tile: list[ImageFile._Tile]\n    seq_num: int | None\nclass PngStream(ChunkStream):\n    def __init__(self, fp: IO[bytes]) -> None:\n        super().__init__(fp)\n        # local copies of Image attributes\n        self.im_info: dict[str | tuple[int, int], Any] = {}\n        self.im_text: dict[str, str | iTXt] = {}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "PngStream",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class PngStream(ChunkStream):\n    def __init__(self, fp: IO[bytes]) -> None:\n        super().__init__(fp)\n        # local copies of Image attributes\n        self.im_info: dict[str | tuple[int, int], Any] = {}\n        self.im_text: dict[str, str | iTXt] = {}\n        self.im_size = (0, 0)\n        self.im_mode = \"\"\n        self.im_tile: list[ImageFile._Tile] = []\n        self.im_palette: tuple[str, bytes] | None = None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "PngImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class PngImageFile(ImageFile.ImageFile):\n    format = \"PNG\"\n    format_description = \"Portable network graphics\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(8)):\n            msg = \"not a PNG file\"\n            raise SyntaxError(msg)\n        self._fp = self.fp\n        self.__frame = 0\n        #",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_idat",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class _idat:\n    # wrap output from the encoder in IDAT chunks\n    def __init__(self, fp: IO[bytes], chunk: Callable[..., None]) -> None:\n        self.fp = fp\n        self.chunk = chunk\n    def write(self, data: bytes) -> None:\n        self.chunk(self.fp, b\"IDAT\", data)\nclass _fdat:\n    # wrap encoder output in fdAT chunks\n    def __init__(self, fp: IO[bytes], chunk: Callable[..., None], seq_num: int) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_fdat",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class _fdat:\n    # wrap encoder output in fdAT chunks\n    def __init__(self, fp: IO[bytes], chunk: Callable[..., None], seq_num: int) -> None:\n        self.fp = fp\n        self.chunk = chunk\n        self.seq_num = seq_num\n    def write(self, data: bytes) -> None:\n        self.chunk(self.fp, b\"fdAT\", o32(self.seq_num), data)\n        self.seq_num += 1\nclass _Frame(NamedTuple):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_Frame",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "class _Frame(NamedTuple):\n    im: Image.Image\n    bbox: tuple[int, int, int, int] | None\n    encoderinfo: dict[str, Any]\ndef _write_multiple_frames(\n    im: Image.Image,\n    fp: IO[bytes],\n    chunk: Callable[..., None],\n    mode: str,\n    rawmode: str,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "putchunk",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "def putchunk(fp: IO[bytes], cid: bytes, *data: bytes) -> None:\n    \"\"\"Write a PNG chunk (including CRC field)\"\"\"\n    byte_data = b\"\".join(data)\n    fp.write(o32(len(byte_data)) + cid)\n    fp.write(byte_data)\n    crc = _crc32(byte_data, _crc32(cid))\n    fp.write(o32(crc))\nclass _idat:\n    # wrap output from the encoder in IDAT chunks\n    def __init__(self, fp: IO[bytes], chunk: Callable[..., None]) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "getchunks",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "def getchunks(im: Image.Image, **params: Any) -> list[tuple[bytes, bytes, bytes]]:\n    \"\"\"Return a list of PNG chunks representing this image.\"\"\"\n    from io import BytesIO\n    chunks = []\n    def append(fp: IO[bytes], cid: bytes, *data: bytes) -> None:\n        byte_data = b\"\".join(data)\n        crc = o32(_crc32(byte_data, _crc32(cid)))\n        chunks.append((cid, byte_data, crc))\n    fp = BytesIO()\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from . import _imaging\nlogger = logging.getLogger(__name__)\nis_cid = re.compile(rb\"\\w\\w\\w\\w\").match\n_MAGIC = b\"\\211PNG\\r\\n\\032\\n\"\n_MODES = {\n    # supported bits/color combinations, and corresponding modes/rawmodes\n    # Grayscale\n    (1, 0): (\"1\", \"1\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "logger = logging.getLogger(__name__)\nis_cid = re.compile(rb\"\\w\\w\\w\\w\").match\n_MAGIC = b\"\\211PNG\\r\\n\\032\\n\"\n_MODES = {\n    # supported bits/color combinations, and corresponding modes/rawmodes\n    # Grayscale\n    (1, 0): (\"1\", \"1\"),\n    (2, 0): (\"L\", \"L;2\"),\n    (4, 0): (\"L\", \"L;4\"),\n    (8, 0): (\"L\", \"L\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "is_cid",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "is_cid = re.compile(rb\"\\w\\w\\w\\w\").match\n_MAGIC = b\"\\211PNG\\r\\n\\032\\n\"\n_MODES = {\n    # supported bits/color combinations, and corresponding modes/rawmodes\n    # Grayscale\n    (1, 0): (\"1\", \"1\"),\n    (2, 0): (\"L\", \"L;2\"),\n    (4, 0): (\"L\", \"L;4\"),\n    (8, 0): (\"L\", \"L\"),\n    (16, 0): (\"I;16\", \"I;16B\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "_MAGIC = b\"\\211PNG\\r\\n\\032\\n\"\n_MODES = {\n    # supported bits/color combinations, and corresponding modes/rawmodes\n    # Grayscale\n    (1, 0): (\"1\", \"1\"),\n    (2, 0): (\"L\", \"L;2\"),\n    (4, 0): (\"L\", \"L;4\"),\n    (8, 0): (\"L\", \"L\"),\n    (16, 0): (\"I;16\", \"I;16B\"),\n    # Truecolour",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "_MODES = {\n    # supported bits/color combinations, and corresponding modes/rawmodes\n    # Grayscale\n    (1, 0): (\"1\", \"1\"),\n    (2, 0): (\"L\", \"L;2\"),\n    (4, 0): (\"L\", \"L;4\"),\n    (8, 0): (\"L\", \"L\"),\n    (16, 0): (\"I;16\", \"I;16B\"),\n    # Truecolour\n    (8, 2): (\"RGB\", \"RGB\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_simple_palette",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "_simple_palette = re.compile(b\"^\\xff*\\x00\\xff*$\")\nMAX_TEXT_CHUNK = ImageFile.SAFEBLOCK\n\"\"\"\nMaximum decompressed size for a iTXt or zTXt chunk.\nEliminates decompression bombs where compressed chunks can expand 1000x.\nSee :ref:`Text in PNG File Format<png-text>`.\n\"\"\"\nMAX_TEXT_MEMORY = 64 * MAX_TEXT_CHUNK\n\"\"\"\nSet the maximum total text chunk size.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAX_TEXT_CHUNK",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "MAX_TEXT_CHUNK = ImageFile.SAFEBLOCK\n\"\"\"\nMaximum decompressed size for a iTXt or zTXt chunk.\nEliminates decompression bombs where compressed chunks can expand 1000x.\nSee :ref:`Text in PNG File Format<png-text>`.\n\"\"\"\nMAX_TEXT_MEMORY = 64 * MAX_TEXT_CHUNK\n\"\"\"\nSet the maximum total text chunk size.\nSee :ref:`Text in PNG File Format<png-text>`.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAX_TEXT_MEMORY",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "MAX_TEXT_MEMORY = 64 * MAX_TEXT_CHUNK\n\"\"\"\nSet the maximum total text chunk size.\nSee :ref:`Text in PNG File Format<png-text>`.\n\"\"\"\n# APNG frame disposal modes\nclass Disposal(IntEnum):\n    OP_NONE = 0\n    \"\"\"\n    No disposal is done on this frame before rendering the next frame.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "_OUTMODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "peekOfCode": "_OUTMODES = {\n    # supported PIL modes, and corresponding rawmode, bit depth and color type\n    \"1\": (\"1\", b\"\\x01\", b\"\\x00\"),\n    \"L;1\": (\"L;1\", b\"\\x01\", b\"\\x00\"),\n    \"L;2\": (\"L;2\", b\"\\x02\", b\"\\x00\"),\n    \"L;4\": (\"L;4\", b\"\\x04\", b\"\\x00\"),\n    \"L\": (\"L\", b\"\\x08\", b\"\\x00\"),\n    \"LA\": (\"LA\", b\"\\x08\", b\"\\x04\"),\n    \"I\": (\"I;16B\", b\"\\x10\", b\"\\x00\"),\n    \"I;16\": (\"I;16B\", b\"\\x10\", b\"\\x00\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PngImagePlugin",
        "documentation": {}
    },
    {
        "label": "PpmImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "peekOfCode": "class PpmImageFile(ImageFile.ImageFile):\n    format = \"PPM\"\n    format_description = \"Pbmplus image\"\n    def _read_magic(self) -> bytes:\n        assert self.fp is not None\n        magic = b\"\"\n        # read until whitespace or longest available magic number\n        for _ in range(6):\n            c = self.fp.read(1)\n            if not c or c in b_whitespace:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "PpmPlainDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "peekOfCode": "class PpmPlainDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    _comment_spans: bool\n    def _read_block(self) -> bytes:\n        assert self.fd is not None\n        return self.fd.read(ImageFile.SAFEBLOCK)\n    def _find_comment_end(self, block: bytes, start: int = 0) -> int:\n        a = block.find(b\"\\n\", start)\n        b = block.find(b\"\\r\", start)\n        return min(a, b) if a * b > 0 else max(a, b)  # lowest nonnegative index (or -1)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "PpmDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "peekOfCode": "class PpmDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        data = bytearray()\n        maxval = self.args[-1]\n        in_byte_count = 1 if maxval < 256 else 2\n        out_byte_count = 4 if self.mode == \"I\" else 1\n        out_max = 65535 if self.mode == \"I\" else 255\n        bands = Image.getmodebands(self.mode)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "b_whitespace",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "peekOfCode": "b_whitespace = b\"\\x20\\x09\\x0a\\x0b\\x0c\\x0d\"\nMODES = {\n    # standard\n    b\"P1\": \"1\",\n    b\"P2\": \"L\",\n    b\"P3\": \"RGB\",\n    b\"P4\": \"1\",\n    b\"P5\": \"L\",\n    b\"P6\": \"RGB\",\n    # extensions",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "peekOfCode": "MODES = {\n    # standard\n    b\"P1\": \"1\",\n    b\"P2\": \"L\",\n    b\"P3\": \"RGB\",\n    b\"P4\": \"1\",\n    b\"P5\": \"L\",\n    b\"P6\": \"RGB\",\n    # extensions\n    b\"P0CMYK\": \"CMYK\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "PsdImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "peekOfCode": "class PsdImageFile(ImageFile.ImageFile):\n    format = \"PSD\"\n    format_description = \"Adobe Photoshop\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        read = self.fp.read\n        #\n        # header\n        s = read(26)\n        if not _accept(s) or i16(s, 4) != 1:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "peekOfCode": "MODES = {\n    # (photoshop mode, bits) -> (pil mode, required channels)\n    (0, 1): (\"1\", 1),\n    (0, 8): (\"L\", 1),\n    (1, 8): (\"L\", 1),\n    (2, 8): (\"P\", 1),\n    (3, 8): (\"RGB\", 3),\n    (4, 8): (\"CMYK\", 4),\n    (7, 8): (\"L\", 1),  # FIXME: multilayer\n    (8, 8): (\"L\", 1),  # duotone",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PsdImagePlugin",
        "documentation": {}
    },
    {
        "label": "PSDraw",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "peekOfCode": "class PSDraw:\n    \"\"\"\n    Sets up printing to the given file. If ``fp`` is omitted,\n    ``sys.stdout.buffer`` is assumed.\n    \"\"\"\n    def __init__(self, fp: IO[bytes] | None = None) -> None:\n        if not fp:\n            fp = sys.stdout.buffer\n        self.fp = fp\n    def begin_document(self, id: str | None = None) -> None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "peekOfCode": "TYPE_CHECKING = False\n##\n# Simple PostScript graphics interface.\nclass PSDraw:\n    \"\"\"\n    Sets up printing to the given file. If ``fp`` is omitted,\n    ``sys.stdout.buffer`` is assumed.\n    \"\"\"\n    def __init__(self, fp: IO[bytes] | None = None) -> None:\n        if not fp:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "documentation": {}
    },
    {
        "label": "EDROFF_PS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "peekOfCode": "EDROFF_PS = b\"\"\"\\\n/S { show } bind def\n/P { moveto show } bind def\n/M { moveto } bind def\n/X { 0 rmoveto } bind def\n/Y { 0 exch rmoveto } bind def\n/E {    findfont\n        dup maxlength dict begin\n        {\n                1 index /FID ne { def } { pop pop } ifelse",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "documentation": {}
    },
    {
        "label": "VDI_PS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "peekOfCode": "VDI_PS = b\"\"\"\\\n/Vm { moveto } bind def\n/Va { newpath arcn stroke } bind def\n/Vl { moveto lineto stroke } bind def\n/Vc { newpath 0 360 arc closepath } bind def\n/Vr {   exch dup 0 rlineto\n        exch dup 0 exch rlineto\n        exch neg 0 rlineto\n        0 exch neg rlineto\n        setgray fill } bind def",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "documentation": {}
    },
    {
        "label": "ERROR_PS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "peekOfCode": "ERROR_PS = b\"\"\"\\\n/landscape false def\n/errorBUF 200 string def\n/errorNL { currentpoint 10 sub exch pop 72 exch moveto } def\nerrordict begin /handleerror {\n    initmatrix /Courier findfont 10 scalefont setfont\n    newpath 72 720 moveto $error begin /newerror false def\n    (PostScript Error) show errorNL errorNL\n    (Error: ) show\n        /errorname load errorBUF cvs show errorNL errorNL",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.PSDraw",
        "documentation": {}
    },
    {
        "label": "QoiImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "peekOfCode": "class QoiImageFile(ImageFile.ImageFile):\n    format = \"QOI\"\n    format_description = \"Quite OK Image\"\n    def _open(self) -> None:\n        if not _accept(self.fp.read(4)):\n            msg = \"not a QOI file\"\n            raise SyntaxError(msg)\n        self._size = i32(self.fp.read(4)), i32(self.fp.read(4))\n        channels = self.fp.read(1)[0]\n        self._mode = \"RGB\" if channels == 3 else \"RGBA\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "documentation": {}
    },
    {
        "label": "QoiDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "peekOfCode": "class QoiDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    _previous_pixel: bytes | bytearray | None = None\n    _previously_seen_pixels: dict[int, bytes | bytearray] = {}\n    def _add_to_previous_pixels(self, value: bytes | bytearray) -> None:\n        self._previous_pixel = value\n        r, g, b, a = value\n        hash_value = (r * 3 + g * 5 + b * 7 + a * 11) % 64\n        self._previously_seen_pixels[hash_value] = value\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "documentation": {}
    },
    {
        "label": "QoiEncoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "peekOfCode": "class QoiEncoder(ImageFile.PyEncoder):\n    _pushes_fd = True\n    _previous_pixel: tuple[int, int, int, int] | None = None\n    _previously_seen_pixels: dict[int, tuple[int, int, int, int]] = {}\n    _run = 0\n    def _write_run(self) -> bytes:\n        data = o8(0b11000000 | (self._run - 1))  # QOI_OP_RUN\n        self._run = 0\n        return data\n    def _delta(self, left: int, right: int) -> int:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.QoiImagePlugin",
        "documentation": {}
    },
    {
        "label": "SgiImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "peekOfCode": "class SgiImageFile(ImageFile.ImageFile):\n    format = \"SGI\"\n    format_description = \"SGI Image File Format\"\n    def _open(self) -> None:\n        # HEAD\n        assert self.fp is not None\n        headlen = 512\n        s = self.fp.read(headlen)\n        if not _accept(s):\n            msg = \"Not an SGI image file\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "documentation": {}
    },
    {
        "label": "SGI16Decoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "peekOfCode": "class SGI16Decoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        assert self.im is not None\n        rawmode, stride, orientation = self.args\n        pagesize = self.state.xsize * self.state.ysize\n        zsize = len(self.mode)\n        self.fd.seek(512)\n        for band in range(zsize):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "peekOfCode": "MODES = {\n    (1, 1, 1): \"L\",\n    (1, 2, 1): \"L\",\n    (2, 1, 1): \"L;16B\",\n    (2, 2, 1): \"L;16B\",\n    (1, 3, 3): \"RGB\",\n    (2, 3, 3): \"RGB;16B\",\n    (1, 3, 4): \"RGBA\",\n    (2, 3, 4): \"RGBA;16B\",\n}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SgiImagePlugin",
        "documentation": {}
    },
    {
        "label": "SpiderImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "class SpiderImageFile(ImageFile.ImageFile):\n    format = \"SPIDER\"\n    format_description = \"Spider 2D image\"\n    _close_exclusive_fp_after_loading = False\n    def _open(self) -> None:\n        # check header\n        n = 27 * 4  # read 27 float values\n        f = self.fp.read(n)\n        try:\n            self.bigendian = 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "isInt",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "def isInt(f: Any) -> int:\n    try:\n        i = int(f)\n        if f - i == 0:\n            return 1\n        else:\n            return 0\n    except (ValueError, OverflowError):\n        return 0\niforms = [1, 3, -11, -12, -21, -22]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "isSpiderHeader",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "def isSpiderHeader(t: tuple[float, ...]) -> int:\n    h = (99,) + t  # add 1 value so can use spider header index start=1\n    # header values 1,2,5,12,13,22,23 should be integers\n    for i in [1, 2, 5, 12, 13, 22, 23]:\n        if not isInt(h[i]):\n            return 0\n    # check iform\n    iform = int(h[5])\n    if iform not in iforms:\n        return 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "isSpiderImage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "def isSpiderImage(filename: str) -> int:\n    with open(filename, \"rb\") as fp:\n        f = fp.read(92)  # read 23 * 4 bytes\n    t = struct.unpack(\">23f\", f)  # try big-endian first\n    hdrlen = isSpiderHeader(t)\n    if hdrlen == 0:\n        t = struct.unpack(\"<23f\", f)  # little-endian\n        hdrlen = isSpiderHeader(t)\n    return hdrlen\nclass SpiderImageFile(ImageFile.ImageFile):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "loadImageSeries",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "def loadImageSeries(filelist: list[str] | None = None) -> list[Image.Image] | None:\n    \"\"\"create a list of :py:class:`~PIL.Image.Image` objects for use in a montage\"\"\"\n    if filelist is None or len(filelist) < 1:\n        return None\n    byte_imgs = []\n    for img in filelist:\n        if not os.path.exists(img):\n            print(f\"unable to find {img}\")\n            continue\n        try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "makeSpiderHeader",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "def makeSpiderHeader(im: Image.Image) -> list[bytes]:\n    nsam, nrow = im.size\n    lenbyt = nsam * 4  # There are labrec records in the header\n    labrec = int(1024 / lenbyt)\n    if 1024 % lenbyt != 0:\n        labrec += 1\n    labbyt = labrec * lenbyt\n    nvalues = int(labbyt / 4)\n    if nvalues < 23:\n        return []",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "TYPE_CHECKING = False\ndef isInt(f: Any) -> int:\n    try:\n        i = int(f)\n        if f - i == 0:\n            return 1\n        else:\n            return 0\n    except (ValueError, OverflowError):\n        return 0",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "iforms",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "peekOfCode": "iforms = [1, 3, -11, -12, -21, -22]\n# There is no magic number to identify Spider files, so just check a\n# series of header locations to see if they have reasonable values.\n# Returns no. of bytes in the header, if it is a valid Spider header,\n# otherwise returns 0\ndef isSpiderHeader(t: tuple[float, ...]) -> int:\n    h = (99,) + t  # add 1 value so can use spider header index start=1\n    # header values 1,2,5,12,13,22,23 should be integers\n    for i in [1, 2, 5, 12, 13, 22, 23]:\n        if not isInt(h[i]):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SpiderImagePlugin",
        "documentation": {}
    },
    {
        "label": "SunImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SunImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SunImagePlugin",
        "peekOfCode": "class SunImageFile(ImageFile.ImageFile):\n    format = \"SUN\"\n    format_description = \"Sun Raster File\"\n    def _open(self) -> None:\n        # The Sun Raster file header is 32 bytes in length\n        # and has the following format:\n        #     typedef struct _SunRaster\n        #     {\n        #         DWORD MagicNumber;      /* Magic (identification) number */\n        #         DWORD Width;            /* Width of image in pixels */",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.SunImagePlugin",
        "documentation": {}
    },
    {
        "label": "TarIO",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TarIO",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TarIO",
        "peekOfCode": "class TarIO(ContainerIO.ContainerIO[bytes]):\n    \"\"\"A file object that provides read access to a given member of a TAR file.\"\"\"\n    def __init__(self, tarfile: str, file: str) -> None:\n        \"\"\"\n        Create file object.\n        :param tarfile: Name of TAR file.\n        :param file: Name of member file.\n        \"\"\"\n        self.fh = open(tarfile, \"rb\")\n        while True:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TarIO",
        "documentation": {}
    },
    {
        "label": "TgaImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "peekOfCode": "class TgaImageFile(ImageFile.ImageFile):\n    format = \"TGA\"\n    format_description = \"Targa\"\n    def _open(self) -> None:\n        # process header\n        assert self.fp is not None\n        s = self.fp.read(18)\n        id_len = s[0]\n        colormaptype = s[1]\n        imagetype = s[2]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "documentation": {}
    },
    {
        "label": "MODES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "peekOfCode": "MODES = {\n    # map imagetype/depth to rawmode\n    (1, 8): \"P\",\n    (3, 1): \"1\",\n    (3, 8): \"L\",\n    (3, 16): \"LA\",\n    (2, 16): \"BGRA;15Z\",\n    (2, 24): \"BGR\",\n    (2, 32): \"BGRA\",\n}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAVE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "peekOfCode": "SAVE = {\n    \"1\": (\"1\", 1, 0, 3),\n    \"L\": (\"L\", 8, 0, 3),\n    \"LA\": (\"LA\", 16, 0, 3),\n    \"P\": (\"P\", 8, 1, 1),\n    \"RGB\": (\"BGR\", 24, 0, 2),\n    \"RGBA\": (\"BGRA\", 32, 0, 2),\n}\ndef _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TgaImagePlugin",
        "documentation": {}
    },
    {
        "label": "IFDRational",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "class IFDRational(Rational):\n    \"\"\"Implements a rational class where 0/0 is a legal value to match\n    the in the wild use of exif rationals.\n    e.g., DigitalZoomRatio - 0.00/0.00  indicates that no digital zoom was used\n    \"\"\"\n    \"\"\" If the denominator is 0, store this as a float('nan'), otherwise store\n    as a fractions.Fraction(). Delegate as appropriate\n    \"\"\"\n    __slots__ = (\"_numerator\", \"_denominator\", \"_val\")\n    def __init__(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImageFileDirectory_v2",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "class ImageFileDirectory_v2(_IFDv2Base):\n    \"\"\"This class represents a TIFF tag directory.  To speed things up, we\n    don't decode tags unless they're asked for.\n    Exposes a dictionary interface of the tags in the directory::\n        ifd = ImageFileDirectory_v2()\n        ifd[key] = 'Some Data'\n        ifd.tagtype[key] = TiffTags.ASCII\n        print(ifd[key])\n        'Some Data'\n    Individual values are returned as the strings or numbers, sequences are",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImageFileDirectory_v1",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "class ImageFileDirectory_v1(ImageFileDirectory_v2):\n    \"\"\"This class represents the **legacy** interface to a TIFF tag directory.\n    Exposes a dictionary interface of the tags in the directory::\n        ifd = ImageFileDirectory_v1()\n        ifd[key] = 'Some Data'\n        ifd.tagtype[key] = TiffTags.ASCII\n        print(ifd[key])\n        ('Some Data',)\n    Also contains a dictionary of tag types as read from the tiff image file,\n    :attr:`~PIL.TiffImagePlugin.ImageFileDirectory_v1.tagtype`.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TiffImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "class TiffImageFile(ImageFile.ImageFile):\n    format = \"TIFF\"\n    format_description = \"Adobe TIFF\"\n    _close_exclusive_fp_after_loading = False\n    def __init__(\n        self,\n        fp: StrOrBytesPath | IO[bytes],\n        filename: str | bytes | None = None,\n    ) -> None:\n        self.tag_v2: ImageFileDirectory_v2",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "AppendingTiffWriter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "class AppendingTiffWriter(io.BytesIO):\n    fieldSizes = [\n        0,  # None\n        1,  # byte\n        1,  # ascii\n        2,  # short\n        4,  # long\n        8,  # rational\n        1,  # sbyte\n        1,  # undefined",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from ._typing import Buffer, IntegralLike\nlogger = logging.getLogger(__name__)\n# Set these to true to force use of libtiff for reading or writing.\nREAD_LIBTIFF = False\nWRITE_LIBTIFF = False\nSTRIP_SIZE = 65536\nII = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Set these to true to force use of libtiff for reading or writing.\nREAD_LIBTIFF = False\nWRITE_LIBTIFF = False\nSTRIP_SIZE = 65536\nII = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "READ_LIBTIFF",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "READ_LIBTIFF = False\nWRITE_LIBTIFF = False\nSTRIP_SIZE = 65536\nII = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files\n# a few tag names, just to make the code below a bit more readable\nOSUBFILETYPE = 255",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "WRITE_LIBTIFF",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "WRITE_LIBTIFF = False\nSTRIP_SIZE = 65536\nII = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files\n# a few tag names, just to make the code below a bit more readable\nOSUBFILETYPE = 255\nIMAGEWIDTH = 256",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "STRIP_SIZE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "STRIP_SIZE = 65536\nII = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files\n# a few tag names, just to make the code below a bit more readable\nOSUBFILETYPE = 255\nIMAGEWIDTH = 256\nIMAGELENGTH = 257",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "II",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "II = b\"II\"  # little-endian (Intel style)\nMM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files\n# a few tag names, just to make the code below a bit more readable\nOSUBFILETYPE = 255\nIMAGEWIDTH = 256\nIMAGELENGTH = 257\nBITSPERSAMPLE = 258",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "MM",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "MM = b\"MM\"  # big-endian (Motorola style)\n#\n# --------------------------------------------------------------------\n# Read TIFF files\n# a few tag names, just to make the code below a bit more readable\nOSUBFILETYPE = 255\nIMAGEWIDTH = 256\nIMAGELENGTH = 257\nBITSPERSAMPLE = 258\nCOMPRESSION = 259",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "OSUBFILETYPE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "OSUBFILETYPE = 255\nIMAGEWIDTH = 256\nIMAGELENGTH = 257\nBITSPERSAMPLE = 258\nCOMPRESSION = 259\nPHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IMAGEWIDTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IMAGEWIDTH = 256\nIMAGELENGTH = 257\nBITSPERSAMPLE = 258\nCOMPRESSION = 259\nPHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IMAGELENGTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IMAGELENGTH = 257\nBITSPERSAMPLE = 258\nCOMPRESSION = 259\nPHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "BITSPERSAMPLE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "BITSPERSAMPLE = 258\nCOMPRESSION = 259\nPHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "COMPRESSION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "COMPRESSION = 259\nPHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "PHOTOMETRIC_INTERPRETATION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "PHOTOMETRIC_INTERPRETATION = 262\nFILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "FILLORDER",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "FILLORDER = 266\nIMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IMAGEDESCRIPTION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IMAGEDESCRIPTION = 270\nSTRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "STRIPOFFSETS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "STRIPOFFSETS = 273\nSAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAMPLESPERPIXEL",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "SAMPLESPERPIXEL = 277\nROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ROWSPERSTRIP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ROWSPERSTRIP = 278\nSTRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "STRIPBYTECOUNTS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "STRIPBYTECOUNTS = 279\nX_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "X_RESOLUTION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "X_RESOLUTION = 282\nY_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "Y_RESOLUTION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "Y_RESOLUTION = 283\nPLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "PLANAR_CONFIGURATION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "PLANAR_CONFIGURATION = 284\nRESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "RESOLUTION_UNIT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "RESOLUTION_UNIT = 296\nTRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TRANSFERFUNCTION",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TRANSFERFUNCTION = 301\nSOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "SOFTWARE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "SOFTWARE = 305\nDATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "DATE_TIME",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "DATE_TIME = 306\nARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ARTIST",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ARTIST = 315\nPREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "PREDICTOR",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "PREDICTOR = 317\nCOLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "COLORMAP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "COLORMAP = 320\nTILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TILEWIDTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TILEWIDTH = 322\nTILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TILELENGTH",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TILELENGTH = 323\nTILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TILEOFFSETS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TILEOFFSETS = 324\nTILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "TILEBYTECOUNTS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "TILEBYTECOUNTS = 325\nSUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "SUBIFD",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "SUBIFD = 330\nEXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "EXTRASAMPLES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "EXTRASAMPLES = 338\nSAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAMPLEFORMAT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "SAMPLEFORMAT = 339\nJPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "JPEGTABLES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "JPEGTABLES = 347\nYCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "YCBCRSUBSAMPLING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "YCBCRSUBSAMPLING = 530\nREFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "REFERENCEBLACKWHITE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "REFERENCEBLACKWHITE = 532\nCOPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "COPYRIGHT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "COPYRIGHT = 33432\nIPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IPTC_NAA_CHUNK",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IPTC_NAA_CHUNK = 33723  # newsphoto properties\nPHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "PHOTOSHOP_CHUNK",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "PHOTOSHOP_CHUNK = 34377  # photoshop properties\nICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ICCPROFILE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ICCPROFILE = 34675\nEXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "EXIFIFD",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "EXIFIFD = 34665\nXMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "XMP",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "XMP = 700\nJPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",\n    3: \"group3\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "JPEGQUALITY",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "JPEGQUALITY = 65537  # pseudo-tag by libtiff\n# https://github.com/imagej/ImageJA/blob/master/src/main/java/ij/io/TiffDecoder.java\nIMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",\n    3: \"group3\",\n    4: \"group4\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IMAGEJ_META_DATA_BYTE_COUNTS",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IMAGEJ_META_DATA_BYTE_COUNTS = 50838\nIMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",\n    3: \"group3\",\n    4: \"group4\",\n    5: \"tiff_lzw\",\n    6: \"tiff_jpeg\",  # obsolete",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "IMAGEJ_META_DATA",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "IMAGEJ_META_DATA = 50839\nCOMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",\n    3: \"group3\",\n    4: \"group4\",\n    5: \"tiff_lzw\",\n    6: \"tiff_jpeg\",  # obsolete\n    7: \"jpeg\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "COMPRESSION_INFO",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "COMPRESSION_INFO = {\n    # Compression => pil compression name\n    1: \"raw\",\n    2: \"tiff_ccitt\",\n    3: \"group3\",\n    4: \"group4\",\n    5: \"tiff_lzw\",\n    6: \"tiff_jpeg\",  # obsolete\n    7: \"jpeg\",\n    8: \"tiff_adobe_deflate\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "COMPRESSION_INFO_REV",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "COMPRESSION_INFO_REV = {v: k for k, v in COMPRESSION_INFO.items()}\nOPEN_INFO = {\n    # (ByteOrder, PhotoInterpretation, SampleFormat, FillOrder, BitsPerSample,\n    #  ExtraSamples) => mode, rawmode\n    (II, 0, (1,), 1, (1,), ()): (\"1\", \"1;I\"),\n    (MM, 0, (1,), 1, (1,), ()): (\"1\", \"1;I\"),\n    (II, 0, (1,), 2, (1,), ()): (\"1\", \"1;IR\"),\n    (MM, 0, (1,), 2, (1,), ()): (\"1\", \"1;IR\"),\n    (II, 1, (1,), 1, (1,), ()): (\"1\", \"1\"),\n    (MM, 1, (1,), 1, (1,), ()): (\"1\", \"1\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "OPEN_INFO",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "OPEN_INFO = {\n    # (ByteOrder, PhotoInterpretation, SampleFormat, FillOrder, BitsPerSample,\n    #  ExtraSamples) => mode, rawmode\n    (II, 0, (1,), 1, (1,), ()): (\"1\", \"1;I\"),\n    (MM, 0, (1,), 1, (1,), ()): (\"1\", \"1;I\"),\n    (II, 0, (1,), 2, (1,), ()): (\"1\", \"1;IR\"),\n    (MM, 0, (1,), 2, (1,), ()): (\"1\", \"1;IR\"),\n    (II, 1, (1,), 1, (1,), ()): (\"1\", \"1\"),\n    (MM, 1, (1,), 1, (1,), ()): (\"1\", \"1\"),\n    (II, 1, (1,), 2, (1,), ()): (\"1\", \"1;R\"),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "MAX_SAMPLESPERPIXEL",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "MAX_SAMPLESPERPIXEL = max(len(key_tp[4]) for key_tp in OPEN_INFO)\nPREFIXES = [\n    b\"MM\\x00\\x2a\",  # Valid TIFF header with big-endian byte order\n    b\"II\\x2a\\x00\",  # Valid TIFF header with little-endian byte order\n    b\"MM\\x2a\\x00\",  # Invalid TIFF header, assume big-endian\n    b\"II\\x00\\x2a\",  # Invalid TIFF header, assume little-endian\n    b\"MM\\x00\\x2b\",  # BigTIFF with big-endian byte order\n    b\"II\\x2b\\x00\",  # BigTIFF with little-endian byte order\n]\nif not getattr(Image.core, \"libtiff_support_custom_tags\", True):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "PREFIXES",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "PREFIXES = [\n    b\"MM\\x00\\x2a\",  # Valid TIFF header with big-endian byte order\n    b\"II\\x2a\\x00\",  # Valid TIFF header with little-endian byte order\n    b\"MM\\x2a\\x00\",  # Invalid TIFF header, assume big-endian\n    b\"II\\x00\\x2a\",  # Invalid TIFF header, assume little-endian\n    b\"MM\\x00\\x2b\",  # BigTIFF with big-endian byte order\n    b\"II\\x2b\\x00\",  # BigTIFF with little-endian byte order\n]\nif not getattr(Image.core, \"libtiff_support_custom_tags\", True):\n    deprecate(\"Support for LibTIFF earlier than version 4\", 12)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "_load_dispatch",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "_load_dispatch = {}\n_write_dispatch = {}\ndef _delegate(op: str) -> Any:\n    def delegate(\n        self: IFDRational, *args: tuple[float, ...]\n    ) -> bool | float | Fraction:\n        return getattr(self._val, op)(*args)\n    return delegate\nclass IFDRational(Rational):\n    \"\"\"Implements a rational class where 0/0 is a legal value to match",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "_write_dispatch",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "_write_dispatch = {}\ndef _delegate(op: str) -> Any:\n    def delegate(\n        self: IFDRational, *args: tuple[float, ...]\n    ) -> bool | float | Fraction:\n        return getattr(self._val, op)(*args)\n    return delegate\nclass IFDRational(Rational):\n    \"\"\"Implements a rational class where 0/0 is a legal value to match\n    the in the wild use of exif rationals.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "_LoaderFunc",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "_LoaderFunc = Callable[[\"ImageFileDirectory_v2\", bytes, bool], Any]\ndef _register_loader(idx: int, size: int) -> Callable[[_LoaderFunc], _LoaderFunc]:\n    def decorator(func: _LoaderFunc) -> _LoaderFunc:\n        from .TiffTags import TYPES\n        if func.__name__.startswith(\"load_\"):\n            TYPES[idx] = func.__name__[5:].replace(\"_\", \" \")\n        _load_dispatch[idx] = size, func  # noqa: F821\n        return func\n    return decorator\ndef _register_writer(idx: int) -> Callable[[Callable[..., Any]], Callable[..., Any]]:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImageFileDirectory_v2._load_dispatch",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ImageFileDirectory_v2._load_dispatch = _load_dispatch\nImageFileDirectory_v2._write_dispatch = _write_dispatch\nfor idx, name in TYPES.items():\n    name = name.replace(\" \", \"_\")\n    setattr(ImageFileDirectory_v2, f\"load_{name}\", _load_dispatch[idx][1])\n    setattr(ImageFileDirectory_v2, f\"write_{name}\", _write_dispatch[idx])\ndel _load_dispatch, _write_dispatch, idx, name\n# Legacy ImageFileDirectory support.\nclass ImageFileDirectory_v1(ImageFileDirectory_v2):\n    \"\"\"This class represents the **legacy** interface to a TIFF tag directory.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImageFileDirectory_v2._write_dispatch",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ImageFileDirectory_v2._write_dispatch = _write_dispatch\nfor idx, name in TYPES.items():\n    name = name.replace(\" \", \"_\")\n    setattr(ImageFileDirectory_v2, f\"load_{name}\", _load_dispatch[idx][1])\n    setattr(ImageFileDirectory_v2, f\"write_{name}\", _write_dispatch[idx])\ndel _load_dispatch, _write_dispatch, idx, name\n# Legacy ImageFileDirectory support.\nclass ImageFileDirectory_v1(ImageFileDirectory_v2):\n    \"\"\"This class represents the **legacy** interface to a TIFF tag directory.\n    Exposes a dictionary interface of the tags in the directory::",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "ImageFileDirectory",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "ImageFileDirectory = ImageFileDirectory_v1\n##\n# Image plugin for TIFF files.\nclass TiffImageFile(ImageFile.ImageFile):\n    format = \"TIFF\"\n    format_description = \"Adobe TIFF\"\n    _close_exclusive_fp_after_loading = False\n    def __init__(\n        self,\n        fp: StrOrBytesPath | IO[bytes],",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "SAVE_INFO",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "peekOfCode": "SAVE_INFO = {\n    # mode => rawmode, byteorder, photometrics,\n    #           sampleformat, bitspersample, extra\n    \"1\": (\"1\", II, 1, 1, (1,), None),\n    \"L\": (\"L\", II, 1, 1, (8,), None),\n    \"LA\": (\"LA\", II, 1, 1, (8, 8), 2),\n    \"P\": (\"P\", II, 3, 1, (8,), None),\n    \"PA\": (\"PA\", II, 3, 1, (8, 8), 2),\n    \"I\": (\"I;32S\", II, 1, 2, (32,), None),\n    \"I;16\": (\"I;16\", II, 1, 1, (16,), None),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffImagePlugin",
        "documentation": {}
    },
    {
        "label": "_TagInfo",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "class _TagInfo(NamedTuple):\n    value: int | None\n    name: str\n    type: int | None\n    length: int | None\n    enum: dict[str, int]\nclass TagInfo(_TagInfo):\n    __slots__: list[str] = []\n    def __new__(\n        cls,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "TagInfo",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "class TagInfo(_TagInfo):\n    __slots__: list[str] = []\n    def __new__(\n        cls,\n        value: int | None = None,\n        name: str = \"unknown\",\n        type: int | None = None,\n        length: int | None = None,\n        enum: dict[str, int] | None = None,\n    ) -> TagInfo:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "def lookup(tag: int, group: int | None = None) -> TagInfo:\n    \"\"\"\n    :param tag: Integer tag number\n    :param group: Which :py:data:`~PIL.TiffTags.TAGS_V2_GROUPS` to look in\n    .. versionadded:: 8.3.0\n    :returns: Taginfo namedtuple, From the ``TAGS_V2`` info if possible,\n        otherwise just populating the value and name from ``TAGS``.\n        If the tag is not recognized, \"unknown\" is returned for the name\n    \"\"\"\n    if group is not None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "BYTE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "BYTE = 1\nASCII = 2\nSHORT = 3\nLONG = 4\nRATIONAL = 5\nSIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "ASCII",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "ASCII = 2\nSHORT = 3\nLONG = 4\nRATIONAL = 5\nSIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "SHORT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "SHORT = 3\nLONG = 4\nRATIONAL = 5\nSIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "LONG",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "LONG = 4\nRATIONAL = 5\nSIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "RATIONAL",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "RATIONAL = 5\nSIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "SIGNED_BYTE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "SIGNED_BYTE = 6\nUNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "UNDEFINED",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "UNDEFINED = 7\nSIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "SIGNED_SHORT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "SIGNED_SHORT = 8\nSIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "SIGNED_LONG",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "SIGNED_LONG = 9\nSIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "SIGNED_RATIONAL",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "SIGNED_RATIONAL = 10\nFLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),\n    257: (\"ImageLength\", LONG, 1),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "FLOAT",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "FLOAT = 11\nDOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),\n    257: (\"ImageLength\", LONG, 1),\n    258: (\"BitsPerSample\", SHORT, 0),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "DOUBLE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "DOUBLE = 12\nIFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),\n    257: (\"ImageLength\", LONG, 1),\n    258: (\"BitsPerSample\", SHORT, 0),\n    259: (",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "IFD",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "IFD = 13\nLONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),\n    257: (\"ImageLength\", LONG, 1),\n    258: (\"BitsPerSample\", SHORT, 0),\n    259: (\n        \"Compression\",",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "LONG8",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "LONG8 = 16\n_tags_v2: dict[int, tuple[str, int, int] | tuple[str, int, int, dict[str, int]]] = {\n    254: (\"NewSubfileType\", LONG, 1),\n    255: (\"SubfileType\", SHORT, 1),\n    256: (\"ImageWidth\", LONG, 1),\n    257: (\"ImageLength\", LONG, 1),\n    258: (\"BitsPerSample\", SHORT, 0),\n    259: (\n        \"Compression\",\n        SHORT,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "_tags_v2_groups",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "_tags_v2_groups = {\n    # ExifIFD\n    34665: {\n        36864: (\"ExifVersion\", UNDEFINED, 1),\n        40960: (\"FlashPixVersion\", UNDEFINED, 1),\n        40965: (\"InteroperabilityIFD\", LONG, 1),\n        41730: (\"CFAPattern\", UNDEFINED, 1),\n    },\n    # GPSInfoIFD\n    34853: {",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "LIBTIFF_CORE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "peekOfCode": "LIBTIFF_CORE = {\n    255,\n    256,\n    257,\n    258,\n    259,\n    262,\n    263,\n    266,\n    274,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.TiffTags",
        "documentation": {}
    },
    {
        "label": "WalImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "peekOfCode": "class WalImageFile(ImageFile.ImageFile):\n    format = \"WAL\"\n    format_description = \"Quake2 Texture\"\n    def _open(self) -> None:\n        self._mode = \"P\"\n        # read header fields\n        header = self.fp.read(32 + 24 + 32 + 12)\n        self._size = i32(header, 32), i32(header, 36)\n        Image._decompression_bomb_check(self.size)\n        # load pixel data",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "peekOfCode": "def open(filename: StrOrBytesPath | IO[bytes]) -> WalImageFile:\n    \"\"\"\n    Load texture from a Quake2 WAL texture file.\n    By default, a Quake2 standard palette is attached to the texture.\n    To override the palette, use the :py:func:`PIL.Image.Image.putpalette()` method.\n    :param filename: WAL file name, or an opened file handle.\n    :returns: An image instance.\n    \"\"\"\n    return WalImageFile(filename)\nquake2palette = (",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "documentation": {}
    },
    {
        "label": "quake2palette",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "peekOfCode": "quake2palette = (\n    # default palette taken from piffo 0.93 by Hans Häggström\n    b\"\\x01\\x01\\x01\\x0b\\x0b\\x0b\\x12\\x12\\x12\\x17\\x17\\x17\\x1b\\x1b\\x1b\\x1e\"\n    b\"\\x1e\\x1e\\x22\\x22\\x22\\x26\\x26\\x26\\x29\\x29\\x29\\x2c\\x2c\\x2c\\x2f\\x2f\"\n    b\"\\x2f\\x32\\x32\\x32\\x35\\x35\\x35\\x37\\x37\\x37\\x3a\\x3a\\x3a\\x3c\\x3c\\x3c\"\n    b\"\\x24\\x1e\\x13\\x22\\x1c\\x12\\x20\\x1b\\x12\\x1f\\x1a\\x10\\x1d\\x19\\x10\\x1b\"\n    b\"\\x17\\x0f\\x1a\\x16\\x0f\\x18\\x14\\x0d\\x17\\x13\\x0d\\x16\\x12\\x0d\\x14\\x10\"\n    b\"\\x0b\\x13\\x0f\\x0b\\x10\\x0d\\x0a\\x0f\\x0b\\x0a\\x0d\\x0b\\x07\\x0b\\x0a\\x07\"\n    b\"\\x23\\x23\\x26\\x22\\x22\\x25\\x22\\x20\\x23\\x21\\x1f\\x22\\x20\\x1e\\x20\\x1f\"\n    b\"\\x1d\\x1e\\x1d\\x1b\\x1c\\x1b\\x1a\\x1a\\x1a\\x19\\x19\\x18\\x17\\x17\\x17\\x16\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WalImageFile",
        "documentation": {}
    },
    {
        "label": "WebPImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "peekOfCode": "class WebPImageFile(ImageFile.ImageFile):\n    format = \"WEBP\"\n    format_description = \"WebP image\"\n    __loaded = 0\n    __logical_frame = 0\n    def _open(self) -> None:\n        # Use the newer AnimDecoder API to parse the (possibly) animated file,\n        # and access muxed chunks like ICC/EXIF/XMP.\n        self._decoder = _webp.WebPAnimDecoder(self.fp.read())\n        # Get info from decoder",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "documentation": {}
    },
    {
        "label": "_VP8_MODES_BY_IDENTIFIER",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "peekOfCode": "_VP8_MODES_BY_IDENTIFIER = {\n    b\"VP8 \": \"RGB\",\n    b\"VP8X\": \"RGBA\",\n    b\"VP8L\": \"RGBA\",  # lossless\n}\ndef _accept(prefix: bytes) -> bool | str:\n    is_riff_file_format = prefix.startswith(b\"RIFF\")\n    is_webp_file = prefix[8:12] == b\"WEBP\"\n    is_valid_vp8_mode = prefix[12:16] in _VP8_MODES_BY_IDENTIFIER\n    if is_riff_file_format and is_webp_file and is_valid_vp8_mode:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WebPImagePlugin",
        "documentation": {}
    },
    {
        "label": "WmfStubImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "peekOfCode": "class WmfStubImageFile(ImageFile.StubImageFile):\n    format = \"WMF\"\n    format_description = \"Windows Metafile\"\n    def _open(self) -> None:\n        # check placable header\n        s = self.fp.read(44)\n        if s.startswith(b\"\\xd7\\xcd\\xc6\\x9a\\x00\\x00\"):\n            # placeable windows metafile\n            # get units per inch\n            inch = word(s, 14)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "documentation": {}
    },
    {
        "label": "register_handler",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "peekOfCode": "def register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific WMF image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\nif hasattr(Image.core, \"drawwmf\"):\n    # install default handler (windows only)\n    class WmfHandler(ImageFile.StubHandler):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "documentation": {}
    },
    {
        "label": "_handler",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "peekOfCode": "_handler = None\ndef register_handler(handler: ImageFile.StubHandler | None) -> None:\n    \"\"\"\n    Install application-specific WMF image handler.\n    :param handler: Handler object.\n    \"\"\"\n    global _handler\n    _handler = handler\nif hasattr(Image.core, \"drawwmf\"):\n    # install default handler (windows only)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.WmfImagePlugin",
        "documentation": {}
    },
    {
        "label": "XbmImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "peekOfCode": "class XbmImageFile(ImageFile.ImageFile):\n    format = \"XBM\"\n    format_description = \"X11 Bitmap\"\n    def _open(self) -> None:\n        assert self.fp is not None\n        m = xbm_head.match(self.fp.read(512))\n        if not m:\n            msg = \"not a XBM file\"\n            raise SyntaxError(msg)\n        xsize = int(m.group(\"width\"))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "documentation": {}
    },
    {
        "label": "xbm_head",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "peekOfCode": "xbm_head = re.compile(\n    rb\"\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+\"\n    b\"#define[ \\t]+.*_height[ \\t]+(?P<height>[0-9]+)[\\r\\n]+\"\n    b\"(?P<hotspot>\"\n    b\"#define[ \\t]+[^_]*_x_hot[ \\t]+(?P<xhot>[0-9]+)[\\r\\n]+\"\n    b\"#define[ \\t]+[^_]*_y_hot[ \\t]+(?P<yhot>[0-9]+)[\\r\\n]+\"\n    b\")?\"\n    rb\"[\\000-\\377]*_bits\\[]\"\n)\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XbmImagePlugin",
        "documentation": {}
    },
    {
        "label": "XpmImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "peekOfCode": "class XpmImageFile(ImageFile.ImageFile):\n    format = \"XPM\"\n    format_description = \"X11 Pixel Map\"\n    def _open(self) -> None:\n        assert self.fp is not None\n        if not _accept(self.fp.read(9)):\n            msg = \"not an XPM file\"\n            raise SyntaxError(msg)\n        # skip forward to next string\n        while True:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "XpmDecoder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "peekOfCode": "class XpmDecoder(ImageFile.PyDecoder):\n    _pulls_fd = True\n    def decode(self, buffer: bytes | Image.SupportsArrayInterface) -> tuple[int, int]:\n        assert self.fd is not None\n        data = bytearray()\n        bpp, palette = self.args\n        dest_length = self.state.xsize * self.state.ysize\n        if self.mode == \"RGB\":\n            dest_length *= 3\n        pixel_header = False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "xpm_head",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "peekOfCode": "xpm_head = re.compile(b'\"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)')\ndef _accept(prefix: bytes) -> bool:\n    return prefix.startswith(b\"/* XPM */\")\n##\n# Image plugin for X11 pixel maps.\nclass XpmImageFile(ImageFile.ImageFile):\n    format = \"XPM\"\n    format_description = \"X11 Pixel Map\"\n    def _open(self) -> None:\n        assert self.fp is not None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XpmImagePlugin",
        "documentation": {}
    },
    {
        "label": "XVThumbImageFile",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "peekOfCode": "class XVThumbImageFile(ImageFile.ImageFile):\n    format = \"XVThumb\"\n    format_description = \"XV thumbnail image\"\n    def _open(self) -> None:\n        # check magic\n        assert self.fp is not None\n        if not _accept(self.fp.read(6)):\n            msg = \"not an XV thumbnail file\"\n            raise SyntaxError(msg)\n        # Skip to beginning of next line",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "documentation": {}
    },
    {
        "label": "_MAGIC",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "peekOfCode": "_MAGIC = b\"P7 332\"\n# standard color palette for thumbnails (RGB332)\nPALETTE = b\"\"\nfor r in range(8):\n    for g in range(8):\n        for b in range(4):\n            PALETTE = PALETTE + (\n                o8((r * 255) // 7) + o8((g * 255) // 7) + o8((b * 255) // 3)\n            )\ndef _accept(prefix: bytes) -> bool:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "documentation": {}
    },
    {
        "label": "PALETTE",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "peekOfCode": "PALETTE = b\"\"\nfor r in range(8):\n    for g in range(8):\n        for b in range(4):\n            PALETTE = PALETTE + (\n                o8((r * 255) // 7) + o8((g * 255) // 7) + o8((b * 255) // 3)\n            )\ndef _accept(prefix: bytes) -> bool:\n    return prefix.startswith(_MAGIC)\n##",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL.XVThumbImagePlugin",
        "documentation": {}
    },
    {
        "label": "i8",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def i8(c: bytes) -> int:\n    return c[0]\ndef o8(i: int) -> bytes:\n    return bytes((i & 255,))\n# Input, le = little endian, be = big endian\ndef i16le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to an unsigned integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "o8",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def o8(i: int) -> bytes:\n    return bytes((i & 255,))\n# Input, le = little endian, be = big endian\ndef i16le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to an unsigned integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\"<H\", c, o)[0]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "i16le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def i16le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to an unsigned integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\"<H\", c, o)[0]\ndef si16le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to a signed integer.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "si16le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def si16le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to a signed integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\"<h\", c, o)[0]\ndef si16be(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to a signed integer, big endian.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "si16be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def si16be(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 2-bytes (16 bits) string to a signed integer, big endian.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\">h\", c, o)[0]\ndef i32le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to an unsigned integer.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "i32le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def i32le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to an unsigned integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\"<I\", c, o)[0]\ndef si32le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to a signed integer.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "si32le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def si32le(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to a signed integer.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\"<i\", c, o)[0]\ndef si32be(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to a signed integer, big endian.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "si32be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def si32be(c: bytes, o: int = 0) -> int:\n    \"\"\"\n    Converts a 4-bytes (32 bits) string to a signed integer, big endian.\n    :param c: string containing bytes to convert\n    :param o: offset of bytes to convert in string\n    \"\"\"\n    return unpack_from(\">i\", c, o)[0]\ndef i16be(c: bytes, o: int = 0) -> int:\n    return unpack_from(\">H\", c, o)[0]\ndef i32be(c: bytes, o: int = 0) -> int:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "i16be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def i16be(c: bytes, o: int = 0) -> int:\n    return unpack_from(\">H\", c, o)[0]\ndef i32be(c: bytes, o: int = 0) -> int:\n    return unpack_from(\">I\", c, o)[0]\n# Output, le = little endian, be = big endian\ndef o16le(i: int) -> bytes:\n    return pack(\"<H\", i)\ndef o32le(i: int) -> bytes:\n    return pack(\"<I\", i)\ndef o16be(i: int) -> bytes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "i32be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def i32be(c: bytes, o: int = 0) -> int:\n    return unpack_from(\">I\", c, o)[0]\n# Output, le = little endian, be = big endian\ndef o16le(i: int) -> bytes:\n    return pack(\"<H\", i)\ndef o32le(i: int) -> bytes:\n    return pack(\"<I\", i)\ndef o16be(i: int) -> bytes:\n    return pack(\">H\", i)\ndef o32be(i: int) -> bytes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "o16le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def o16le(i: int) -> bytes:\n    return pack(\"<H\", i)\ndef o32le(i: int) -> bytes:\n    return pack(\"<I\", i)\ndef o16be(i: int) -> bytes:\n    return pack(\">H\", i)\ndef o32be(i: int) -> bytes:\n    return pack(\">I\", i)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "o32le",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def o32le(i: int) -> bytes:\n    return pack(\"<I\", i)\ndef o16be(i: int) -> bytes:\n    return pack(\">H\", i)\ndef o32be(i: int) -> bytes:\n    return pack(\">I\", i)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "o16be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def o16be(i: int) -> bytes:\n    return pack(\">H\", i)\ndef o32be(i: int) -> bytes:\n    return pack(\">I\", i)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "o32be",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "peekOfCode": "def o32be(i: int) -> bytes:\n    return pack(\">I\", i)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._binary",
        "documentation": {}
    },
    {
        "label": "deprecate",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._deprecate",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._deprecate",
        "peekOfCode": "def deprecate(\n    deprecated: str,\n    when: int | None,\n    replacement: str | None = None,\n    *,\n    action: str | None = None,\n    plural: bool = False,\n    stacklevel: int = 3,\n) -> None:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._deprecate",
        "documentation": {}
    },
    {
        "label": "tk",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "peekOfCode": "tk = getattr(tkinter, \"_tkinter\")\ntry:\n    if hasattr(sys, \"pypy_find_executable\"):\n        TKINTER_LIB = tk.tklib_cffi.__file__\n    else:\n        TKINTER_LIB = tk.__file__\nexcept AttributeError:\n    # _tkinter may be compiled directly into Python, in which case __file__ is\n    # not available. load_tkinter_funcs will check the binary first in any case.\n    TKINTER_LIB = None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "documentation": {}
    },
    {
        "label": "tk_version",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "peekOfCode": "tk_version = str(tkinter.TkVersion)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._tkinter_finder",
        "documentation": {}
    },
    {
        "label": "SupportsRead",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "class SupportsRead(Protocol[_T_co]):\n    def read(self, length: int = ..., /) -> _T_co: ...\nStrOrBytesPath = Union[str, bytes, os.PathLike[str], os.PathLike[bytes]]\n__all__ = [\"Buffer\", \"IntegralLike\", \"StrOrBytesPath\", \"SupportsRead\", \"TypeGuard\"]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from numbers import _IntegralLike as IntegralLike\n    try:\n        import numpy.typing as npt\n        NumpyArray = npt.NDArray[Any]  # requires numpy>=1.21\n    except (ImportError, AttributeError):\n        pass\nif sys.version_info >= (3, 13):\n    from types import CapsuleType",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "Coords",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "Coords = Union[Sequence[float], Sequence[Sequence[float]]]\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, length: int = ..., /) -> _T_co: ...\nStrOrBytesPath = Union[str, bytes, os.PathLike[str], os.PathLike[bytes]]\n__all__ = [\"Buffer\", \"IntegralLike\", \"StrOrBytesPath\", \"SupportsRead\", \"TypeGuard\"]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, length: int = ..., /) -> _T_co: ...\nStrOrBytesPath = Union[str, bytes, os.PathLike[str], os.PathLike[bytes]]\n__all__ = [\"Buffer\", \"IntegralLike\", \"StrOrBytesPath\", \"SupportsRead\", \"TypeGuard\"]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "StrOrBytesPath",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "StrOrBytesPath = Union[str, bytes, os.PathLike[str], os.PathLike[bytes]]\n__all__ = [\"Buffer\", \"IntegralLike\", \"StrOrBytesPath\", \"SupportsRead\", \"TypeGuard\"]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "peekOfCode": "__all__ = [\"Buffer\", \"IntegralLike\", \"StrOrBytesPath\", \"SupportsRead\", \"TypeGuard\"]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._typing",
        "documentation": {}
    },
    {
        "label": "DeferredError",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "peekOfCode": "class DeferredError:\n    def __init__(self, ex: BaseException):\n        self.ex = ex\n    def __getattr__(self, elt: str) -> NoReturn:\n        raise self.ex\n    @staticmethod\n    def new(ex: BaseException) -> Any:\n        \"\"\"\n        Creates an object that raises the wrapped exception ``ex`` when used,\n        and casts it to :py:obj:`~typing.Any` type.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "documentation": {}
    },
    {
        "label": "is_path",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "peekOfCode": "def is_path(f: Any) -> TypeGuard[StrOrBytesPath]:\n    return isinstance(f, (bytes, str, os.PathLike))\nclass DeferredError:\n    def __init__(self, ex: BaseException):\n        self.ex = ex\n    def __getattr__(self, elt: str) -> NoReturn:\n        raise self.ex\n    @staticmethod\n    def new(ex: BaseException) -> Any:\n        \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._util",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.PIL._version",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.PIL._version",
        "peekOfCode": "__version__ = \"11.3.0\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.PIL._version",
        "documentation": {}
    },
    {
        "label": "ClassList",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.classlist",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.classlist",
        "peekOfCode": "class ClassList:\n    def __init__(self, element, classes=None):\n        self.__element = element\n        if classes:\n            classes = ' '.join(classes)\n            self.__element._window.evaluate_js(f\"{self.__element._query_command}; element.className = '{classes}'\")\n    def append(self, cls):\n        self.__element._window.run_js(f\"{self.__element._query_command}; element.classList.add('{cls}')\")\n    def remove(self, cls):\n        self.__element._window.run_js(f\"{self.__element._query_command}; element.classList.remove('{cls}')\")",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.classlist",
        "documentation": {}
    },
    {
        "label": "DOM",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.dom",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.dom",
        "peekOfCode": "class DOM:\n    _serializable = False\n    def __init__(self, window):\n        self.__window = window\n        window.events.loaded += self.__on_loaded\n        self._elements = {}\n    def __on_loaded(self):\n        self._elements = {}\n    @property\n    def body(self) -> Element:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.dom",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "peekOfCode": "class Element:\n    def __init__(self, window, node_id) -> None:\n        self._window = window\n        self.events = EventContainer()\n        self._node_id = node_id\n        self._query_command = rf\"\"\"\n            var element;\n            if ('{self._node_id}' === 'document') {{\n                element = document;\n            }} else if ('{self._node_id}' === 'window') {{",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "peekOfCode": "logger = logging.getLogger('pywebview')\ndef _ignore_window_document(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        if args[0]._node_id in ('window', 'document'):\n            return None\n        return func(*args, **kwargs)\n    return wrapper\ndef _exists(func):\n    @wraps(func)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.element",
        "documentation": {}
    },
    {
        "label": "DOMEvent",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "peekOfCode": "class DOMEvent:\n    def __init__(self, event, element: Element) -> None:\n        self.event = event\n        self.__element = element\n        self._items: list[Callable[..., Any]] = []\n    def __add__(self, item: Callable[..., Any]) -> Self:\n        self._items.append(item)\n        self.__element.on(self.event, item)\n        return self\n    def __sub__(self, item: Callable[..., Any]) -> Self:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "peekOfCode": "logger = logging.getLogger(__file__)\nclass DOMEvent:\n    def __init__(self, event, element: Element) -> None:\n        self.event = event\n        self.__element = element\n        self._items: list[Callable[..., Any]] = []\n    def __add__(self, item: Callable[..., Any]) -> Self:\n        self._items.append(item)\n        self.__element.on(self.event, item)\n        return self",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.event",
        "documentation": {}
    },
    {
        "label": "DOMPropType",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "peekOfCode": "class DOMPropType(Enum):\n    Style = 1\n    Attribute = 2\nclass PropsDict:\n    def __init__(self, element, type: DOMPropType, props: Optional[Dict[str, Any]] = None):\n        self.__element = element\n        self.__type = type\n        if not props:\n            return\n        if type == DOMPropType.Style:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "documentation": {}
    },
    {
        "label": "PropsDict",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "peekOfCode": "class PropsDict:\n    def __init__(self, element, type: DOMPropType, props: Optional[Dict[str, Any]] = None):\n        self.__element = element\n        self.__type = type\n        if not props:\n            return\n        if type == DOMPropType.Style:\n            converted_style = json.dumps({css_to_camel(key): value for key, value in props.items()})\n            self.__element._window.evaluate_js(f\"\"\"\n                {self.__element._query_command};",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.dom.propsdict",
        "documentation": {}
    },
    {
        "label": "AlertDialogBuilder",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "peekOfCode": "class AlertDialogBuilder(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a builder for creating AlertDialog instances in the Android platform.\n    This class provides a fluent API for constructing and customizing AlertDialog instances\n    with various settings such as title, message, icon, buttons, custom views, and other\n    behavioral options. It serves as a wrapper around the native Java AlertDialog.Builder\n    implementation, enabling its usage within Python applications interfacing with Android.\n    Attributes:\n        __javaclass__ (str): Specifies the Java class represented by this Python class.\n        __javaconstructor__ (list): Defines available constructors in the underlying Java class.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "documentation": {}
    },
    {
        "label": "DownloadManagerRequest",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "peekOfCode": "class DownloadManagerRequest(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a request for downloading a file, providing methods to configure\n    download behavior and properties. This class is a part of the Android Download\n    Manager system, enabling developers to easily handle file downloads in\n    background.\n    The DownloadManagerRequest class allows setting various options for a download\n    request, including destination, network restrictions, visibility, and more. It is\n    designed to be used as a configuration object passed to the DownloadManager\n    to initiate a download task.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "peekOfCode": "__all__ = ('AlertDialogBuilder', 'DownloadManagerRequest')\nfrom jnius import JavaClass, MetaJavaClass, JavaMultipleMethod, JavaMethod, JavaStaticField\nclass AlertDialogBuilder(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a builder for creating AlertDialog instances in the Android platform.\n    This class provides a fluent API for constructing and customizing AlertDialog instances\n    with various settings such as title, message, icon, buttons, custom views, and other\n    behavioral options. It serves as a wrapper around the native Java AlertDialog.Builder\n    implementation, enabling its usage within Python applications interfacing with Android.\n    Attributes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.app",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "peekOfCode": "class Context(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents the Android Context Java class providing access to application-specific\n    resources and services.\n    This class serves as a bridge to interact with the Android framework and various\n    system services provided by the Android operating system. It holds functionality\n    for accessing application environments, managing resources, and invoking system:\n    defined services.\n    Attributes:\n        __javaclass__ (str): The fully qualified Java class name representation of the Context class.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "peekOfCode": "__all__ = ('Context',)\nfrom jnius import JavaClass, MetaJavaClass, JavaStaticField\nclass Context(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents the Android Context Java class providing access to application-specific\n    resources and services.\n    This class serves as a bridge to interact with the Android framework and various\n    system services provided by the Android operating system. It holds functionality\n    for accessing application environments, managing resources, and invoking system:\n    defined services.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.content",
        "documentation": {}
    },
    {
        "label": "Uri",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "peekOfCode": "class Uri(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a URI reference as defined in RFC 2396, composed of components such as\n    scheme, authority, path, query, and fragment.\n    The Uri class provides methods to work with uniform resource identifiers (URI). It\n    facilitates parsing, retrieving specific parts of the URI, and performing a variety\n    of URI-related manipulations. Typically used in Android development for handling\n    URI-based resources.\n    Attributes:\n        __javaclass__ : str",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "peekOfCode": "__all__ = ('Uri',)\nfrom jnius import JavaClass, MetaJavaClass, JavaMethod, JavaStaticMethod\nclass Uri(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a URI reference as defined in RFC 2396, composed of components such as\n    scheme, authority, path, query, and fragment.\n    The Uri class provides methods to work with uniform resource identifiers (URI). It\n    facilitates parsing, retrieving specific parts of the URI, and performing a variety\n    of URI-related manipulations. Typically used in Android development for handling\n    URI-based resources.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.net",
        "documentation": {}
    },
    {
        "label": "Environment",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "peekOfCode": "class Environment(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents the Android environment class for interacting with the external storage and system paths.\n    This class provides access to system-defined constants and methods for\n    interacting with the device's file and directory management environment.\n    Acts as a proxy to the Android's Java environment class. Use its attributes\n    and methods to access critical file paths or configurations within the\n    Android operating system.\n    Attributes:\n        __javaclass__ (str): Represents the Java class path being bridged.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "peekOfCode": "__all__ = ('Environment',)\nfrom jnius import JavaClass, MetaJavaClass, JavaStaticField\nclass Environment(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents the Android environment class for interacting with the external storage and system paths.\n    This class provides access to system-defined constants and methods for\n    interacting with the device's file and directory management environment.\n    Acts as a proxy to the Android's Java environment class. Use its attributes\n    and methods to access critical file paths or configurations within the\n    Android operating system.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.os",
        "documentation": {}
    },
    {
        "label": "View",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "peekOfCode": "class View(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents an Android view class with constants for system UI visibility flags.\n    Provides direct references to various system UI visibility constants, which\n    are used to control the appearance of the system user interface elements\n    such as the status bar, navigation bar, and fullscreen modes. This class\n    serves as a bridge to work with Java's Android View API in Python through\n    a metaclass-based approach.\n    Attributes\n    ----------",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "documentation": {}
    },
    {
        "label": "KeyEvent",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "peekOfCode": "class KeyEvent(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a wrapper for the Android KeyEvent class.\n    This class serves as a Python representation of the Android KeyEvent Java class, providing access\n    to Java static fields, and facilitating interaction with Android key event constants and properties.\n    Attributes:\n    KEYCODE_BACK : int\n        Static field representing the key code for the \"Back\" button in Android.\n    \"\"\"\n    __javaclass__ = 'android/view/KeyEvent'",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "documentation": {}
    },
    {
        "label": "Choreographer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "peekOfCode": "class Choreographer(JavaClass, metaclass=MetaJavaClass):\n    __javaclass__ = 'android/view/Choreographer'\n    getInstance = JavaStaticMethod('()Landroid/view/Choreographer;')\n    postFrameCallback = JavaMethod('(Landroid/view/Choreographer$FrameCallback;)V')\n    removeFrameCallback = JavaMethod('(Landroid/view/Choreographer$FrameCallback;)V')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "peekOfCode": "__all__ = ('View', 'KeyEvent', 'Choreographer')\nfrom jnius import JavaClass, MetaJavaClass, JavaStaticField, JavaMethod, JavaMultipleMethod, JavaStaticMethod\nclass View(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents an Android view class with constants for system UI visibility flags.\n    Provides direct references to various system UI visibility constants, which\n    are used to control the appearance of the system user interface elements\n    such as the status bar, navigation bar, and fullscreen modes. This class\n    serves as a bridge to work with Java's Android View API in Python through\n    a metaclass-based approach.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.view",
        "documentation": {}
    },
    {
        "label": "PyWebViewClient",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "class PyWebViewClient(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a Java WebView client wrapper for interaction with Python.\n    This class serves as a bridge between a Java WebView client in the Android\n    platform and Python. It allows setting callbacks for events and intercepting\n    requests, enabling Python code to handle Java WebView behaviors dynamically.\n    Attributes:\n        __javaclass__: str\n            The fully qualified Java class name for the associated Java object.\n    Methods:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "PyWebChromeClient",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "class PyWebChromeClient(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Handles communication with the WebView's JavaScript environment.\n    The PyWebChromeClient class acts as a bridge between JavaScript running in a WebView\n    and the Python environment. By defining methods that handle JavaScript interactions,\n    such as alert dialogs and confirmation dialogs, this class provides mechanisms\n    to integrate JavaScript behaviors into Python-based applications.\n    Attributes:\n        __javaclass__: The fully qualified class name of the Java class that this Python\n                       bridge wraps for interaction.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "PyJavascriptInterface",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "class PyJavascriptInterface(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Interface that acts as a bridge between Python and the JavaScript context.\n    This class provides methods to set a callback and to handle JavaScript\n    calls by interfacing with the Java-based functionality. It enables\n    interactions between Python code and JavaScript running on a web view or\n    similar component by defining Java methods that can be invoked from\n    JavaScript.\n    Attributes:\n        __javaclass__ (str): Represents the Java class path of the associated",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "CookieManager",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "class CookieManager(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Manages browser cookies for the WebView component and provides methods for\n    cookie handling.\n    The CookieManager class offers a variety of methods to control HTTP cookie\n    management within a WebView environment. Using this class, you can query,\n    set, accept, and delete cookies, as well as enable or disable the acceptance\n    of third-party or file-scheme cookies. Cookie management features are essential\n    for maintaining session persistence and enforcing privacy policies in web views\n    embedded within Android applications.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "WebView",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "class WebView(JavaClass, metaclass=MetaJavaClass):\n    __javaclass__ = 'android/webkit/WebView'\n    __javaconstructor__ = [\n        ('(Landroid/content/Context;)V', False),\n        ('(Landroid/content/Context;Landroid/util/AttributeSet;)V', False),\n        ('(Landroid/content/Context;Landroid/util/AttributeSet;I)V', False),\n        ('(Landroid/content/Context;Landroid/util/AttributeSet;II)V', False),\n        ('(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V', False)\n    ]\n    RENDERER_PRIORITY_BOUND = JavaStaticField('I')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "peekOfCode": "__all__ = ('PyWebViewClient', 'PyWebChromeClient', 'PyJavascriptInterface', 'CookieManager', 'WebView')\nfrom jnius import JavaClass, MetaJavaClass, JavaMethod, JavaStaticMethod, JavaMultipleMethod, JavaStaticField\nclass PyWebViewClient(JavaClass, metaclass=MetaJavaClass):\n    \"\"\"\n    Represents a Java WebView client wrapper for interaction with Python.\n    This class serves as a bridge between a Java WebView client in the Android\n    platform and Python. It allows setting callbacks for events and intercepting\n    requests, enabling Python code to handle Java WebView behaviors dynamically.\n    Attributes:\n        __javaclass__: str",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jclass.webkit",
        "documentation": {}
    },
    {
        "label": "EventCallbackWrapper",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "peekOfCode": "class EventCallbackWrapper(PythonJavaClass):\n    \"\"\"\n    Represents a wrapper for event callbacks between Python and Java.\n    This class enables interaction between Python and Java by implementing\n    a Java interface and providing a callback mechanism. The purpose is to\n    allow Python to respond to events triggered from the Java side by\n    passing the event and related data.\n    Attributes:\n    callback (Callable[[str, str], None]): A callable function that handles\n    an event and its associated data.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "documentation": {}
    },
    {
        "label": "JsApiCallbackWrapper",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "peekOfCode": "class JsApiCallbackWrapper(PythonJavaClass):\n    \"\"\"\n    Wrapper class for JavaScript API callbacks.\n    This class serves as a bridge between a Python application and a Java\n    environment, enabling communication through JavaScript API callback functionality.\n    It implements the `JsApiCallbackWrapper` interface and is designed specifically\n    for use with webview integration.\n    Attributes:\n    callback (Callable): A Python callable that gets executed when the callback\n    method is triggered. The callable should accept three arguments.",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "documentation": {}
    },
    {
        "label": "RequestInterceptor",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "peekOfCode": "class RequestInterceptor(PythonJavaClass):\n    \"\"\"\n    Represents a class for intercepting web view requests and responses.\n    This class provides a mechanism to handle events during web view\n    requests and responses by allowing custom callback functions to be\n    invoked. It acts as a bridge between Python and Java for facilitating\n    interception of web-related actions within a web view environment.\n    Attributes:\n        on_request (Callable[[str, str, str], str]): Callback function that gets\n            invoked when a web request is intercepted. The callback function should",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "peekOfCode": "__all__ = ('EventCallbackWrapper', 'JsApiCallbackWrapper', 'RequestInterceptor')\nfrom jnius import PythonJavaClass, java_method\nclass EventCallbackWrapper(PythonJavaClass):\n    \"\"\"\n    Represents a wrapper for event callbacks between Python and Java.\n    This class enables interaction between Python and Java by implementing\n    a Java interface and providing a callback mechanism. The purpose is to\n    allow Python to respond to events triggered from the Java side by\n    passing the event and related data.\n    Attributes:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.pywebview",
        "documentation": {}
    },
    {
        "label": "KeyListener",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "peekOfCode": "class KeyListener(PythonJavaClass):\n    \"\"\"\n    Represents a Python implementation of an Android `OnKeyListener`.\n    This class provides an interface for handling key events in an Android environment\n    using Python. It acts as a bridge between Python and the Android KeyListener\n    interface. The primary purpose is to allow the execution of a Python function\n    each time a key event is triggered.\n    The class is structured to integrate with the Java ecosystem and is instantiated\n    with a listener function defined in Python. This function enables the handling of\n    key events by passing relevant details to it, empowering flexible event handling",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "documentation": {}
    },
    {
        "label": "FrameCallback",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "peekOfCode": "class FrameCallback(PythonJavaClass):\n    __javacontext__ = 'app'\n    __javainterfaces__ = ['android/view/Choreographer$FrameCallback']\n    def __init__(self, do_frame):\n        self.do_frame = do_frame\n    @java_method('(J)V')\n    def doFrame(self, frame_time_nanos):\n        self.do_frame(frame_time_nanos)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "peekOfCode": "__all__ = ('KeyListener', 'FrameCallback')\nfrom jnius import PythonJavaClass, java_method\nclass KeyListener(PythonJavaClass):\n    \"\"\"\n    Represents a Python implementation of an Android `OnKeyListener`.\n    This class provides an interface for handling key events in an Android environment\n    using Python. It acts as a bridge between Python and the Android KeyListener\n    interface. The primary purpose is to allow the execution of a Python function\n    each time a key event is triggered.\n    The class is structured to integrate with the Java ecosystem and is instantiated",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.view",
        "documentation": {}
    },
    {
        "label": "ValueCallback",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "peekOfCode": "class ValueCallback(PythonJavaClass):\n    \"\"\"\n    Represents a callback to receive a value from Java code.\n    This class implements the Android ValueCallback interface in order to receive\n    values from a Java environment. It's particularly useful when working with\n    Android-related tasks where results from Java methods are passed back to Python.\n    Attributes:\n    on_receive_value: Callable function to handle the received value from the Java\n    environment.\n    Methods:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "documentation": {}
    },
    {
        "label": "DownloadListener",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "peekOfCode": "class DownloadListener(PythonJavaClass):\n    \"\"\"\n    Handles download events initiated through a WebView in an Android application.\n    This class serves as a bridge for the Android `DownloadListener` interface,\n    facilitating the handling of download requests generated during WebView interactions.\n    By implementing this interface, it allows the developer to intercept and handle\n    download events directly using the provided callback.\n    Attributes:\n    on_download_start (callable): A callback function that is triggered when a download\n        starts. The function should accept five parameters: url, user_agent, content_disposition,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "peekOfCode": "__all__ = ('ValueCallback', 'DownloadListener')\nfrom jnius import PythonJavaClass, java_method\nclass ValueCallback(PythonJavaClass):\n    \"\"\"\n    Represents a callback to receive a value from Java code.\n    This class implements the Android ValueCallback interface in order to receive\n    values from a Java environment. It's particularly useful when working with\n    Android-related tasks where results from Java methods are passed back to Python.\n    Attributes:\n    on_receive_value: Callable function to handle the received value from the Java",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.jinterface.webkit",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.app",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.app",
        "peekOfCode": "class App(EventDispatcher):\n    # Return the current running App instance\n    _running_app = None\n    def __init__(self, **kwargs):\n        App._running_app = self\n        super().__init__(**kwargs)\n        self._eventloop = EventLoop()\n        #: The *root* widget returned by the :meth:`build_view`\n        self.root = None\n    def build_view(self):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.app",
        "documentation": {}
    },
    {
        "label": "EventLoop",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.base",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.base",
        "peekOfCode": "class EventLoop(EventDispatcher):\n    def __init__(self):\n        super(EventLoop, self).__init__()\n        from webview.platforms.android.app import App\n        self.app = App.get_running_app()\n        self.quit = False\n        self.status = \"idle\"\n        self.resumed = False\n        self.destroyed = False\n        self.paused = False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.base",
        "documentation": {}
    },
    {
        "label": "EventDispatcher",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.event",
        "peekOfCode": "class EventDispatcher:\n    __event_stack = {}\n    def register_event_type(self, event_type):\n        \"\"\"Register an event type with the dispatcher.\n        Registering event types allows the dispatcher to validate event handler\n        names as they are attached and to search attached objects for suitable\n        handlers. Each event type declaration must:\n            1. start with the prefix `on_`.\n            2. have a default handler in the class.\n        \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.android.event",
        "documentation": {}
    },
    {
        "label": "JSBridge",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "class JSBridge:\n    def __init__(self, window, eval_events):\n        self.results = {}\n        self.window = window\n        self.eval_events = eval_events\n    def return_result(self, result, uid):\n        self.results[uid] = json.loads(result) if result else None\n        self.eval_events[uid].set()\n    def call(self, func_name, param, value_id):\n        js_bridge_call(self.window, func_name, json.loads(param), value_id)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "CookieVisitor",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "class CookieVisitor:\n    def Visit(self, cookie, count, total, delete_cookie_out):\n        data = {\n            'name': cookie.GetName(),\n            'value': cookie.GetValue(),\n            'path': cookie.GetPath(),\n            'domain': cookie.GetDomain(),\n            'expires': cookie.GetExpires().strftime('%a, %d %b %Y %H:%M:%S GMT'),\n            'secure': cookie.GetSecure(),\n            'httponly': cookie.GetHttpOnly(),",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "Browser",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "class Browser:\n    def __init__(self, window, handle, browser, parent):\n        self.window = window\n        self.handle = handle\n        self.browser = browser\n        self.parent = parent\n        self.uid = window.uid\n        self.loaded = window.events.loaded\n        self.shown = window.events.shown\n        self.inner_hwnd = self.browser.GetWindowHandle()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "LoadHandler",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "class LoadHandler:\n    def OnBeforePopup(self, **args):\n        url = args['target_url']\n        user_gesture = args['user_gesture']\n        if user_gesture:\n            webbrowser.open(url)\n        return True\n    def OnLoadingStateChange(self, browser, is_loading, **_):\n        instance = find_instance(browser)\n        if instance is not None:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "find_instance",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def find_instance(browser):\n    for instance in instances.values():\n        if instance.browser is browser:\n            return instance\n    return None\nclass LoadHandler:\n    def OnBeforePopup(self, **args):\n        url = args['target_url']\n        user_gesture = args['user_gesture']\n        if user_gesture:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def init(_, cache_dir):\n    global _initialized\n    if not _initialized:\n        if sys.platform == 'win32':\n            _set_dpi_mode(True)\n        default_settings = {\n            'multi_threaded_message_loop': True,\n            'context_menu': {'enabled': _state['debug']},\n        }\n        default_command_line_switches = {",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "create_browser",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def create_browser(window, handle, alert_func, parent):\n    def _create():\n        real_url = (\n            'data:text/html,{0}'.format(window.html)\n            if window.html\n            else window.real_url or 'data:text/html,{0}'.format(DEFAULT_HTML)\n        )\n        default_browser_settings = {}\n        all_browser_settings = dict(default_browser_settings, **browser_settings)\n        cef_browser = cef.CreateBrowserSync(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "focus",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def focus(uid):\n    instance = instances[uid]\n    instance.focus()\n@_cef_call\ndef load_html(html, uid):\n    instance = instances[uid]\n    instance.load_html(html)\n@_cef_call\ndef load_url(url, uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "load_html",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def load_html(html, uid):\n    instance = instances[uid]\n    instance.load_html(html)\n@_cef_call\ndef load_url(url, uid):\n    instance = instances[uid]\n    instance.load_url(url)\n@_cef_call\ndef evaluate_js(code, unique_id, parse_json, uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "load_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def load_url(url, uid):\n    instance = instances[uid]\n    instance.load_url(url)\n@_cef_call\ndef evaluate_js(code, unique_id, parse_json, uid):\n    instance = instances[uid]\n    return instance.evaluate_js(code, unique_id, parse_json)\n@_cef_call\ndef clear_cookies(uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "evaluate_js",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def evaluate_js(code, unique_id, parse_json, uid):\n    instance = instances[uid]\n    return instance.evaluate_js(code, unique_id, parse_json)\n@_cef_call\ndef clear_cookies(uid):\n    instance = instances[uid]\n    return instance.clear_cookies()\n@_cef_call\ndef get_cookies(uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "clear_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def clear_cookies(uid):\n    instance = instances[uid]\n    return instance.clear_cookies()\n@_cef_call\ndef get_cookies(uid):\n    instance = instances[uid]\n    return instance.get_cookies()\n@_cef_call\ndef get_current_url(uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def get_cookies(uid):\n    instance = instances[uid]\n    return instance.get_cookies()\n@_cef_call\ndef get_current_url(uid):\n    instance = instances[uid]\n    url = instance.get_current_url()\n    if url.startswith('data:text/html,'):\n        return None\n    else:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "get_current_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def get_current_url(uid):\n    instance = instances[uid]\n    url = instance.get_current_url()\n    if url.startswith('data:text/html,'):\n        return None\n    else:\n        return url\n@_cef_call\ndef resize(width, height, uid):\n    instance = instances[uid]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def resize(width, height, uid):\n    instance = instances[uid]\n    instance.resize(width, height)\n@_cef_call\ndef close_window(uid):\n    instance = instances[uid]\n    instance.close()\n    del instances[uid]\ndef shutdown():\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "close_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def close_window(uid):\n    instance = instances[uid]\n    instance.close()\n    del instances[uid]\ndef shutdown():\n    try:\n        if os.path.exists('blob_storage'):\n            shutil.rmtree('blob_storage')\n        if os.path.exists('webrtc_event_logs'):\n            shutil.rmtree('webrtc_event_logs')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "def shutdown():\n    try:\n        if os.path.exists('blob_storage'):\n            shutil.rmtree('blob_storage')\n        if os.path.exists('webrtc_event_logs'):\n            shutil.rmtree('webrtc_event_logs')\n        if os.path.exists('error.log') and not _state['debug']:\n            os.remove('error.log')\n        if sys.platform == 'win32':\n            _set_dpi_mode(False)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "sys.excepthook",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "sys.excepthook = cef.ExceptHook\ninstances = {}\nlogger = logging.getLogger(__name__)\nbrowser_settings = {}\ncommand_line_switches = {}\nrenderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "instances",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "instances = {}\nlogger = logging.getLogger(__name__)\nbrowser_settings = {}\ncommand_line_switches = {}\nrenderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:\n        dpi_support = winreg.OpenKey(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "logger = logging.getLogger(__name__)\nbrowser_settings = {}\ncommand_line_switches = {}\nrenderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:\n        dpi_support = winreg.OpenKey(\n            winreg.HKEY_CURRENT_USER,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "browser_settings",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "browser_settings = {}\ncommand_line_switches = {}\nrenderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:\n        dpi_support = winreg.OpenKey(\n            winreg.HKEY_CURRENT_USER,\n            r'Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers',",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "command_line_switches",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "command_line_switches = {}\nrenderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:\n        dpi_support = winreg.OpenKey(\n            winreg.HKEY_CURRENT_USER,\n            r'Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers',\n            0,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "renderer = 'cef'\ndef _set_dpi_mode(enabled):\n    \"\"\" \"\"\"\n    import winreg  # Python 3\n    try:\n        dpi_support = winreg.OpenKey(\n            winreg.HKEY_CURRENT_USER,\n            r'Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers',\n            0,\n            winreg.KEY_ALL_ACCESS,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "_initialized",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "peekOfCode": "_initialized = False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cef",
        "documentation": {}
    },
    {
        "label": "BrowserView",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "class BrowserView:\n    instances = {}\n    app = AppKit.NSApplication.sharedApplication()\n    app.setActivationPolicy_(0)\n    current_menu = None\n    cascade_loc = Foundation.NSMakePoint(100.0, 0.0)\n    class AppDelegate(AppKit.NSObject):\n        def applicationShouldTerminate_(self, app):\n            should_close = True\n            for i in BrowserView.instances.values():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "MenuHandler",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "class MenuHandler:\n    def __init__(self):\n        self.actions = {}\n    def handleMenuAction_(self, sender):\n        action_id = sender.representedObject()\n        if action_id in self.actions:\n            Thread(target=self.actions[action_id]).start()\n        else:\n            logger.warning(f'Menu cction {action_id} not found')\n    def register_action(self, action_id, action_callable):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "setup_app",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def setup_app():\n    pass\ndef get_active_window():\n    active_window = BrowserView.app.keyWindow()\n    if active_window is None:\n        return None\n    active_window_number = active_window.windowNumber()\n    for uid, browser_view_instance in BrowserView.instances.items():\n        if browser_view_instance.window.windowNumber() == active_window_number:\n            return browser_view_instance.pywebview_window",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_active_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_active_window():\n    active_window = BrowserView.app.keyWindow()\n    if active_window is None:\n        return None\n    active_window_number = active_window.windowNumber()\n    for uid, browser_view_instance in BrowserView.instances.items():\n        if browser_view_instance.window.windowNumber() == active_window_number:\n            return browser_view_instance.pywebview_window\n    return None\ndef create_window(window):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "create_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def create_window(window):\n    def create():\n        browser = BrowserView(window)\n        browser.first_show()\n    if window.uid == 'master':\n        main_thread().pydev_do_not_trace = True # vs code debugger hang fix\n        create()\n    else:\n        AppHelper.callAfter(create)\ndef set_title(title, uid):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def set_title(title, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.set_title(title)\ndef create_confirmation_dialog(title, message, uid):\n    def _confirm():\n        nonlocal result\n        i = BrowserView.instances.get(uid)\n        ok = i.localization['global.ok']\n        cancel = i.localization['global.cancel']",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "create_confirmation_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def create_confirmation_dialog(title, message, uid):\n    def _confirm():\n        nonlocal result\n        i = BrowserView.instances.get(uid)\n        ok = i.localization['global.ok']\n        cancel = i.localization['global.cancel']\n        result = BrowserView.display_confirmation_dialog(ok, cancel, message)\n        semaphore.release()\n    result = False\n    semaphore = Semaphore(0)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "create_file_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    file_filter = []\n    # Parse file_types to obtain allowed file extensions\n    for s in file_types:\n        description, extensions = parse_file_type(s)\n        file_extensions = [i.lstrip('*.') for i in extensions.split(';') if i != '*.*']\n        file_filter.append([description, file_extensions or []])\n    i = BrowserView.instances.get(uid)\n    return i.create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_filter)\ndef load_url(url, uid):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "load_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def load_url(url, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_url(url)\ndef load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_html(content, base_uri)\ndef destroy_window(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "load_html",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_html(content, base_uri)\ndef destroy_window(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.destroy()\ndef hide(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "destroy_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def destroy_window(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.destroy()\ndef hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide()\ndef show(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide()\ndef show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.show()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.show()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, top):\n    def _set_on_top():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "toggle_fullscreen",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, top):\n    def _set_on_top():\n        level = AppKit.NSStatusWindowLevel if top else AppKit.NSNormalWindowLevel\n        i.window.setLevel_(level)\n    i = BrowserView.instances.get(uid)\n    if i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "set_on_top",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def set_on_top(uid, top):\n    def _set_on_top():\n        level = AppKit.NSStatusWindowLevel if top else AppKit.NSNormalWindowLevel\n        i.window.setLevel_(level)\n    i = BrowserView.instances.get(uid)\n    if i:\n        AppHelper.callAfter(_set_on_top)\ndef resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.resize(width, height, fix_point)\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "maximize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "minimize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "restore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        AppHelper.callAfter(i.move, x, y)\ndef get_current_url(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        AppHelper.callAfter(i.move, x, y)\ndef get_current_url(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_current_url()\ndef clear_cookies(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_current_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_current_url(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_current_url()\ndef clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "clear_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_cookies()\ndef evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_cookies()\ndef evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.evaluate_js(script, parse_json)\ndef get_position(uid):\n    def _position(coordinates):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "evaluate_js",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.evaluate_js(script, parse_json)\ndef get_position(uid):\n    def _position(coordinates):\n        screen_frame = i.screen\n        if screen_frame is None:\n            raise RuntimeError('Failed to obtain screen')\n        window = i.window",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_position",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_position(uid):\n    def _position(coordinates):\n        screen_frame = i.screen\n        if screen_frame is None:\n            raise RuntimeError('Failed to obtain screen')\n        window = i.window\n        frame = window.frame()\n        coordinates[0] = int(frame.origin.x)\n        coordinates[1] = int(screen_frame.size.height - frame.origin.y - frame.size.height)\n        semaphore.release()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_size",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_size(uid):\n    def _size(dimensions):\n        size = i.window.frame().size\n        dimensions[0] = size.width\n        dimensions[1] = size.height\n        semaphore.release()\n    dimensions = [None, None]\n    semaphore = Semaphore(0)\n    i = BrowserView.instances.get(uid)\n    if not i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "get_screens",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def get_screens():\n    screens = [\n        Screen(s.frame().origin.x, s.frame().origin.y, s.frame().size.width, s.frame().size.height, s.frame()) for s in AppKit.NSScreen.screens()\n    ]\n    return screens\ndef add_tls_cert(certfile):\n    # does not auth against the certfile\n    # see webView_didReceiveAuthenticationChallenge_completionHandler_\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "add_tls_cert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "def add_tls_cert(certfile):\n    # does not auth against the certfile\n    # see webView_didReceiveAuthenticationChallenge_completionHandler_\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "bundle",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "bundle = AppKit.NSBundle.mainBundle()\ninfo = bundle.localizedInfoDictionary() or bundle.infoDictionary()\ninfo['NSAppTransportSecurity'] = {'NSAllowsArbitraryLoads': Foundation.YES}\ninfo['NSRequiresAquaSystemAppearance'] = Foundation.NO  # Enable dark mode support for Mojave\n# Dynamic library required by BrowserView.pyobjc_method_signature()\n_objc_so = ctypes.cdll.LoadLibrary(_objc.__file__)\n# Fallbacks, in case these constants are not wrapped by PyObjC\ntry:\n    NSFullSizeContentViewWindowMask = AppKit.NSFullSizeContentViewWindowMask\nexcept AttributeError:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "info = bundle.localizedInfoDictionary() or bundle.infoDictionary()\ninfo['NSAppTransportSecurity'] = {'NSAllowsArbitraryLoads': Foundation.YES}\ninfo['NSRequiresAquaSystemAppearance'] = Foundation.NO  # Enable dark mode support for Mojave\n# Dynamic library required by BrowserView.pyobjc_method_signature()\n_objc_so = ctypes.cdll.LoadLibrary(_objc.__file__)\n# Fallbacks, in case these constants are not wrapped by PyObjC\ntry:\n    NSFullSizeContentViewWindowMask = AppKit.NSFullSizeContentViewWindowMask\nexcept AttributeError:\n    NSFullSizeContentViewWindowMask = 1 << 15",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "info['NSAppTransportSecurity']",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "info['NSAppTransportSecurity'] = {'NSAllowsArbitraryLoads': Foundation.YES}\ninfo['NSRequiresAquaSystemAppearance'] = Foundation.NO  # Enable dark mode support for Mojave\n# Dynamic library required by BrowserView.pyobjc_method_signature()\n_objc_so = ctypes.cdll.LoadLibrary(_objc.__file__)\n# Fallbacks, in case these constants are not wrapped by PyObjC\ntry:\n    NSFullSizeContentViewWindowMask = AppKit.NSFullSizeContentViewWindowMask\nexcept AttributeError:\n    NSFullSizeContentViewWindowMask = 1 << 15\ntry:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "info['NSRequiresAquaSystemAppearance']",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "info['NSRequiresAquaSystemAppearance'] = Foundation.NO  # Enable dark mode support for Mojave\n# Dynamic library required by BrowserView.pyobjc_method_signature()\n_objc_so = ctypes.cdll.LoadLibrary(_objc.__file__)\n# Fallbacks, in case these constants are not wrapped by PyObjC\ntry:\n    NSFullSizeContentViewWindowMask = AppKit.NSFullSizeContentViewWindowMask\nexcept AttributeError:\n    NSFullSizeContentViewWindowMask = 1 << 15\ntry:\n    NSWindowTitleHidden = AppKit.NSWindowTitleHidden",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "_objc_so",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "_objc_so = ctypes.cdll.LoadLibrary(_objc.__file__)\n# Fallbacks, in case these constants are not wrapped by PyObjC\ntry:\n    NSFullSizeContentViewWindowMask = AppKit.NSFullSizeContentViewWindowMask\nexcept AttributeError:\n    NSFullSizeContentViewWindowMask = 1 << 15\ntry:\n    NSWindowTitleHidden = AppKit.NSWindowTitleHidden\nexcept AttributeError:\n    NSWindowTitleHidden = 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nlogger.debug('Using Cocoa')\nrenderer = 'wkwebview'\nclass BrowserView:\n    instances = {}\n    app = AppKit.NSApplication.sharedApplication()\n    app.setActivationPolicy_(0)\n    current_menu = None\n    cascade_loc = Foundation.NSMakePoint(100.0, 0.0)\n    class AppDelegate(AppKit.NSObject):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "renderer = 'wkwebview'\nclass BrowserView:\n    instances = {}\n    app = AppKit.NSApplication.sharedApplication()\n    app.setActivationPolicy_(0)\n    current_menu = None\n    cascade_loc = Foundation.NSMakePoint(100.0, 0.0)\n    class AppDelegate(AppKit.NSObject):\n        def applicationShouldTerminate_(self, app):\n            should_close = True",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "menu_handler",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "peekOfCode": "menu_handler = MenuHandler()\ndef setup_app():\n    pass\ndef get_active_window():\n    active_window = BrowserView.app.keyWindow()\n    if active_window is None:\n        return None\n    active_window_number = active_window.windowNumber()\n    for uid, browser_view_instance in BrowserView.instances.items():\n        if browser_view_instance.window.windowNumber() == active_window_number:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.cocoa",
        "documentation": {}
    },
    {
        "label": "EdgeChrome",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "peekOfCode": "class EdgeChrome:\n    def __init__(self, form: WinForms.Form, window: Window, cache_dir: str):\n        self.pywebview_window = window\n        self.webview = WebView2()\n        props = CoreWebView2CreationProperties()\n        props.UserDataFolder = cache_dir\n        self.user_data_folder = props.UserDataFolder\n        props.set_IsInPrivateModeEnabled(_state['private_mode'])\n        props.AdditionalBrowserArguments = '--disable-features=ElasticOverscroll'\n        if webview_settings['ALLOW_FILE_URLS']:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nrenderer = 'edgechromium'\nclass EdgeChrome:\n    def __init__(self, form: WinForms.Form, window: Window, cache_dir: str):\n        self.pywebview_window = window\n        self.webview = WebView2()\n        props = CoreWebView2CreationProperties()\n        props.UserDataFolder = cache_dir\n        self.user_data_folder = props.UserDataFolder\n        props.set_IsInPrivateModeEnabled(_state['private_mode'])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "peekOfCode": "renderer = 'edgechromium'\nclass EdgeChrome:\n    def __init__(self, form: WinForms.Form, window: Window, cache_dir: str):\n        self.pywebview_window = window\n        self.webview = WebView2()\n        props = CoreWebView2CreationProperties()\n        props.UserDataFolder = cache_dir\n        self.user_data_folder = props.UserDataFolder\n        props.set_IsInPrivateModeEnabled(_state['private_mode'])\n        props.AdditionalBrowserArguments = '--disable-features=ElasticOverscroll'",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.edgechromium",
        "documentation": {}
    },
    {
        "label": "BrowserView",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "class BrowserView:\n    instances = {}\n    class JSBridge:\n        def __init__(self, window: Window) -> None:\n            self.window = window\n            self.uid = uuid1().hex[:8]\n        def call(self, func_name: str, param: Any, value_id: str):\n            if param == 'undefined':\n                param = None\n            return js_bridge_call(self.window, func_name, param, value_id)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "setup_app",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def setup_app():\n    def set_menubar(app):\n        app.set_menubar(app_menu)\n    global _app\n    if _app is not None:\n        return\n    _app = gtk.Application.new(None, 0)\n    if _state['menu']:\n        app_menu = create_menu(_state['menu'])\n        _app.connect('startup', set_menubar)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "create_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def create_window(window):\n    global _app\n    def create():\n        browser = BrowserView(window)\n        browser.show()\n    def create_master_callback(app):\n        create()\n    if window.uid == 'master':\n        main_thread().pydev_do_not_trace = True # vs code debugger hang fix\n        _app.connect('activate', create_master_callback)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def set_title(title, uid):\n    def _set_title():\n        i.set_title(title)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_set_title)\ndef destroy_window(uid):\n    def _destroy_window():\n        i.close_window()\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "destroy_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def destroy_window(uid):\n    def _destroy_window():\n        i.close_window()\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_destroy_window)\ndef toggle_fullscreen(uid):\n    def _toggle_fullscreen():\n        i.toggle_fullscreen()\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "toggle_fullscreen",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def toggle_fullscreen(uid):\n    def _toggle_fullscreen():\n        i.toggle_fullscreen()\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_toggle_fullscreen)\ndef add_tls_cert(certfile):\n    web_context = webkit.WebContext.get_default()\n    cert = Gio.TlsCertificate.new_from_file(certfile)\n    web_context.allow_tls_certificate_for_host(cert, '127.0.0.1')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "add_tls_cert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def add_tls_cert(certfile):\n    web_context = webkit.WebContext.get_default()\n    cert = Gio.TlsCertificate.new_from_file(certfile)\n    web_context.allow_tls_certificate_for_host(cert, '127.0.0.1')\ndef set_on_top(uid, top):\n    def _set_on_top():\n        i.window.set_keep_above(top)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_set_on_top)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "set_on_top",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def set_on_top(uid, top):\n    def _set_on_top():\n        i.window.set_keep_above(top)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_set_on_top)\ndef resize(width, height, uid, fix_point):\n    def _resize():\n        i.resize(width, height, fix_point)\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def resize(width, height, uid, fix_point):\n    def _resize():\n        i.resize(width, height, fix_point)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_resize)\ndef move(x, y, uid):\n    def _move():\n        i.move(x, y)\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def move(x, y, uid):\n    def _move():\n        i.move(x, y)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_move)\ndef hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.hide)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.hide)\ndef show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.show)\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.show)\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.maximize)\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "maximize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.maximize)\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.minimize)\ndef restore(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "minimize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.minimize)\ndef restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.restore)\ndef clear_cookies(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "restore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(i.restore)\ndef clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "clear_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        cookies = i.get_cookies()\n        return cookies\ndef get_current_url(uid):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        cookies = i.get_cookies()\n        return cookies\ndef get_current_url(uid):\n    def _get_current_url():\n        result['url'] = i.get_current_url()\n        semaphore.release()\n    result = {}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_current_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_current_url(uid):\n    def _get_current_url():\n        result['url'] = i.get_current_url()\n        semaphore.release()\n    result = {}\n    semaphore = Semaphore(0)\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    glib.idle_add(_get_current_url)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "load_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def load_url(url, uid):\n    def _load_url():\n        i.load_url(url)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_load_url)\ndef load_html(content, base_uri, uid):\n    def _load_html():\n        i.load_html(content, base_uri)\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "load_html",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def load_html(content, base_uri, uid):\n    def _load_html():\n        i.load_html(content, base_uri)\n    i = BrowserView.instances.get(uid)\n    if i:\n        glib.idle_add(_load_html)\ndef create_confirmation_dialog(title, message, uid):\n    def _create():\n        nonlocal result\n        result = i.create_confirmation_dialog(title, message)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "create_confirmation_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def create_confirmation_dialog(title, message, uid):\n    def _create():\n        nonlocal result\n        result = i.create_confirmation_dialog(title, message)\n        result_semaphore.release()\n    i = BrowserView.instances.get(uid)\n    result_semaphore = Semaphore(0)\n    result = -1\n    if i:\n        glib.idle_add(_create)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "create_menu",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def create_menu(app_menu_list):\n    def action_callback(action, parameter):\n        function = _app_actions.get(action.get_name())\n        if function is None:\n            return\n        # Don't run action function on main thread\n        Thread(target=function).start()\n    def create_submenu(title, line_items, supermenu, action_prepend=''):\n        m = Gio.Menu.new()\n        current_section = Gio.Menu.new()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_active_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_active_window():\n    active_window = None\n    try:\n        active_window = _app.get_active_window()\n    except:\n        return None\n    active_window_number = active_window.get_id()\n    for uid, browser_view_instance in BrowserView.instances.items():\n        if browser_view_instance.window.get_id() == active_window_number:\n            return browser_view_instance.pywebview_window",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "create_file_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    i = BrowserView.instances.get(uid)\n    file_name_semaphore = Semaphore(0)\n    file_names = []\n    def _create():\n        result = i.create_file_dialog(\n            dialog_type, directory, allow_multiple, save_filename, file_types\n        )\n        if result is None:\n            file_names.append(None)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "evaluate_js",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.evaluate_js(script, parse_json)\ndef get_position(uid):\n    def _get_position():\n        result['position'] = i.window.get_position()\n        semaphore.release()\n    i = BrowserView.instances.get(uid)\n    if not i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_position",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_position(uid):\n    def _get_position():\n        result['position'] = i.window.get_position()\n        semaphore.release()\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    result = {}\n    semaphore = Semaphore(0)\n    glib.idle_add(_get_position)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_size",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_size(uid):\n    def _get_size():\n        result['size'] = i.window.get_size()\n        semaphore.release()\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    result = {}\n    semaphore = Semaphore(0)\n    glib.idle_add(_get_size)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "get_screens",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def get_screens():\n    display = Gdk.Display.get_default()\n    n = display.get_n_monitors()\n    monitors = [Gdk.Display.get_monitor(display, i) for i in range(n)]\n    geometries = [Gdk.Monitor.get_geometry(m) for m in monitors]\n    screens = [Screen(geom.x, geom.y, geom.width, geom.height, geom) for geom in geometries]\n    return screens\ndef configure_transparency(c):\n    c.set_visual(c.get_screen().get_rgba_visual())\n    c.override_background_color(gtk.StateFlags.ACTIVE, Gdk.RGBA(0, 0, 0, 0))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "configure_transparency",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "def configure_transparency(c):\n    c.set_visual(c.get_screen().get_rgba_visual())\n    c.override_background_color(gtk.StateFlags.ACTIVE, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.BACKDROP, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.DIR_LTR, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.DIR_RTL, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.FOCUSED, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.INCONSISTENT, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.INSENSITIVE, Gdk.RGBA(0, 0, 0, 0))\n    c.override_background_color(gtk.StateFlags.NORMAL, Gdk.RGBA(0, 0, 0, 0))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nos.environ['EGL_LOG_LEVEL'] = 'fatal'\nimport gi\ngi.require_version('Gtk', '3.0')\ngi.require_version('Gdk', '3.0')\ntry:\n    gi.require_version('WebKit2', '4.1')\n    gi.require_version('Soup', '3.0')\nexcept ValueError:\n    logger.debug('WebKit2 4.1 not found. Using 4.0.')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "os.environ['EGL_LOG_LEVEL']",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "os.environ['EGL_LOG_LEVEL'] = 'fatal'\nimport gi\ngi.require_version('Gtk', '3.0')\ngi.require_version('Gdk', '3.0')\ntry:\n    gi.require_version('WebKit2', '4.1')\n    gi.require_version('Soup', '3.0')\nexcept ValueError:\n    logger.debug('WebKit2 4.1 not found. Using 4.0.')\n    gi.require_version('WebKit2', '4.0')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "renderer = 'gtkwebkit2'\nwebkit_ver = webkit.get_major_version(), webkit.get_minor_version(), webkit.get_micro_version()\n_app = None\n_app_actions = {}  # action_label: function\nclass BrowserView:\n    instances = {}\n    class JSBridge:\n        def __init__(self, window: Window) -> None:\n            self.window = window\n            self.uid = uuid1().hex[:8]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "webkit_ver",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "webkit_ver = webkit.get_major_version(), webkit.get_minor_version(), webkit.get_micro_version()\n_app = None\n_app_actions = {}  # action_label: function\nclass BrowserView:\n    instances = {}\n    class JSBridge:\n        def __init__(self, window: Window) -> None:\n            self.window = window\n            self.uid = uuid1().hex[:8]\n        def call(self, func_name: str, param: Any, value_id: str):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "_app",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "_app = None\n_app_actions = {}  # action_label: function\nclass BrowserView:\n    instances = {}\n    class JSBridge:\n        def __init__(self, window: Window) -> None:\n            self.window = window\n            self.uid = uuid1().hex[:8]\n        def call(self, func_name: str, param: Any, value_id: str):\n            if param == 'undefined':",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "_app_actions",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "peekOfCode": "_app_actions = {}  # action_label: function\nclass BrowserView:\n    instances = {}\n    class JSBridge:\n        def __init__(self, window: Window) -> None:\n            self.window = window\n            self.uid = uuid1().hex[:8]\n        def call(self, func_name: str, param: Any, value_id: str):\n            if param == 'undefined':\n                param = None",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.gtk",
        "documentation": {}
    },
    {
        "label": "MSHTML",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "peekOfCode": "class MSHTML:\n    alert = None\n    class JSBridge(IWebBrowserInterop):\n        __namespace__ = 'MSHTML.JSBridge'\n        window = None\n        def call(self, func_name, param, value_id):\n            print(func_name, param)\n            return js_bridge_call(self.window, func_name, json.loads(param), value_id)\n        def alert(self, message):\n            MSHTML.alert(str(message))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nsettings = {}\nrenderer = 'mshtml'\ndef _set_ie_mode():\n    \"\"\"\n    By default hosted IE control emulates IE7 regardless which version of IE is installed. To fix this, a proper value\n    must be set for the executable.\n    See http://msdn.microsoft.com/en-us/library/ee330730%28v=vs.85%29.aspx#browser_emulation for details on this\n    behaviour.\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "peekOfCode": "settings = {}\nrenderer = 'mshtml'\ndef _set_ie_mode():\n    \"\"\"\n    By default hosted IE control emulates IE7 regardless which version of IE is installed. To fix this, a proper value\n    must be set for the executable.\n    See http://msdn.microsoft.com/en-us/library/ee330730%28v=vs.85%29.aspx#browser_emulation for details on this\n    behaviour.\n    \"\"\"\n    import winreg",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "peekOfCode": "renderer = 'mshtml'\ndef _set_ie_mode():\n    \"\"\"\n    By default hosted IE control emulates IE7 regardless which version of IE is installed. To fix this, a proper value\n    must be set for the executable.\n    See http://msdn.microsoft.com/en-us/library/ee330730%28v=vs.85%29.aspx#browser_emulation for details on this\n    behaviour.\n    \"\"\"\n    import winreg\n    def get_ie_mode():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.mshtml",
        "documentation": {}
    },
    {
        "label": "BrowserView",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "class BrowserView(QMainWindow):\n    instances = {}\n    inspector_port = None  # The localhost port at which the Remote debugger listens\n    global_menubar_other_objects = []\n    global_menubar_top_menus = []\n    create_window_trigger = QtCore.Signal(object)\n    set_title_trigger = QtCore.Signal(str)\n    load_url_trigger = QtCore.Signal(str)\n    html_trigger = QtCore.Signal(str, str)\n    confirmation_dialog_trigger = QtCore.Signal(str, str, str)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "setup_app",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def setup_app():\n    global _app\n    if settings['IGNORE_SSL_ERRORS']:\n        environ_append('QTWEBENGINE_CHROMIUM_FLAGS', '--ignore-certificate-errors')\n    _app = QApplication.instance() or QApplication(sys.argv)\ndef create_window(window):\n    def _create():\n        browser = BrowserView(window)\n        browser.installEventFilter(browser)\n        if window.menu or _app_menu:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "create_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def create_window(window):\n    def _create():\n        browser = BrowserView(window)\n        browser.installEventFilter(browser)\n        if window.menu or _app_menu:\n            menu = window.menu or _state['menu']\n            window_menubar = browser.menuBar()\n            create_menu(menu, window_menubar)\n        _main_window_created.set()\n        if window.maximized:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def set_title(title, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.set_title(title)\ndef clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "clear_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def clear_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_cookies()\ndef get_current_url(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_cookies(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_cookies()\ndef get_current_url(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_current_url()\ndef load_url(url, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_current_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_current_url(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_current_url()\ndef load_url(url, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_url(url)\ndef load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "load_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def load_url(url, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_url(url)\ndef load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_html(content, base_uri)\ndef create_menu(app_menu_list, menubar):\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "load_html",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.load_html(content, base_uri)\ndef create_menu(app_menu_list, menubar):\n    \"\"\"\n    Create the menu bar for the application for the provided QMenuBar object. Menu can be either a global\n    application menu or a window-specific menu.\n    Args:\n        app_menu_list ([webview.menu.Menu])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "create_menu",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def create_menu(app_menu_list, menubar):\n    \"\"\"\n    Create the menu bar for the application for the provided QMenuBar object. Menu can be either a global\n    application menu or a window-specific menu.\n    Args:\n        app_menu_list ([webview.menu.Menu])\n        menubar (QMenuBar)\n    \"\"\"\n    def run_action(func):\n        Thread(target=func).start()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_active_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_active_window():\n    active_window = None\n    try:\n        active_window = _app.activeWindow()\n    except:\n        return None\n    if active_window:\n        return active_window.pywebview_window\n    return None\ndef destroy_window(uid):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "destroy_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def destroy_window(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.destroy_()\ndef hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide_()\ndef show(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide_()\ndef show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.show_()\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.show_()\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "maximize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "minimize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "restore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, top):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "toggle_fullscreen",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, top):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.set_on_top(top)\ndef resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "set_on_top",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def set_on_top(uid, top):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.set_on_top(top)\ndef resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.resize_(width, height, fix_point)\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.resize_(width, height, fix_point)\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.move_window(x, y)\ndef create_confirmation_dialog(title, message, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.move_window(x, y)\ndef create_confirmation_dialog(title, message, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.create_confirmation_dialog(title, message)\ndef create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    # Create a file filter by parsing allowed file types",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "create_confirmation_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def create_confirmation_dialog(title, message, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.create_confirmation_dialog(title, message)\ndef create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    # Create a file filter by parsing allowed file types\n    file_types = [s.replace(';', ' ') for s in file_types]\n    file_filter = ';;'.join(file_types)\n    i = BrowserView.instances.get(uid)\n    if i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "create_file_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    # Create a file filter by parsing allowed file types\n    file_types = [s.replace(';', ' ') for s in file_types]\n    file_filter = ';;'.join(file_types)\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_filter)\ndef evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)\n    if i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "evaluate_js",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def evaluate_js(script, uid, parse_json=True):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.evaluate_js(script, parse_json)\ndef get_position(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        position = i.geometry()\n        return position.x(), position.y()\n    else:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_position",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_position(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        position = i.geometry()\n        return position.x(), position.y()\n    else:\n        return None, None\ndef get_size(uid):\n    i = BrowserView.instances.get(uid)\n    if i:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_size",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_size(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.width(), i.height()\n    else:\n        return None, None\ndef get_screens():\n    global _app\n    _app = QApplication.instance() or QApplication(sys.argv)\n    screens = [Screen(s.geometry().x(), s.geometry().y(), s.geometry().width(), s.geometry().height(), s) for s in _app.screens()]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "get_screens",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def get_screens():\n    global _app\n    _app = QApplication.instance() or QApplication(sys.argv)\n    screens = [Screen(s.geometry().x(), s.geometry().y(), s.geometry().width(), s.geometry().height(), s) for s in _app.screens()]\n    return screens\ndef add_tls_cert(certfile):\n    config = QSslConfiguration.defaultConfiguration()\n    certs = config.caCertificates()\n    cert = QSslCertificate.fromPath(certfile)[0]\n    certs.append(cert)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "add_tls_cert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "def add_tls_cert(certfile):\n    config = QSslConfiguration.defaultConfiguration()\n    certs = config.caCertificates()\n    cert = QSslCertificate.fromPath(certfile)[0]\n    certs.append(cert)\n    config.setCaCertificates(certs)\n    QSslConfiguration.setDefaultConfiguration(config)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nfrom qtpy import QtCore\nlogger.debug('Using Qt %s' % QtCore.__version__)\nfrom qtpy import PYQT6, PYSIDE6\nfrom qtpy.QtCore import QJsonValue, QByteArray\nfrom qtpy.QtGui import QColor, QIcon, QScreen\nfrom qtpy.QtWidgets import QAction, QApplication, QFileDialog, QMainWindow, QMenuBar, QMessageBox\ntry:\n    from qtpy.QtNetwork import QSslCertificate, QSslConfiguration\n    from qtpy.QtWebChannel import QWebChannel",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "_main_window_created",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "_main_window_created = Event()\n_main_window_created.clear()\n# suppress invalid style override error message on some Linux distros\nos.environ['QT_STYLE_OVERRIDE'] = ''\n_qt6 = True if PYQT6 or PYSIDE6 else False\n_profile_storage_path = _state['storage_path'] or os.path.join(os.path.expanduser('~'), '.pywebview')\nclass BrowserView(QMainWindow):\n    instances = {}\n    inspector_port = None  # The localhost port at which the Remote debugger listens\n    global_menubar_other_objects = []",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "os.environ['QT_STYLE_OVERRIDE']",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "os.environ['QT_STYLE_OVERRIDE'] = ''\n_qt6 = True if PYQT6 or PYSIDE6 else False\n_profile_storage_path = _state['storage_path'] or os.path.join(os.path.expanduser('~'), '.pywebview')\nclass BrowserView(QMainWindow):\n    instances = {}\n    inspector_port = None  # The localhost port at which the Remote debugger listens\n    global_menubar_other_objects = []\n    global_menubar_top_menus = []\n    create_window_trigger = QtCore.Signal(object)\n    set_title_trigger = QtCore.Signal(str)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "_qt6",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "_qt6 = True if PYQT6 or PYSIDE6 else False\n_profile_storage_path = _state['storage_path'] or os.path.join(os.path.expanduser('~'), '.pywebview')\nclass BrowserView(QMainWindow):\n    instances = {}\n    inspector_port = None  # The localhost port at which the Remote debugger listens\n    global_menubar_other_objects = []\n    global_menubar_top_menus = []\n    create_window_trigger = QtCore.Signal(object)\n    set_title_trigger = QtCore.Signal(str)\n    load_url_trigger = QtCore.Signal(str)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "_profile_storage_path",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "peekOfCode": "_profile_storage_path = _state['storage_path'] or os.path.join(os.path.expanduser('~'), '.pywebview')\nclass BrowserView(QMainWindow):\n    instances = {}\n    inspector_port = None  # The localhost port at which the Remote debugger listens\n    global_menubar_other_objects = []\n    global_menubar_top_menus = []\n    create_window_trigger = QtCore.Signal(object)\n    set_title_trigger = QtCore.Signal(str)\n    load_url_trigger = QtCore.Signal(str)\n    html_trigger = QtCore.Signal(str, str)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.qt",
        "documentation": {}
    },
    {
        "label": "BrowserView",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "class BrowserView:\n    instances = {}\n    class BrowserForm(WinForms.Form):\n        def __init__(self, window, cache_dir):\n            super().__init__()\n            self.uid = window.uid\n            self.pywebview_window = window\n            self.pywebview_window.native = self\n            self.real_url = None\n            self.Text = window.title",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "OpenFolderDialog",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "class OpenFolderDialog:\n    foldersFilter = 'Folders|\\n'\n    flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic\n    windowsFormsAssembly = Assembly.LoadWithPartialName('System.Windows.Forms')\n    iFileDialogType = windowsFormsAssembly.GetType('System.Windows.Forms.FileDialogNative+IFileDialog')\n    OpenFileDialogType = windowsFormsAssembly.GetType('System.Windows.Forms.OpenFileDialog')\n    FileDialogType = windowsFormsAssembly.GetType('System.Windows.Forms.FileDialog')\n    createVistaDialogMethodInfo = OpenFileDialogType.GetMethod('CreateVistaDialog', flags)\n    onBeforeVistaDialogMethodInfo = OpenFileDialogType.GetMethod('OnBeforeVistaDialog', flags)\n    getOptionsMethodInfo = FileDialogType.GetMethod('GetOptions', flags)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "DwmSetWindowAttribute",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def DwmSetWindowAttribute(hwnd, attr, value, size=4):\n    DwmSetWindowAttribute = ctypes.windll.dwmapi.DwmSetWindowAttribute\n    DwmSetWindowAttribute.argtypes = [wintypes.HWND, wintypes.DWORD, ctypes.c_void_p, wintypes.DWORD]\n    return DwmSetWindowAttribute(hwnd, attr, ctypes.byref(ctypes.c_int(value)), size)\ndef ExtendFrameIntoClientArea(hwnd):\n    class _MARGINS(ctypes.Structure):\n        _fields_ = [(\"cxLeftWidth\", ctypes.c_int),\n                    (\"cxRightWidth\", ctypes.c_int),\n                    (\"cyTopHeight\", ctypes.c_int),\n                    (\"cyBottomHeight\", ctypes.c_int)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "ExtendFrameIntoClientArea",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def ExtendFrameIntoClientArea(hwnd):\n    class _MARGINS(ctypes.Structure):\n        _fields_ = [(\"cxLeftWidth\", ctypes.c_int),\n                    (\"cxRightWidth\", ctypes.c_int),\n                    (\"cyTopHeight\", ctypes.c_int),\n                    (\"cyBottomHeight\", ctypes.c_int)\n                    ]\n    DwmExtendFrameIntoClientArea = ctypes.windll.dwmapi.DwmExtendFrameIntoClientArea\n    m = _MARGINS()\n    m.cxLeftWidth = 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "init_storage",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def init_storage():\n    global cache_dir\n    if not _state['private_mode'] or _state['storage_path']:\n        try:\n            data_folder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\n            if not os.access(data_folder, os.W_OK):\n                data_folder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)\n            cache_dir = _state['storage_path'] or os.path.join(data_folder, 'pywebview')\n            if not os.path.exists(cache_dir):\n                os.makedirs(cache_dir)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "setup_app",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def setup_app():\n    # MUST be called before create_window\n    global _already_set_up_app\n    if _already_set_up_app:\n        return\n    WinForms.Application.EnableVisualStyles()\n    WinForms.Application.SetCompatibleTextRenderingDefault(False)\n    _already_set_up_app = True\ndef create_window(window):\n    def create():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "create_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def create_window(window):\n    def create():\n        browser = BrowserView.BrowserForm(window, cache_dir)\n        BrowserView.instances[window.uid] = browser\n        window.events.before_show.set()\n        if window.hidden:\n            browser.Opacity = 0\n            browser.Show()\n            browser.Hide()\n            browser.Opacity = 1",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def set_title(title, uid):\n    def _set_title():\n        i.Text = title\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    elif i.InvokeRequired:\n        i.Invoke(Func[Type](_set_title))\n    else:\n        _set_title()",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "create_confirmation_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def create_confirmation_dialog(title, message, uid):\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    result = WinForms.MessageBox.Show(message, title, WinForms.MessageBoxButtons.OKCancel)\n    return result == WinForms.DialogResult.OK\ndef create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "create_file_dialog",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def create_file_dialog(dialog_type, directory, allow_multiple, save_filename, file_types, uid):\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    if not directory:\n        directory = os.environ['HOMEPATH']\n    try:\n        if dialog_type == FileDialog.FOLDER:\n            file_path = OpenFolderDialog.show(i, directory, allow_multiple)\n        elif dialog_type == FileDialog.OPEN:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "clear_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def clear_cookies(uid):\n    if is_cef:\n        CEF.clear_cookies(uid)\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.clear_cookies()\ndef get_cookies(uid):\n    if is_cef:\n        return CEF.get_cookies(uid)\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_cookies",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_cookies(uid):\n    if is_cef:\n        return CEF.get_cookies(uid)\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.get_cookies()\ndef get_current_url(uid):\n    if is_cef:\n        return CEF.get_current_url(uid)\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_current_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_current_url(uid):\n    if is_cef:\n        return CEF.get_current_url(uid)\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.browser.url\ndef load_url(url, uid):\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "load_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def load_url(url, uid):\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    if is_cef:\n        CEF.load_url(url, uid)\n    else:\n        i.load_url(url)\ndef load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "load_html",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def load_html(content, base_uri, uid):\n    i = BrowserView.instances.get(uid)\n    if is_cef:\n        CEF.load_html(inject_base_uri(content, base_uri), uid)\n    elif i:\n        i.load_html(content, base_uri)\ndef get_active_window():\n    active_window = None\n    try:\n        active_window = WinForms.Form.ActiveForm",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_active_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_active_window():\n    active_window = None\n    try:\n        active_window = WinForms.Form.ActiveForm\n    except:\n        return None\n    if active_window:\n        for uid, browser_view_instance in BrowserView.instances.items():\n            if browser_view_instance.Handle == active_window.Handle:\n                return browser_view_instance.pywebview_window",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def show(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.show()\ndef hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def hide(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.hide()\ndef toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, on_top):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "toggle_fullscreen",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def toggle_fullscreen(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.toggle_fullscreen()\ndef set_on_top(uid, on_top):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.TopMost = on_top\ndef resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "set_on_top",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def set_on_top(uid, on_top):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.TopMost = on_top\ndef resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.resize(width, height, fix_point)\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def resize(width, height, uid, fix_point):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.resize(width, height, fix_point)\ndef move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.move(x, y)\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def move(x, y, uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.move(x, y)\ndef maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "maximize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def maximize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.maximize()\ndef minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "minimize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def minimize(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.minimize()\ndef restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef destroy_window(uid):\n    def _close():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "restore",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def restore(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        i.restore()\ndef destroy_window(uid):\n    def _close():\n        i.Close()\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "destroy_window",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def destroy_window(uid):\n    def _close():\n        i.Close()\n    i = BrowserView.instances.get(uid)\n    if not i:\n        return\n    i.Invoke(Func[Type](_close))\n    if not is_cef:\n        i.browser.js_result_semaphore.release()\ndef evaluate_js(script, uid, parse_json, result_id=None):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "evaluate_js",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def evaluate_js(script, uid, parse_json, result_id=None):\n    if is_cef:\n        return CEF.evaluate_js(script, result_id, parse_json, uid)\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.evaluate_js(script, parse_json)\ndef get_position(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.Left, i.Top",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_position",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_position(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        return i.Left, i.Top\ndef get_size(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        size = i.Size\n        return size.Width, size.Height\ndef get_screens():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_size",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_size(uid):\n    i = BrowserView.instances.get(uid)\n    if i:\n        size = i.Size\n        return size.Width, size.Height\ndef get_screens():\n    screens = [Screen(s.Bounds.X, s.Bounds.Y, s.Bounds.Width, s.Bounds.Height, s.WorkingArea) for s in WinForms.Screen.AllScreens]\n    return screens\ndef add_tls_cert(_):\n    return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "get_screens",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def get_screens():\n    screens = [Screen(s.Bounds.X, s.Bounds.Y, s.Bounds.Width, s.Bounds.Height, s.WorkingArea) for s in WinForms.Screen.AllScreens]\n    return screens\ndef add_tls_cert(_):\n    return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "add_tls_cert",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "def add_tls_cert(_):\n    return",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "kernel32",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)\nlogger = logging.getLogger('pywebview')\ncache_dir = None\ndef _is_new_version(current_version: str, new_version: str) -> bool:\n    new_range = new_version.split('.')\n    cur_range = current_version.split('.')\n    for index, _ in enumerate(new_range):\n        if len(cur_range) > index:\n            return int(new_range[index]) >= int(cur_range[index])\n    return False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "logger = logging.getLogger('pywebview')\ncache_dir = None\ndef _is_new_version(current_version: str, new_version: str) -> bool:\n    new_range = new_version.split('.')\n    cur_range = current_version.split('.')\n    for index, _ in enumerate(new_range):\n        if len(cur_range) > index:\n            return int(new_range[index]) >= int(cur_range[index])\n    return False\ndef _is_chromium():",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "cache_dir",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "cache_dir = None\ndef _is_new_version(current_version: str, new_version: str) -> bool:\n    new_range = new_version.split('.')\n    cur_range = current_version.split('.')\n    for index, _ in enumerate(new_range):\n        if len(cur_range) > index:\n            return int(new_range[index]) >= int(cur_range[index])\n    return False\ndef _is_chromium():\n    def edge_build(key_type, key, description=''):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "is_cef",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "is_cef = forced_gui_ == 'cef'\nis_chromium = not is_cef and _is_chromium() and forced_gui_ != 'mshtml'\nif is_cef:\n    from . import cef as CEF\n    IWebBrowserInterop = object\n    logger.debug('Using WinForms / CEF')\n    renderer = 'cef'\nelif is_chromium:\n    from . import edgechromium as Chromium\n    IWebBrowserInterop = object",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "is_chromium",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "is_chromium = not is_cef and _is_chromium() and forced_gui_ != 'mshtml'\nif is_cef:\n    from . import cef as CEF\n    IWebBrowserInterop = object\n    logger.debug('Using WinForms / CEF')\n    renderer = 'cef'\nelif is_chromium:\n    from . import edgechromium as Chromium\n    IWebBrowserInterop = object\n    logger.debug('Using WinForms / Chromium')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "_main_window_created",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "_main_window_created = Event()\n_main_window_created.clear()\n_already_set_up_app = False\ndef init_storage():\n    global cache_dir\n    if not _state['private_mode'] or _state['storage_path']:\n        try:\n            data_folder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\n            if not os.access(data_folder, os.W_OK):\n                data_folder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "_already_set_up_app",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "peekOfCode": "_already_set_up_app = False\ndef init_storage():\n    global cache_dir\n    if not _state['private_mode'] or _state['storage_path']:\n        try:\n            data_folder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\n            if not os.access(data_folder, os.W_OK):\n                data_folder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)\n            cache_dir = _state['storage_path'] or os.path.join(data_folder, 'pywebview')\n            if not os.path.exists(cache_dir):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.platforms.winforms",
        "documentation": {}
    },
    {
        "label": "datas",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.__pyinstaller.hook-webview",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.__pyinstaller.hook-webview",
        "peekOfCode": "datas = []\nif is_win:\n    datas = collect_data_files('webview', subdir='lib')\n    binaries = collect_dynamic_libs('webview')\ndatas += collect_data_files('webview', subdir='js')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.__pyinstaller.hook-webview",
        "documentation": {}
    },
    {
        "label": "WebViewException",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "peekOfCode": "class WebViewException(Exception):\n    pass\nclass JavascriptException(Exception):\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "documentation": {}
    },
    {
        "label": "JavascriptException",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "peekOfCode": "class JavascriptException(Exception):\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.errors",
        "documentation": {}
    },
    {
        "label": "EventContainer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "peekOfCode": "class EventContainer:\n    _serializable = False\n    if TYPE_CHECKING:\n        @type_check_only\n        def __getattr__(self, __name: str) -> Event:\n            ...\n        @type_check_only\n        def __setattr__(self, __name: str, __value: Event) -> None:\n            ...\nclass Event:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "peekOfCode": "class Event:\n    def __init__(self, window, should_lock: bool = False) -> None:\n        self._items: list[Callable[..., Any]] = []\n        self._should_lock = should_lock\n        self._event = threading.Event()\n        self._window = window\n    def set(self, *args: Any, **kwargs: Any) -> bool:\n        def execute():\n            for func in self._items:\n                try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nclass EventContainer:\n    _serializable = False\n    if TYPE_CHECKING:\n        @type_check_only\n        def __getattr__(self, __name: str) -> Event:\n            ...\n        @type_check_only\n        def __setattr__(self, __name: str, __value: Event) -> None:\n            ...",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.event",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "peekOfCode": "def initialize(forced_gui: GUIType | None = None):\n    def import_android():\n        global guilib\n        try:\n            import webview.platforms.android as guilib\n            logger.debug('Using Kivy')\n            return True\n        except (ImportError, ValueError):\n            logger.exception('Kivy cannot be loaded')\n            return False",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nguilib: ModuleType | None = None\nforced_gui_: GUIType | None = None\ndef initialize(forced_gui: GUIType | None = None):\n    def import_android():\n        global guilib\n        try:\n            import webview.platforms.android as guilib\n            logger.debug('Using Kivy')\n            return True",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.guilib",
        "documentation": {}
    },
    {
        "label": "ThreadedAdapter",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "class ThreadedAdapter(bottle.ServerAdapter):\n    def run(self, handler: WSGIApplication) -> None:\n        if self.quiet:\n            class QuietHandler(WSGIRequestHandler):\n                def log_request(*args, **_):\n                    pass\n            self.options['handler_class'] = QuietHandler\n        class ThreadAdapter(ThreadingMixIn, WSGIServer):\n            pass\n        server = make_server(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "BottleServer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "class BottleServer:\n    def __init__(self) -> None:\n        self.root_path = '/'\n        self.running = False\n        self.address = None\n        self.js_callback = {}\n        self.js_api_endpoint = None\n        self.uid = str(uuid.uuid1())\n    @classmethod\n    def start_server(",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "SSLWSGIRefServer",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "class SSLWSGIRefServer(bottle.ServerAdapter):\n    def run(self, handler: WSGIApplication) -> None:  # pragma: no cover\n        import socket\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer, make_server\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self) -> str:  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw) -> None:\n                if not self.quiet:\n                    return WSGIRequestHandler.log_request(*args, **kw)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "ServerArgs",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "class ServerArgs(TypedDict, total=False):\n    keyfile: None\n    certfile: None\ndef start_server(\n    urls: list[str],\n    http_port: int | None = None,\n    server: type[ServerType] = BottleServer,\n    **server_args: Unpack[ServerArgs],\n) -> tuple[str, str | None, BottleServer]:\n    server = server if not server is None else BottleServer",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "start_server",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "def start_server(\n    urls: list[str],\n    http_port: int | None = None,\n    server: type[ServerType] = BottleServer,\n    **server_args: Unpack[ServerArgs],\n) -> tuple[str, str | None, BottleServer]:\n    server = server if not server is None else BottleServer\n    return server.start_server(urls, http_port, **server_args)\ndef start_global_server(\n    http_port: int | None = None,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "start_global_server",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "def start_global_server(\n    http_port: int | None = None,\n    urls: list[str] = ['.'],\n    server: type[ServerType] = BottleServer,\n    **server_args: Unpack[ServerArgs],\n) -> tuple[str, str | None, BottleServer]:\n    global global_server\n    address, common_path, global_server = start_server(\n        urls=urls, http_port=http_port, server=server, **server_args\n    )",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "WRHT_co",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "WRHT_co = TypeVar('WRHT_co', bound=WSGIRequestHandler, covariant=True)\nWST_co = TypeVar('WST_co', bound=WSGIServer, covariant=True)\nlogger = logging.getLogger('pywebview')\nglobal_server = None\ndef _get_random_port() -> int:\n    while True:\n        port = random.randint(1023, 65535)\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            try:\n                sock.bind(('localhost', port))",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "WST_co",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "WST_co = TypeVar('WST_co', bound=WSGIServer, covariant=True)\nlogger = logging.getLogger('pywebview')\nglobal_server = None\ndef _get_random_port() -> int:\n    while True:\n        port = random.randint(1023, 65535)\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            try:\n                sock.bind(('localhost', port))\n            except OSError:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nglobal_server = None\ndef _get_random_port() -> int:\n    while True:\n        port = random.randint(1023, 65535)\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            try:\n                sock.bind(('localhost', port))\n            except OSError:\n                logger.warning('Port %s is in use' % port)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "global_server",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "global_server = None\ndef _get_random_port() -> int:\n    while True:\n        port = random.randint(1023, 65535)\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            try:\n                sock.bind(('localhost', port))\n            except OSError:\n                logger.warning('Port %s is in use' % port)\n                continue",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "ServerType",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "peekOfCode": "ServerType = TypeVar('ServerType', bound=BottleServer, covariant=True)\nclass SSLWSGIRefServer(bottle.ServerAdapter):\n    def run(self, handler: WSGIApplication) -> None:  # pragma: no cover\n        import socket\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer, make_server\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self) -> str:  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw) -> None:\n                if not self.quiet:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.http",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "peekOfCode": "class Menu:\n    def __init__(self, title: str, items: list[Union[Menu, MenuAction, MenuSeparator]] = []) -> None:\n        \"\"\"\n        Args:\n            title: the menu or submenu title\n            items: the contents of the menu (can consist of Menu, MenuAction, or MenuSeparator instances)\n        \"\"\"\n        self.title = title\n        self.items = items\nclass MenuAction:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuAction",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "peekOfCode": "class MenuAction:\n    def __init__(self, title: str, function: Callable[[], Any]) -> None:\n        self.title = title\n        self.function = function\n        # TODO: support platform-agnostic shortcut\n        # self.shortcut = shortcut\nclass MenuSeparator:\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "documentation": {}
    },
    {
        "label": "MenuSeparator",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "peekOfCode": "class MenuSeparator:\n    pass",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.menu",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "peekOfCode": "class Request:\n    def __init__(self, url: str, method: str, headers: dict) -> None:\n        self.url = url\n        self.method = method\n        self.headers = copy(headers)\n    def __repr__(self) -> str:\n        return f'Request to {self.url} - {self.method}'\nclass Response:\n    def __init__(self, url: str, status_code: int, headers: dict) -> None:\n        self.url = url",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "peekOfCode": "class Response:\n    def __init__(self, url: str, status_code: int, headers: dict) -> None:\n        self.url = url\n        self.status_code = status_code\n        self.headers = headers\n    def __repr__(self) -> str:\n        return f'Response from {self.url} - {self.status_code}'",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.models",
        "documentation": {}
    },
    {
        "label": "Screen",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.screen",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.screen",
        "peekOfCode": "class Screen:\n    def __init__(self, x: int, y: int, width: int, height: int, frame: object = None) -> None:\n        self.x = int(x)\n        self.y = int(y)\n        self.width = int(width)\n        self.height = int(height)\n        self.frame = frame\n    def __str__(self) -> str:\n        return repr(self)\n    def __repr__(self) -> str:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.screen",
        "documentation": {}
    },
    {
        "label": "StateEventType",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "peekOfCode": "class StateEventType(StrEnum):\n    CHANGE = 'change'\n    DELETE = 'delete'\nclass State(dict):\n    _serializable = False\n    def __init__(self, window):\n        self.__event_handlers = []\n        self.__window = window\n    def __update_js(self, key, value):\n        special_key = '__pywebviewHaltUpdate__' + key",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "peekOfCode": "class State(dict):\n    _serializable = False\n    def __init__(self, window):\n        self.__event_handlers = []\n        self.__window = window\n    def __update_js(self, key, value):\n        special_key = '__pywebviewHaltUpdate__' + key\n        script = f\"window.pywebview.state.{special_key} = JSON.parse('{json.dumps(value)}')\"\n        self.__window.run_js(script)\n    def __notify_handlers(self, type, key, value=None):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.state",
        "documentation": {}
    },
    {
        "label": "ImmutableDict",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "class ImmutableDict(UserDict):\n    \"\"\"\"\n    A dictionary that does not allow adding new keys or deleting existing ones.\n    Only existing keys can be modified.\n    \"\"\"\n    def __init__(self, initial_data=None, **kwargs):\n        self.data = {}\n        if initial_data:\n            self.data.update(initial_data)\n        if kwargs:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "is_app",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def is_app(url: str | callable | None) -> bool:\n    \"\"\"Returns true if 'url' is a WSGI or ASGI app.\"\"\"\n    return callable(url)\ndef is_local_url(url: str | callable | None) -> bool:\n    return not ((is_app(url)) or (\n            (not url) or (url.startswith('http://')) or (url.startswith('https://')) or url.startswith('file://')))\ndef needs_server(urls: list[str]) -> bool:\n    return bool([url for url in urls if (is_app(url) or is_local_url(url))])\ndef get_app_root() -> str:\n    \"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "is_local_url",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def is_local_url(url: str | callable | None) -> bool:\n    return not ((is_app(url)) or (\n            (not url) or (url.startswith('http://')) or (url.startswith('https://')) or url.startswith('file://')))\ndef needs_server(urls: list[str]) -> bool:\n    return bool([url for url in urls if (is_app(url) or is_local_url(url))])\ndef get_app_root() -> str:\n    \"\"\"\n    Gets the file root of the application.\n    \"\"\"\n    if hasattr(sys, '_MEIPASS'):  # Pyinstaller",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "needs_server",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def needs_server(urls: list[str]) -> bool:\n    return bool([url for url in urls if (is_app(url) or is_local_url(url))])\ndef get_app_root() -> str:\n    \"\"\"\n    Gets the file root of the application.\n    \"\"\"\n    if hasattr(sys, '_MEIPASS'):  # Pyinstaller\n        return sys._MEIPASS\n    if os.getenv('RESOURCEPATH'): # py2app\n        return os.getenv('RESOURCEPATH')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "get_app_root",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def get_app_root() -> str:\n    \"\"\"\n    Gets the file root of the application.\n    \"\"\"\n    if hasattr(sys, '_MEIPASS'):  # Pyinstaller\n        return sys._MEIPASS\n    if os.getenv('RESOURCEPATH'): # py2app\n        return os.getenv('RESOURCEPATH')\n    if getattr(sys, 'frozen', False):  # cx_freeze\n        return os.path.dirname(sys.executable)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "abspath",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def abspath(path: str) -> str:\n    \"\"\"\n    Make path absolute, using the application root\n    \"\"\"\n    path = os.fspath(path)\n    if not os.path.isabs(path):\n        path = os.path.join(get_app_root(), path)\n    return os.path.normpath(path)\ndef base_uri(relative_path: str = '') -> str:\n    \"\"\"Get absolute path to resource, works for dev and for PyInstaller\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "base_uri",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def base_uri(relative_path: str = '') -> str:\n    \"\"\"Get absolute path to resource, works for dev and for PyInstaller\"\"\"\n    base_path = get_app_root()\n    if not os.path.exists(base_path):\n        raise ValueError(f'Path {base_path} does not exist')\n    return f'file://{os.path.join(base_path, relative_path)}'\ndef create_cookie(input_: dict[Any, Any] | str) -> SimpleCookie[str]:\n    if isinstance(input_, dict):\n        cookie = SimpleCookie()\n        name = input_['name']",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "create_cookie",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def create_cookie(input_: dict[Any, Any] | str) -> SimpleCookie[str]:\n    if isinstance(input_, dict):\n        cookie = SimpleCookie()\n        name = input_['name']\n        cookie[name] = input_['value']\n        cookie[name]['path'] = input_['path']\n        cookie[name]['domain'] = input_['domain']\n        cookie[name]['expires'] = input_['expires']\n        cookie[name]['secure'] = input_['secure']\n        cookie[name]['httponly'] = input_['httponly']",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "parse_file_type",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def parse_file_type(file_type: str) -> tuple[str, str]:\n    \"\"\"\n    :param file_type: file type string 'description (*.file_extension1;*.file_extension2)' as required by file filter in create_file_dialog\n    :return: (description, file extensions) tuple\n    \"\"\"\n    valid_file_filter = r'^([\\w ]+)\\((\\*(?:\\.(?:\\w+|\\*))*(?:;\\*\\.\\w+)*)\\)$'\n    match = re.search(valid_file_filter, file_type)\n    if match:\n        return match.group(1).rstrip(), match.group(2)\n    raise ValueError(f'{file_type} is not a valid file filter')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "inject_pywebview",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def inject_pywebview(platform: str, window: Window) -> str:\n    \"\"\"\"\n    Generates and injects a global window.pywebview object. The object contains exposed API functions\n    as well as utility functions required by pywebview. The function fires before_load event before\n    injecting the object and loaded event after the object is injected.\n    \"\"\"\n    exposed_objects = []\n    def get_args(func: object):\n        params = list(inspect.getfullargspec(func).args)\n        return params",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "inject_state",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def inject_state(window: Window):\n    \"\"\" Inject state after page is loaded\"\"\"\n    json_string = json.dumps(window.state)\ndef js_bridge_call(window: Window, func_name: str, param: Any, value_id: str) -> None:\n    \"\"\"\n    Calls a function from the JS API and executes it in Python. The function is executed in a separate\n    thread to prevent blocking the UI thread. The result is then passed back to the JS API.\n    \"\"\"\n    def _call():\n        try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "js_bridge_call",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def js_bridge_call(window: Window, func_name: str, param: Any, value_id: str) -> None:\n    \"\"\"\n    Calls a function from the JS API and executes it in Python. The function is executed in a separate\n    thread to prevent blocking the UI thread. The result is then passed back to the JS API.\n    \"\"\"\n    def _call():\n        try:\n            result = func(*func_params)\n            result = json.dumps(result).replace('\\\\', '\\\\\\\\').replace(\"'\", \"\\\\'\")\n            retval = f\"{{value: \\'{result}\\'}}\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "load_js_files",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def load_js_files(window: Window, platform: str) -> str:\n    \"\"\"\n    Load JS files in the order they should be loaded.\n    The order is polyfill, api, the rest and finish.js.\n    Return the concatenated JS code and the finish script, which must be loaded last and\n    separately in order to\n    \"\"\"\n    js_dir = get_js_dir()\n    logger.debug('Loading JS files from %s', js_dir)\n    js_files = glob(os.path.join(js_dir, '**', '*.js'), recursive=True)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "get_js_dir",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def get_js_dir() -> str:\n    \"\"\"\n    Get the path to the directory with Javascript files.\n    \"\"\"\n    path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'js')\n    if os.path.exists(path):\n        return path\n    # try py2app frozen path. This is hacky, but it works.\n    # See https://github.com/r0x0r/pywebview/issues/1565\n    if '.zip' in path:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "sort_js_files",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def sort_js_files(js_files: list[str]) -> list[str]:\n    \"\"\"\n    Sorts JS files in the order they should be loaded. Polyfill first, then API, then the rest and\n    finally finish.js that fires a pywebviewready event.\n    \"\"\"\n    LOAD_ORDER = { 'polyfill': 0, 'api': 1, 'state': 2 }\n    ordered_js_files = []\n    remaining_js_files = []\n    for file in js_files:\n        basename = os.path.splitext(os.path.basename(file))[0]",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "escape_string",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def escape_string(string: str) -> str:\n    return (\n        string.replace('\\\\', '\\\\\\\\').replace('\"', r\"\\\"\").replace('\\n', r'\\n').replace('\\r', r'\\r')\n    )\ndef escape_quotes(string: str) -> str:\n    if isinstance(string, str):\n        return string.replace('\"', r\"\\\"\").replace(\"'\", r\"\\'\")\n    else:\n        return string\ndef escape_line_breaks(string: str) -> str:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "escape_quotes",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def escape_quotes(string: str) -> str:\n    if isinstance(string, str):\n        return string.replace('\"', r\"\\\"\").replace(\"'\", r\"\\'\")\n    else:\n        return string\ndef escape_line_breaks(string: str) -> str:\n    return string.replace('\\\\n', '\\\\\\\\n').replace('\\\\r', '\\\\\\\\r')\ndef inject_base_uri(content: str, base_uri: str) -> str:\n    pattern = r'<%s(?:[\\s]+[^>]*|)>'\n    base_tag = f'<base href=\"{base_uri}\">'",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "escape_line_breaks",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def escape_line_breaks(string: str) -> str:\n    return string.replace('\\\\n', '\\\\\\\\n').replace('\\\\r', '\\\\\\\\r')\ndef inject_base_uri(content: str, base_uri: str) -> str:\n    pattern = r'<%s(?:[\\s]+[^>]*|)>'\n    base_tag = f'<base href=\"{base_uri}\">'\n    match = re.search(pattern % 'base', content)\n    if match:\n        return content\n    match = re.search(pattern % 'head', content)\n    if match:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "inject_base_uri",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def inject_base_uri(content: str, base_uri: str) -> str:\n    pattern = r'<%s(?:[\\s]+[^>]*|)>'\n    base_tag = f'<base href=\"{base_uri}\">'\n    match = re.search(pattern % 'base', content)\n    if match:\n        return content\n    match = re.search(pattern % 'head', content)\n    if match:\n        tag = match.group()\n        return content.replace(tag, tag + base_tag)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "interop_dll_path",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def interop_dll_path(dll_name: str) -> str:\n    if dll_name == 'WebBrowserInterop.dll':\n        dll_name = (\n            'WebBrowserInterop.x64.dll'\n            if architecture()[0] == '64bit'\n            else 'WebBrowserInterop.x86.dll'\n        )\n    # Unfrozen path\n    dll_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib', dll_name)\n    if os.path.exists(dll_path):",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "environ_append",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def environ_append(key: str, *values: str, sep=' ') -> None:\n    '''Append values to an environment variable, separated by sep'''\n    values = list(values)\n    existing = os.environ.get(key, '')\n    if existing:\n        values = [existing] + values\n    os.environ[key] = sep.join(values)\ndef css_to_camel(css_case_string: str) -> str:\n    words = css_case_string.split('-')\n    camel_case_string = words[0] + ''.join(word.capitalize() for word in words[1:])",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "css_to_camel",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def css_to_camel(css_case_string: str) -> str:\n    words = css_case_string.split('-')\n    camel_case_string = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_string\ndef android_jar_path() -> str:\n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib', 'pywebview-android.jar')\ndef stringify_headers(headers: dict[str, Any]) -> dict[str, str]:\n    return {k: str(v) for k, v in headers.items()}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "android_jar_path",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def android_jar_path() -> str:\n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib', 'pywebview-android.jar')\ndef stringify_headers(headers: dict[str, Any]) -> dict[str, str]:\n    return {k: str(v) for k, v in headers.items()}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "stringify_headers",
        "kind": 2,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "def stringify_headers(headers: dict[str, Any]) -> dict[str, str]:\n    return {k: str(v) for k, v in headers.items()}",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "_TOKEN",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "_TOKEN = uuid4().hex\nDEFAULT_HTML = \"\"\"\n    <!doctype html>\n    <html>\n        <head>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0\">\n        </head>\n        <body></body>\n    </html>\n\"\"\"",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "DEFAULT_HTML",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "DEFAULT_HTML = \"\"\"\n    <!doctype html>\n    <html>\n        <head>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0\">\n        </head>\n        <body></body>\n    </html>\n\"\"\"\nlogger = logging.getLogger('pywebview')",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "peekOfCode": "logger = logging.getLogger('pywebview')\nclass ImmutableDict(UserDict):\n    \"\"\"\"\n    A dictionary that does not allow adding new keys or deleting existing ones.\n    Only existing keys can be modified.\n    \"\"\"\n    def __init__(self, initial_data=None, **kwargs):\n        self.data = {}\n        if initial_data:\n            self.data.update(initial_data)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.util",
        "documentation": {}
    },
    {
        "label": "FixPoint",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "peekOfCode": "class FixPoint(Flag):\n    NORTH = auto()\n    WEST = auto()\n    EAST = auto()\n    SOUTH = auto()\nclass Window:\n    def __init__(\n        self,\n        uid: str,\n        title: str,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "peekOfCode": "class Window:\n    def __init__(\n        self,\n        uid: str,\n        title: str,\n        url: str | None,\n        html: str = '',\n        width: int = 800,\n        height: int = 600,\n        x: int | None = None,",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "peekOfCode": "P = ParamSpec('P')\nT = TypeVar('T')\nlogger = logging.getLogger('pywebview')\ndef _api_call(function: WindowFunc[P, T], event_type: str) -> WindowFunc[P, T]:\n    \"\"\"\n    Decorator to call a pywebview API, checking for _webview_ready and raisings\n    appropriate Exceptions on failure.\n    \"\"\"\n    @wraps(function)\n    def wrapper(self: Window, *args: P.args, **kwargs: P.kwargs) -> T:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "peekOfCode": "T = TypeVar('T')\nlogger = logging.getLogger('pywebview')\ndef _api_call(function: WindowFunc[P, T], event_type: str) -> WindowFunc[P, T]:\n    \"\"\"\n    Decorator to call a pywebview API, checking for _webview_ready and raisings\n    appropriate Exceptions on failure.\n    \"\"\"\n    @wraps(function)\n    def wrapper(self: Window, *args: P.args, **kwargs: P.kwargs) -> T:\n        event = getattr(self.events, event_type)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "peekOfCode": "logger = logging.getLogger('pywebview')\ndef _api_call(function: WindowFunc[P, T], event_type: str) -> WindowFunc[P, T]:\n    \"\"\"\n    Decorator to call a pywebview API, checking for _webview_ready and raisings\n    appropriate Exceptions on failure.\n    \"\"\"\n    @wraps(function)\n    def wrapper(self: Window, *args: P.args, **kwargs: P.kwargs) -> T:\n        event = getattr(self.events, event_type)\n        try:",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview.window",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "peekOfCode": "__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "peekOfCode": "TYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "peekOfCode": "__version__ = version = '6.0'\n__version_tuple__ = version_tuple = (6, 0)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "documentation": {}
    },
    {
        "label": "__version_tuple__",
        "kind": 5,
        "importPath": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "description": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "peekOfCode": "__version_tuple__ = version_tuple = (6, 0)",
        "detail": "flask-pos2.3.dist.TreasurePOS._internal.webview._version",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class cached_property(object):\n    \"\"\" A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. \"\"\"\n    def __init__(self, func):\n        update_wrapper(self, func)\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    \"\"\" A property that caches itself to the class object. \"\"\"\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if\n                  len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class Router(object):\n    \"\"\" A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    \"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class Route(object):\n    \"\"\" This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turning an URL path rule into a regular expression usable by the Router.\n    \"\"\"\n    def __init__(self, app, rule, method, callback,\n                 name=None,\n                 plugins=None,\n                 skiplist=None, **config):\n        #: The application this route is installed to.",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    @lazy_attribute\n    def _global_config(cls):\n        cfg = ConfigDict()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ', )\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, _):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n    \"\"\"\n    default_status = 200\n    default_content_type = 'text/html; charset=UTF-8'\n    # Header denylist for specific response codes\n    # (rfc2616 section 10.2.3 and 10.3.5)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    \"\"\" A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). \"\"\"\n    bind = BaseRequest.__init__\n    environ = _local_property()\nclass LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    \"\"\"\n    bind = BaseResponse.__init__\n    _status_line = _local_property()\n    _status_code = _local_property()\n    _cookies = _local_property()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    \"\"\" A subclass of :class:`HTTPResponse` that triggers error handlers. \"\"\"\n    default_status = 500\n    def __init__(self,\n                 status=None,\n                 body=None,\n                 exception=None,\n                 traceback=None, **more_headers):\n        self.exception = exception\n        self.traceback = traceback",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class PluginError(BottleException):\n    pass\nclass JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")\n        app.config._define('json.ascii', default=False, validate=bool,\n                          help=\"Use only 7-bit ASCII characters in output.\")",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    \"\"\" This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. \"\"\"\n    name = 'template'\n    api = 2\n    def setup(self, app):\n        app.tpl = self\n    def apply(self, callback, route):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        \"\"\" Create a virtual package that redirects imports (see PEP 302). \"\"\"\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, new_module(name))\n        self.module.__dict__.update({\n            '__file__': __file__,\n            '__path__': [],\n            '__all__': [],",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self):\n        return len(self.dict)\n    def __iter__(self):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    \"\"\" This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. \"\"\"\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key):\n        return _hkey(key) in self.dict\n    def __delitem__(self, key):\n        del self.dict[_hkey(key)]",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    \"\"\" This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    \"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}\n        self._change_listener = []",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self.default\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024 * 64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in 'fileno', 'close', 'read', 'readlines', 'tell', 'seek':\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        part = read(buff)\n        while part:\n            yield part",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class _closeiter(object):\n    \"\"\" This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). \"\"\"\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class ResourceManager(object):\n    \"\"\" This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    \"\"\"\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = opener",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        \"\"\" Wrapper for a single file uploaded via ``multipart/form-data``. \"\"\"\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultipartError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)\nclass _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartParser",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,\n        mem_limit=2 ** 20,\n        memfile_limit=2 ** 18,\n        buffer_size=2 ** 16,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartPart",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class _MultipartPart(object):\n    def __init__(self, buffer_size=2 ** 16, memfile_limit=2 ** 18, charset=\"latin1\"):\n        self.headerlist = []\n        self.headers = None\n        self.file = False\n        self.size = 0\n        self._buf = b\"\"\n        self.disposition = None\n        self.name = None\n        self.filename = None",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler):  # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join('%s=%s' % (k, repr(v))",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler):  # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self):  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"The wsgi server part of cherrypy was split into a new \"\n                    \"project called 'cheroot'.\", \"Use the 'cheroot' server \"\n                    \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port, _quiet=self.quiet, **self.options)\nclass PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,\n                         host=self.host,\n                         port=str(self.port), **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler):  # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port, address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        depr(0, 13, \"AppEngineServer no longer required\",\n             \"Configure your application directly in your app.yaml\")\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        depr(0, 13, \"Diesel is not tested or supported and will be removed.\")\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"\n            raise RuntimeError(msg)\n        if self.quiet:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import BaseApplication\n        if self.host.startswith(\"unix:\"):\n            config = {'bind': self.host}\n        else:\n            config = {'bind': \"%s:%d\" % (self.host, self.port)}\n        config.update(self.options)\n        class GunicornApplication(BaseApplication):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `backlog` adjust the eventlet backlog parameter which is the maximum\n          number of queued connections. Should be at least 1; the maximum\n          value is system-dependent.\n        * `family`: (default is 2) socket family, optional. See socket\n          documentation for available families.\n    \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen, patcher",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port, reuse_port=True)\nclass AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AsyncioServerAdapter",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):\n        import asyncio\n        return asyncio.new_event_loop()\n    def run(self, handler):\n        import asyncio",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpUVLoopServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AiohttpUVLoopServer(AiohttpServer):\n    \"\"\"uvloop\n       https://github.com/MagicStack/uvloop\n    \"\"\"\n    def get_event_loop(self):\n        import uvloop\n        return uvloop.new_event_loop()\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    \"\"\" Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets too old. \"\"\"\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.daemon = True\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class TemplateError(BottleException):\n    pass\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,\n                 lookup=None,\n                 encoding='utf8', **settings):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding': self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)\n        if self.source:\n            self.tpl = self.env.from_string(self.source)\n        else:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self,\n                escape_func=html_escape,\n                noescape=False,\n                syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError):\n    pass\nclass StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "class StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')\n            |\"\"(?!\")\n            |'{6}",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    if isinstance(s, unicode):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError:\n        pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\\n           \"Fix: %s\\n\" % (major, minor, cause, fix)\n    if DEBUG == 'strict':\n        raise DeprecationWarning(text)\n    warnings.warn(text, DeprecationWarning, stacklevel=stacklevel)\n    return DeprecationWarning(text)\ndef makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):\n        return list(data)\n    elif data:\n        return [data]\n    else:\n        return []\nclass DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def static_file(filename, root,\n                mimetype=True,\n                download=False,\n                charset='UTF-8',\n                etag=None,\n                headers=None):\n    \"\"\" Open a file in a safe way and return an instance of :exc:`HTTPResponse`\n        that can be sent back to the client.\n        :param filename: Name or path of the file to send, relative to ``root``.\n        :param root: Root path for file lookups. Should be an absolute directory",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):\n        # aware datetime.datetime is converted to UTC time\n        # naive datetime.datetime is treated as UTC time\n        value = value.utctimetuple()\n    elif isinstance(value, datedate):\n        # datetime.date is naive, and is treated as UTC time\n        value = value.timetuple()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return calendar.timegm(ts[:8] + (0, )) - (ts[9] or 0)\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':', 1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    \"\"\" Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.\"\"\"\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen - int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def cookie_encode(data, key, digestmod=None):\n    \"\"\" Encode and sign a pickle-able object. Return a (byte) string \"\"\"\n    depr(0, 13, \"cookie_encode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    digestmod = digestmod or hashlib.sha256\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=digestmod).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"\n    depr(0, 13, \"cookie_decode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        digestmod = digestmod or hashlib.sha256\n        hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()\n        if _lscmp(sig[1:], base64.b64encode(hashed)):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    \"\"\" Return True if the argument looks like a encoded cookie.\"\"\"\n    depr(0, 13, \"cookie_is_encoded() will be removed soon.\",\n                \"Do not use this API directly.\")\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__', '/').lstrip('/')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    \"\"\" Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    \"\"\"\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    \"\"\" Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    \"\"\" Return a callable that relays calls to the current default app. \"\"\"\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN\n    NORUN, nr_old = True, NORUN\n    tmp = default_app.push()  # Create a new \"default application\"\n    try:\n        rv = load(target)  # Import the target module\n        return rv if callable(rv) else tmp",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,\n        config=None, **kargs):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    \"\"\"\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    \"\"\"\n    tpl = args[0] if args else None\n    for dictarg in args[1:]:\n        kwargs.update(dictarg)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"\n    def decorator(func):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "def main():\n    _main(sys.argv)\nif __name__ == '__main__':  # pragma: no coverage\n    main()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=args[0], usage=\"%(prog)s [options] package.module:app\")",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "py = sys.version_info\npy3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "py3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError\n    from collections.abc import MutableMapping as DictMixin",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_UNSET",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "_UNSET = object()\nclass ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_hsplit",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "_hsplit = re.compile('(?:(?:\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\")|([^;,=]+))([;,=]?)').findall\ndef _parse_http_header(h):\n    \"\"\" Parses a typical multi-valued and parametrised HTTP header (e.g. Accept headers) and returns a list of values\n        and parameters. For non-standard or broken input, this implementation may return partial results.\n    :param h: A header string (e.g. ``text/html,text/plain;q=0.9,*/*;q=0.8``)\n    :return: List of (value, params) tuples. The second element is a (possibly empty) dict.\n    \"\"\"\n    values = []\n    if '\"' not in h:  # INFO: Fast path without regexp (~2x faster)\n        for value in h.split(','):",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Multipart Handling ###########################################################\n###############################################################################\n# cgi.FieldStorage was deprecated in Python 3.11 and removed in 3.13\n# This implementation is based on https://github.com/defnull/multipart/\nclass MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "NORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[451]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans-serif;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "apps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.bottle",
        "description": "flask-pos2.3.venv.Scripts.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)\n        sys.exit(1)\n    if args.version:\n        print('Bottle %s' % __version__)",
        "detail": "flask-pos2.3.venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "description": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "flask-pos2.3.venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "get_lang",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def get_lang():\n    lang = request.cookies.get('lang')\n    if lang not in TEXTS:\n        lang = 'ko'\n    return lang\ndef t(key: str, default: str = None, lang: str = None) -> str:\n    \"\"\"多语言取词：优先当前语言；其次英文；最后用 key 或 default\"\"\"\n    lang = lang or get_lang()\n    return TEXTS.get(lang, TEXTS['ko']).get(key, TEXTS['en'].get(key, default if default is not None else key))\nbase_path = os.path.abspath(os.path.dirname(__file__))",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def t(key: str, default: str = None, lang: str = None) -> str:\n    \"\"\"多语言取词：优先当前语言；其次英文；最后用 key 或 default\"\"\"\n    lang = lang or get_lang()\n    return TEXTS.get(lang, TEXTS['ko']).get(key, TEXTS['en'].get(key, default if default is not None else key))\nbase_path = os.path.abspath(os.path.dirname(__file__))\napp = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "is_safe_image_relpath",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def is_safe_image_relpath(p: str) -> bool:\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False\n    if not SAFE_IMAGE_RE.fullmatch(p):\n        return False\n    abs_path = os.path.normpath(os.path.join(app.static_folder, p))",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "connect_db",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def connect_db():\n    db_path = os.path.join(base_path, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    conn.execute('PRAGMA foreign_keys=ON')\n    conn.execute('PRAGMA synchronous=NORMAL')\n    conn.execute('PRAGMA temp_store=MEMORY')\n    conn.execute('PRAGMA cache_size=-4000')  # ~4MB\n    return conn\n# ---- 通用：金额转“整数”（四舍五入） ----\ndef to_amount_int(v, default=0):",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "to_amount_int",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def to_amount_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return int(round(float(v)))\n    except Exception:\n        return default",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "healthz",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def healthz():\n    return 'ok', 200\n# ---- 数据库初始化（添加 *_int 字段，及 sale_items.price_int） ----\ndef init_db():\n    db_path = os.path.join(base_path, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute('PRAGMA journal_mode=WAL')\n    c.execute('PRAGMA synchronous=NORMAL')\n    c.execute('''",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def init_db():\n    db_path = os.path.join(base_path, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute('PRAGMA journal_mode=WAL')\n    c.execute('PRAGMA synchronous=NORMAL')\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            barcode TEXT UNIQUE,",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "safe_filename",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def safe_filename(filename):\n    return re.sub(r'[^A-Za-z0-9_\\-]', '_', filename or '')\n@app.route('/set_lang/<lang>')\ndef set_lang(lang):\n    if lang not in TEXTS:\n        lang = 'ko'\n    resp = make_response(redirect(request.referrer or url_for('settings')))\n    resp.set_cookie('lang', lang, max_age=3600*24*365)\n    return resp\n@app.route('/')",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "set_lang",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def set_lang(lang):\n    if lang not in TEXTS:\n        lang = 'ko'\n    resp = make_response(redirect(request.referrer or url_for('settings')))\n    resp.set_cookie('lang', lang, max_age=3600*24*365)\n    return resp\n@app.route('/')\ndef index():\n    lang = get_lang()\n    return render_template('index.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def index():\n    lang = get_lang()\n    return render_template('index.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/manage')\ndef manage():\n    lang = get_lang()\n    return render_template('manage.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/sales')\ndef sales_page():\n    lang = get_lang()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "manage",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def manage():\n    lang = get_lang()\n    return render_template('manage.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/sales')\ndef sales_page():\n    lang = get_lang()\n    return render_template('sales.html', lang=lang, texts=TEXTS[lang])\n@app.route('/stocklog')\ndef stocklog():\n    lang = get_lang()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "sales_page",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def sales_page():\n    lang = get_lang()\n    return render_template('sales.html', lang=lang, texts=TEXTS[lang])\n@app.route('/stocklog')\ndef stocklog():\n    lang = get_lang()\n    return render_template('stocklog.html', lang=lang, texts=TEXTS[lang])\n@app.route('/settings')\ndef settings():\n    lang = get_lang()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "stocklog",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def stocklog():\n    lang = get_lang()\n    return render_template('stocklog.html', lang=lang, texts=TEXTS[lang])\n@app.route('/settings')\ndef settings():\n    lang = get_lang()\n    return render_template('settings.html', lang=lang, texts=TEXTS[lang])\n# ---- 工具：安全类型转换 ----\ndef to_int(v, default=0):\n    try:",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def settings():\n    lang = get_lang()\n    return render_template('settings.html', lang=lang, texts=TEXTS[lang])\n# ---- 工具：安全类型转换 ----\ndef to_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "to_int",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def to_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return int(float(v))\n    except Exception:\n        return default",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "to_float",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def to_float(v, default=0.0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return float(v)\n    except Exception:\n        return default",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "norm_category",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def norm_category(cat):\n    cat = (cat or '').strip().lower()\n    return cat if cat in CATEGORY_CODE else CATEGORY_CODE[0]\ndef norm_size(sz):\n    sz = (sz or '').strip().lower()\n    return sz if sz in SIZE_CODE else SIZE_CODE[0]\n# ---- Excel 导入导出接口 ----\n@app.route('/export/items')\ndef export_items():\n    conn = connect_db()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "norm_size",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def norm_size(sz):\n    sz = (sz or '').strip().lower()\n    return sz if sz in SIZE_CODE else SIZE_CODE[0]\n# ---- Excel 导入导出接口 ----\n@app.route('/export/items')\ndef export_items():\n    conn = connect_db()\n    # 导出用整数列；旧数据回落到 ROUND(price)\n    df = pd.read_sql_query(\n        '''",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "export_items",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def export_items():\n    conn = connect_db()\n    # 导出用整数列；旧数据回落到 ROUND(price)\n    df = pd.read_sql_query(\n        '''\n        SELECT barcode,\n               name,\n               COALESCE(price_int, CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(wholesale_price_int, CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, discontinued_time, image",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "export_sales",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def export_sales():\n    \"\"\"支持过滤 + CSV 流式导出（金额为整数）\"\"\"\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    fmt = (request.args.get('fmt') or 'xlsx').lower()\n    where = []\n    params = []\n    if start and end:\n        where.append(\"time BETWEEN ? AND ?\")",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "import_items",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def import_items():\n    file = request.files.get('file')\n    if not file:\n        return jsonify({'msg': '파일이 없습니다'}), 400\n    try:\n        df = pd.read_excel(file)\n    except Exception as e:\n        return jsonify({'msg': f'엑셀 오류: {e}'}), 400\n    conn = connect_db()\n    c = conn.cursor()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def add_item():\n    if request.content_type and request.content_type.startswith('multipart'):\n        barcode = (request.form.get('barcode') or '').strip()\n        if not barcode:\n            return jsonify({'msg': t('barcode_required')}), 400\n        barcode_safe = safe_filename(barcode)\n        name = request.form.get('name', '이름 없음')\n        price_i = to_amount_int(request.form.get('price', 0), 0)\n        wholesale_i = to_amount_int(request.form.get('wholesale_price', 0), 0)\n        qty = to_int(request.form.get('qty', 0), 0)",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "edit_item",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def edit_item(barcode):\n    barcode = (barcode or '').strip()\n    if not barcode:\n        return jsonify({'msg': t('barcode_required')}), 400\n    barcode_safe = safe_filename(barcode)\n    if request.content_type and request.content_type.startswith('multipart'):\n        name = request.form.get('name')\n        price_i = to_amount_int(request.form.get('price', 0), 0)\n        wholesale_i = to_amount_int(request.form.get('wholesale_price', 0), 0)\n        qty = to_int(request.form.get('qty', 0), 0)",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def get_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    # 输出整数价格（旧数据自动回落）\n    c.execute('''\n        SELECT barcode, name,\n               COALESCE(price_int, CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(wholesale_price_int, CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, image, discontinued_time\n        FROM items WHERE barcode=?",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "del_item",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def del_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('SELECT image FROM items WHERE barcode=?', (barcode,))\n    row = c.fetchone()\n    if row and row[0] and is_safe_image_relpath(row[0]):\n        img_path = os.path.normpath(os.path.join(app.static_folder, row[0]))\n        try:\n            if os.path.exists(img_path):\n                os.remove(img_path)",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "restore_item",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def restore_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('UPDATE items SET status=\"정상\", discontinued_time=NULL WHERE barcode=?', (barcode,))\n    conn.commit()\n    conn.close()\n    return jsonify({'success': True})\n# ========= TOP10（原有） =========\n@app.route('/api/sales/top_items')\ndef api_sales_top_items():",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_sales_top_items",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_sales_top_items():\n    days = int(request.args.get('days', 60) or 60)\n    pay_type = request.args.get('pay_type')\n    since = (datetime.now() - timedelta(days=days)).strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    sql = \"SELECT time, items FROM sales WHERE time >= ?\"\n    params = [since]\n    if pay_type in ('cash', 'card'):\n        sql += \" AND pay_type=?\"",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def get_items():\n    category = request.args.get('category', None)\n    sort = request.args.get('sort', None)\n    conn = connect_db()\n    c = conn.cursor()\n    base_sql = '''\n        SELECT barcode, name,\n               COALESCE(price_int, CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(wholesale_price_int, CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, image, discontinued_time",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "search_items",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def search_items():\n    q = (request.args.get('q') or '').strip()\n    category = request.args.get('category')\n    sort = request.args.get('sort')\n    try:\n        page = max(1, int(request.args.get('page', 1) or 1))\n    except Exception:\n        page = 1\n    try:\n        page_size = max(1, min(200, int(request.args.get('page_size', 50) or 50)))",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_item_sales",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_item_sales(barcode):\n    \"\"\"优先走 sale_items（整数价）；老库无明细或无 *_int 列时回退旧逻辑\"\"\"\n    conn = connect_db()\n    c = conn.cursor()\n    try:\n        # 如果有明细与 price_int\n        c.execute('SELECT 1 FROM sale_items WHERE barcode=? LIMIT 1', (barcode,))\n        test = c.fetchone()\n        if test is not None:\n            c.execute('''",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "sale",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def sale():\n    data = request.json or {}\n    cart = data.get('cart', {}) or {}\n    total_i = to_amount_int(data.get('total', 0), 0)\n    pay_type = data.get('pay_type', 'cash')\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    try:\n        # 校验",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_sales",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_sales():\n    try:\n        page = max(1, int(request.args.get('page', 1) or 1))\n    except Exception:\n        page = 1\n    try:\n        page_size = max(1, min(200, int(request.args.get('page_size', 20) or 20)))\n    except Exception:\n        page_size = 20\n    pay_type = request.args.get('pay_type')  # 'cash' / 'card' / None",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_delete_sales",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_delete_sales():\n    data = request.get_json(force=True) or {}\n    ids = data.get('ids', []) or []\n    reason = data.get('reason', 'mistake')\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    deleted = 0\n    failed = 0\n    not_found = 0",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_refund_sale",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_refund_sale():\n    data = request.get_json(force=True) or {}\n    ids = data.get('ids', []) or []\n    reason = data.get('reason', 'refund')\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    updated = 0\n    failed = 0\n    skipped_already_refunded = 0",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_refund_stats",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_refund_stats():\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute(\"SELECT reason, count(*), sum(amount) FROM refund_log GROUP BY reason\")\n    result = []\n    for reason, cnt, total in c.fetchall():\n        result.append({'reason': reason, 'count': cnt, 'amount': total or 0})\n    conn.close()\n    return jsonify(result)\n# ========= 销售统计（按整数总额） =========",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_sales_stats",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_sales_stats():\n    group = request.args.get('group', 'day')\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    conn = connect_db()\n    c = conn.cursor()\n    query = '''\n        SELECT time, COALESCE(total_int, CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type\n        FROM sales",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_heatmap_hour_weekday",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_heatmap_hour_weekday():\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    metric = request.args.get('metric', 'orders')\n    conn = connect_db()\n    c = conn.cursor()\n    query = '''\n        SELECT time, items, COALESCE(total_int, CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type\n        FROM sales",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "api_stockio",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def api_stockio():\n    data = request.get_json(force=True) or {}\n    barcode = (data.get('barcode') or '').strip()\n    change = to_int(data.get('change'), 0)\n    io_type = data.get('type', 'in')  # in / out\n    if not barcode or change <= 0:\n        return jsonify({'msg': t('invalid_params')}), 400\n    delta = change if io_type == 'in' else -change\n    conn = connect_db()\n    c = conn.cursor()",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "receipt",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def receipt(sale_id):\n    lang = get_lang()\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('SELECT time, items, COALESCE(total_int, CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return f'No such sale_id: {sale_id}', 404\n    time, items_json, subtotal_i, pay_type = row",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "image_to_zpl",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def image_to_zpl(image_path, image_name=\"RECEIPT.GRF\"):\n    img = Image.open(image_path).convert(\"L\")\n    threshold = 200\n    img = img.point(lambda x: 255 if x > threshold else 0, mode='1')\n    img = ImageOps.invert(img.convert('L')).convert('1')\n    w, h = img.size\n    row_bytes = (w + 7) // 8\n    total_bytes = row_bytes * h\n    data = img.tobytes()\n    zpl_data = \"\"",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "print_receipt",
        "kind": 2,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "def print_receipt(sale_id):\n    from flask import jsonify\n    H = _estimate_receipt_height(sale_id)\n    W = 624\n    tmp_img_path = None\n    try:\n        base_url = (request.host_url or \"http://127.0.0.1:5000\").rstrip('/')\n        url = f\"{base_url}/receipt/{sale_id}?for_print=1\"\n        hti = Html2Image()\n        with tempfile.NamedTemporaryFile(delete=False, suffix=\".png\") as tmpf:",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "CATEGORY_CODE",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "CATEGORY_CODE = ['bag', 'top', 'bottom', 'shoes']\nSIZE_CODE = ['free', 's', 'm', 'l', 'xl']\nTEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '단가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "SIZE_CODE",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "SIZE_CODE = ['free', 's', 'm', 'l', 'xl']\nTEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '단가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',\n        'print_ok': '영수증 출력 성공', 'print_fail': '영수증 출력 실패', 'sale_ok': '결제 성공!',",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "TEXTS",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "TEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '단가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',\n        'print_ok': '영수증 출력 성공', 'print_fail': '영수증 출력 실패', 'sale_ok': '결제 성공!',\n        'added': '장바구니에 추가됨', 'remove': '삭제됨', 'empty_cart': '장바구니가 비었습니다',",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "base_path",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "base_path = os.path.abspath(os.path.dirname(__file__))\napp = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)\n# 仅允许本机端口 5000（固定 5000）\nCORS(app, resources={\n    r\"/*\": {\"origins\": [re.compile(r\"^http://127\\.0\\.0\\.1:\\d+$\"),\n                       re.compile(r\"^http://localhost:\\d+$\")]}",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)\n# 仅允许本机端口 5000（固定 5000）\nCORS(app, resources={\n    r\"/*\": {\"origins\": [re.compile(r\"^http://127\\.0\\.0\\.1:\\d+$\"),\n                       re.compile(r\"^http://localhost:\\d+$\")]}\n})",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "UPLOAD_FOLDER = os.path.join(base_path, 'uploads')\nIMAGE_FOLDER = os.path.join(app.static_folder, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# ===== 安全校验：仅允许 static/images 下的受控相对路径 =====\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    if not p:\n        return False",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "IMAGE_FOLDER",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "IMAGE_FOLDER = os.path.join(app.static_folder, 'images')\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(IMAGE_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# ===== 安全校验：仅允许 static/images 下的受控相对路径 =====\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# ===== 安全校验：仅允许 static/images 下的受控相对路径 =====\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "SAFE_IMAGE_RE",
        "kind": 5,
        "importPath": "flask-pos2.3.app",
        "description": "flask-pos2.3.app",
        "peekOfCode": "SAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False\n    if not SAFE_IMAGE_RE.fullmatch(p):\n        return False",
        "detail": "flask-pos2.3.app",
        "documentation": {}
    },
    {
        "label": "is_listening",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:\n        return False\ndef pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"\n    if not is_listening(preferred):\n        return preferred",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "pick_port",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"\n    if not is_listening(preferred):\n        return preferred\n    for p in range(preferred + 1, preferred + 11):\n        if not is_listening(p):\n            return p\n    s = socket.socket(); s.bind(('127.0.0.1', 0))\n    p = s.getsockname()[1]; s.close()\n    return p",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "wait_port",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def wait_port(port: int, timeout: float = 12.0) -> bool:\n    t0 = time.time()\n    while time.time() - t0 < timeout:\n        if is_listening(port):\n            return True\n        time.sleep(0.12)\n    return False\n# 不使用系统代理的 opener（本地健康检查走直连）\n_NO_PROXY_OPENER = urllib.request.build_opener(urllib.request.ProxyHandler({}))\ndef http_ok(url: str, path: str) -> bool:",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "http_ok",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def http_ok(url: str, path: str) -> bool:\n    try:\n        with _NO_PROXY_OPENER.open(url + path, timeout=0.9) as r:\n            return 200 <= r.status < 400\n    except Exception:\n        return False\ndef wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()\n    while time.time() - t0 < timeout:",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "wait_http_ready",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()\n    while time.time() - t0 < timeout:\n        if http_ok(base_url, '/healthz') or http_ok(base_url, '/'):\n            return True\n        time.sleep(0.2)\n    return False\n# ---------------- 启动 Flask ----------------\ndef run_flask(port: int):",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "def run_flask(port: int):\n    try:\n        from app import app, init_db\n        init_db()\n        logging.info(f'Flask 服务启动中：127.0.0.1:{port}')\n        app.run(host='127.0.0.1', port=port, debug=False, use_reloader=False, threaded=True)\n    except Exception as e:\n        logging.exception(f'Flask 启动失败：{e}')\n# ---------------- 程序入口 ----------------\nif __name__ == '__main__':",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "os.environ['NO_PROXY']",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "os.environ['NO_PROXY'] = '127.0.0.1,localhost'\nos.environ['no_proxy'] = '127.0.0.1,localhost'\n# ---------------- 日志（控制台 + 文件，启动/异常都可追溯） ----------------\nLOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "os.environ['no_proxy']",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "os.environ['no_proxy'] = '127.0.0.1,localhost'\n# ---------------- 日志（控制台 + 文件，启动/异常都可追溯） ----------------\nLOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "LOG_DIR",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "LOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "LOG_PATH",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "LOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "fmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "root = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "ch",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "ch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "fh",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "fh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "PREFERRED_PORT",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "PREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:\n        return False\ndef pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    },
    {
        "label": "_NO_PROXY_OPENER",
        "kind": 5,
        "importPath": "flask-pos2.3.main",
        "description": "flask-pos2.3.main",
        "peekOfCode": "_NO_PROXY_OPENER = urllib.request.build_opener(urllib.request.ProxyHandler({}))\ndef http_ok(url: str, path: str) -> bool:\n    try:\n        with _NO_PROXY_OPENER.open(url + path, timeout=0.9) as r:\n            return 200 <= r.status < 400\n    except Exception:\n        return False\ndef wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()",
        "detail": "flask-pos2.3.main",
        "documentation": {}
    }
]