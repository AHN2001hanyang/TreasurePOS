[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "BadZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "after_this_request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Html2Image",
        "importPath": "html2image",
        "description": "html2image",
        "isExtraImport": true,
        "detail": "html2image",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageOps",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "webview",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webview",
        "description": "webview",
        "detail": "webview",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class cached_property(object):\n    \"\"\" A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. \"\"\"\n    def __init__(self, func):\n        update_wrapper(self, func)\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    \"\"\" A property that caches itself to the class object. \"\"\"\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if\n                  len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Router(object):\n    \"\"\" A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Route(object):\n    \"\"\" This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turning an URL path rule into a regular expression usable by the Router.\n    \"\"\"\n    def __init__(self, app, rule, method, callback,\n                 name=None,\n                 plugins=None,\n                 skiplist=None, **config):\n        #: The application this route is installed to.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    @lazy_attribute\n    def _global_config(cls):\n        cfg = ConfigDict()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ', )\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, _):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n    \"\"\"\n    default_status = 200\n    default_content_type = 'text/html; charset=UTF-8'\n    # Header denylist for specific response codes\n    # (rfc2616 section 10.2.3 and 10.3.5)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    \"\"\" A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). \"\"\"\n    bind = BaseRequest.__init__\n    environ = _local_property()\nclass LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    \"\"\"\n    bind = BaseResponse.__init__\n    _status_line = _local_property()\n    _status_code = _local_property()\n    _cookies = _local_property()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    \"\"\" A subclass of :class:`HTTPResponse` that triggers error handlers. \"\"\"\n    default_status = 500\n    def __init__(self,\n                 status=None,\n                 body=None,\n                 exception=None,\n                 traceback=None, **more_headers):\n        self.exception = exception\n        self.traceback = traceback",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class PluginError(BottleException):\n    pass\nclass JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")\n        app.config._define('json.ascii', default=False, validate=bool,\n                          help=\"Use only 7-bit ASCII characters in output.\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    \"\"\" This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. \"\"\"\n    name = 'template'\n    api = 2\n    def setup(self, app):\n        app.tpl = self\n    def apply(self, callback, route):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        \"\"\" Create a virtual package that redirects imports (see PEP 302). \"\"\"\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, new_module(name))\n        self.module.__dict__.update({\n            '__file__': __file__,\n            '__path__': [],\n            '__all__': [],",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self):\n        return len(self.dict)\n    def __iter__(self):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    \"\"\" This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. \"\"\"\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key):\n        return _hkey(key) in self.dict\n    def __delitem__(self, key):\n        del self.dict[_hkey(key)]",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    \"\"\" This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}\n        self._change_listener = []",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self.default\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024 * 64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in 'fileno', 'close', 'read', 'readlines', 'tell', 'seek':\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        part = read(buff)\n        while part:\n            yield part",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _closeiter(object):\n    \"\"\" This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). \"\"\"\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ResourceManager(object):\n    \"\"\" This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    \"\"\"\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = opener",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        \"\"\" Wrapper for a single file uploaded via ``multipart/form-data``. \"\"\"\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultipartError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)\nclass _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartParser",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _MultipartParser(object):\n    def __init__(\n        self,\n        stream,\n        boundary,\n        content_length=-1,\n        disk_limit=2 ** 30,\n        mem_limit=2 ** 20,\n        memfile_limit=2 ** 18,\n        buffer_size=2 ** 16,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_MultipartPart",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _MultipartPart(object):\n    def __init__(self, buffer_size=2 ** 16, memfile_limit=2 ** 18, charset=\"latin1\"):\n        self.headerlist = []\n        self.headers = None\n        self.file = False\n        self.size = 0\n        self._buf = b\"\"\n        self.disposition = None\n        self.name = None\n        self.filename = None",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler):  # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join('%s=%s' % (k, repr(v))",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler):  # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self):  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"The wsgi server part of cherrypy was split into a new \"\n                    \"project called 'cheroot'.\", \"Use the 'cheroot' server \"\n                    \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port, _quiet=self.quiet, **self.options)\nclass PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,\n                         host=self.host,\n                         port=str(self.port), **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler):  # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port, address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        depr(0, 13, \"AppEngineServer no longer required\",\n             \"Configure your application directly in your app.yaml\")\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        depr(0, 13, \"Diesel is not tested or supported and will be removed.\")\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"\n            raise RuntimeError(msg)\n        if self.quiet:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import BaseApplication\n        if self.host.startswith(\"unix:\"):\n            config = {'bind': self.host}\n        else:\n            config = {'bind': \"%s:%d\" % (self.host, self.port)}\n        config.update(self.options)\n        class GunicornApplication(BaseApplication):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `backlog` adjust the eventlet backlog parameter which is the maximum\n          number of queued connections. Should be at least 1; the maximum\n          value is system-dependent.\n        * `family`: (default is 2) socket family, optional. See socket\n          documentation for available families.\n    \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen, patcher",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port, reuse_port=True)\nclass AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AsyncioServerAdapter",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):\n        import asyncio\n        return asyncio.new_event_loop()\n    def run(self, handler):\n        import asyncio",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpUVLoopServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AiohttpUVLoopServer(AiohttpServer):\n    \"\"\"uvloop\n       https://github.com/MagicStack/uvloop\n    \"\"\"\n    def get_event_loop(self):\n        import uvloop\n        return uvloop.new_event_loop()\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    \"\"\" Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets too old. \"\"\"\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.daemon = True\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TemplateError(BottleException):\n    pass\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,\n                 lookup=None,\n                 encoding='utf8', **settings):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding': self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)\n        if self.source:\n            self.tpl = self.env.from_string(self.source)\n        else:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self,\n                escape_func=html_escape,\n                noescape=False,\n                syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError):\n    pass\nclass StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')\n            |\"\"(?!\")\n            |'{6}",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    if isinstance(s, unicode):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError:\n        pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def depr(major, minor, cause, fix, stacklevel=3):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\\n           \"Fix: %s\\n\" % (major, minor, cause, fix)\n    if DEBUG == 'strict':\n        raise DeprecationWarning(text)\n    warnings.warn(text, DeprecationWarning, stacklevel=stacklevel)\n    return DeprecationWarning(text)\ndef makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):\n        return list(data)\n    elif data:\n        return [data]\n    else:\n        return []\nclass DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def static_file(filename, root,\n                mimetype=True,\n                download=False,\n                charset='UTF-8',\n                etag=None,\n                headers=None):\n    \"\"\" Open a file in a safe way and return an instance of :exc:`HTTPResponse`\n        that can be sent back to the client.\n        :param filename: Name or path of the file to send, relative to ``root``.\n        :param root: Root path for file lookups. Should be an absolute directory",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):\n        # aware datetime.datetime is converted to UTC time\n        # naive datetime.datetime is treated as UTC time\n        value = value.utctimetuple()\n    elif isinstance(value, datedate):\n        # datetime.date is naive, and is treated as UTC time\n        value = value.timetuple()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return calendar.timegm(ts[:8] + (0, )) - (ts[9] or 0)\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':', 1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    \"\"\" Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.\"\"\"\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen - int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_encode(data, key, digestmod=None):\n    \"\"\" Encode and sign a pickle-able object. Return a (byte) string \"\"\"\n    depr(0, 13, \"cookie_encode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    digestmod = digestmod or hashlib.sha256\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=digestmod).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"\n    depr(0, 13, \"cookie_decode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        digestmod = digestmod or hashlib.sha256\n        hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()\n        if _lscmp(sig[1:], base64.b64encode(hashed)):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    \"\"\" Return True if the argument looks like a encoded cookie.\"\"\"\n    depr(0, 13, \"cookie_is_encoded() will be removed soon.\",\n                \"Do not use this API directly.\")\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__', '/').lstrip('/')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    \"\"\" Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    \"\"\"\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    \"\"\" Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    \"\"\" Return a callable that relays calls to the current default app. \"\"\"\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN\n    NORUN, nr_old = True, NORUN\n    tmp = default_app.push()  # Create a new \"default application\"\n    try:\n        rv = load(target)  # Import the target module\n        return rv if callable(rv) else tmp",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,\n        config=None, **kargs):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    \"\"\"\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    \"\"\"\n    tpl = args[0] if args else None\n    for dictarg in args[1:]:\n        kwargs.update(dictarg)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"\n    def decorator(func):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def main():\n    _main(sys.argv)\nif __name__ == '__main__':  # pragma: no coverage\n    main()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__version__ = '0.13.4'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=args[0], usage=\"%(prog)s [options] package.module:app\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "py = sys.version_info\npy3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "py3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError\n    from collections.abc import MutableMapping as DictMixin",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    \"\"\" A subclass of :class:`Response` that can be raised or returned from request\n        handlers to short-curcuit request processing and override changes made to the\n        global :data:`request` object. This bypasses error handlers, even if the status\n        code indicates an error. Return or raise :class:`HTTPError` to trigger error\n        handlers.\n    \"\"\"\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_UNSET",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_UNSET = object()\nclass ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data and overlays.\n        This dict-like class is heavily optimized for read access.\n        Read-only methods and item access should be as fast as a native dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_hsplit",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_hsplit = re.compile('(?:(?:\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\")|([^;,=]+))([;,=]?)').findall\ndef _parse_http_header(h):\n    \"\"\" Parses a typical multi-valued and parametrised HTTP header (e.g. Accept headers) and returns a list of values\n        and parameters. For non-standard or broken input, this implementation may return partial results.\n    :param h: A header string (e.g. ``text/html,text/plain;q=0.9,*/*;q=0.8``)\n    :return: List of (value, params) tuples. The second element is a (possibly empty) dict.\n    \"\"\"\n    values = []\n    if '\"' not in h:  # INFO: Fast path without regexp (~2x faster)\n        for value in h.split(','):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Multipart Handling ###########################################################\n###############################################################################\n# cgi.FieldStorage was deprecated in Python 3.11 and removed in 3.13\n# This implementation is based on https://github.com/defnull/multipart/\nclass MultipartError(HTTPError):\n    def __init__(self, msg):\n        HTTPError.__init__(self, 400, \"MultipartError: \" + msg)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "NORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[451]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans-serif;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "apps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)\n        sys.exit(1)\n    if args.version:\n        print('Bottle %s' % __version__)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "extract_file",
        "kind": 2,
        "importPath": "venv.Scripts.vba_extract",
        "description": "venv.Scripts.vba_extract",
        "peekOfCode": "def extract_file(xlsm_zip, filename):\n    # Extract a single file from an Excel xlsm macro file.\n    data = xlsm_zip.read(\"xl/\" + filename)\n    # Write the data to a local file.\n    file = open(filename, \"wb\")\n    file.write(data)\n    file.close()\n# The VBA project file and project signature file we want to extract.\nvba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"",
        "detail": "venv.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_filename",
        "kind": 5,
        "importPath": "venv.Scripts.vba_extract",
        "description": "venv.Scripts.vba_extract",
        "peekOfCode": "vba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"",
        "detail": "venv.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_signature_filename",
        "kind": 5,
        "importPath": "venv.Scripts.vba_extract",
        "description": "venv.Scripts.vba_extract",
        "peekOfCode": "vba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"\n        \"file.\\n\"",
        "detail": "venv.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "get_lang",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_lang():\n    lang = request.cookies.get('lang')\n    if lang not in TEXTS:\n        lang = 'ko'\n    return lang\ndef t(key: str, default: str = None, lang: str = None) -> str:\n    \"\"\"多语言取词：优先当前语言；其次英文；最后用 key 或 default\"\"\"\n    lang = lang or get_lang()\n    return TEXTS.get(lang, TEXTS['ko']).get(key, TEXTS['en'].get(key, default if default is not None else key))\nbase_path = os.path.abspath(os.path.dirname(__file__))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def t(key: str, default: str = None, lang: str = None) -> str:\n    \"\"\"多语言取词：优先当前语言；其次英文；最后用 key 或 default\"\"\"\n    lang = lang or get_lang()\n    return TEXTS.get(lang, TEXTS['ko']).get(key, TEXTS['en'].get(key, default if default is not None else key))\nbase_path = os.path.abspath(os.path.dirname(__file__))\napp = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "is_safe_image_relpath",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def is_safe_image_relpath(p: str) -> bool:\n    \"\"\"仅允许 'images/xxx.ext'，并且最终必须落在 RUN_IMAGES 目录内\"\"\"\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False\n    if not SAFE_IMAGE_RE.fullmatch(p):\n        return False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connect_db",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def connect_db():\n    db_path = os.path.join(_DB_ROOT, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    conn.execute('PRAGMA foreign_keys=ON')\n    conn.execute('PRAGMA synchronous=NORMAL')\n    conn.execute('PRAGMA temp_store=MEMORY')\n    conn.execute('PRAGMA cache_size=-4000')  # ~4MB\n    return conn\n# ---- 通用：金额转“整数”（四舍五入） ----\ndef to_amount_int(v, default=0):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "to_amount_int",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def to_amount_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return int(round(float(v)))\n    except Exception:\n        return default",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "healthz",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def healthz():\n    return 'ok', 200\n# ---- 数据库初始化（添加 *_int 字段，及 sale_items.price_int） ----\ndef init_db():\n    # 关键：任何入口都先迁移一遍（可重入）\n    _maybe_migrate_legacy()\n    db_path = os.path.join(_DB_ROOT, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute('PRAGMA journal_mode=WAL')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def init_db():\n    # 关键：任何入口都先迁移一遍（可重入）\n    _maybe_migrate_legacy()\n    db_path = os.path.join(_DB_ROOT, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute('PRAGMA journal_mode=WAL')\n    c.execute('PRAGMA synchronous=NORMAL')\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS items (",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "safe_filename",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def safe_filename(filename):\n    return re.sub(r'[^A-Za-z0-9_\\-]', '_', filename or '')\n@app.route('/set_lang/<lang>')\ndef set_lang(lang):\n    if lang not in TEXTS:\n        lang = 'ko'\n    resp = make_response(redirect(request.referrer or url_for('settings')))\n    resp.set_cookie('lang', lang, max_age=3600*24*365)\n    return resp\n@app.route('/')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "set_lang",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def set_lang(lang):\n    if lang not in TEXTS:\n        lang = 'ko'\n    resp = make_response(redirect(request.referrer or url_for('settings')))\n    resp.set_cookie('lang', lang, max_age=3600*24*365)\n    return resp\n@app.route('/')\ndef index():\n    lang = get_lang()\n    return render_template('index.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    lang = get_lang()\n    return render_template('index.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/manage')\ndef manage():\n    lang = get_lang()\n    return render_template('manage.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/sales')\ndef sales_page():\n    lang = get_lang()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "manage",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def manage():\n    lang = get_lang()\n    return render_template('manage.html', lang=lang, texts=TEXTS[lang], categories=CATEGORY_CODE, sizes=SIZE_CODE)\n@app.route('/sales')\ndef sales_page():\n    lang = get_lang()\n    return render_template('sales.html', lang=lang, texts=TEXTS[lang])\n@app.route('/stocklog')\ndef stocklog():\n    lang = get_lang()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sales_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def sales_page():\n    lang = get_lang()\n    return render_template('sales.html', lang=lang, texts=TEXTS[lang])\n@app.route('/stocklog')\ndef stocklog():\n    lang = get_lang()\n    return render_template('stocklog.html', lang=lang, texts=TEXTS[lang])\n@app.route('/settings')\ndef settings():\n    lang = get_lang()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stocklog",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stocklog():\n    lang = get_lang()\n    return render_template('stocklog.html', lang=lang, texts=TEXTS[lang])\n@app.route('/settings')\ndef settings():\n    lang = get_lang()\n    return render_template('settings.html', lang=lang, texts=TEXTS[lang])\n# ---- 工具：安全类型转换 ----\ndef to_int(v, default=0):\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def settings():\n    lang = get_lang()\n    return render_template('settings.html', lang=lang, texts=TEXTS[lang])\n# ---- 工具：安全类型转换 ----\ndef to_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "to_int",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def to_int(v, default=0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return int(float(v))\n    except Exception:\n        return default",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "to_float",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def to_float(v, default=0.0):\n    try:\n        if pd.isna(v):\n            return default\n    except Exception:\n        pass\n    try:\n        return float(v)\n    except Exception:\n        return default",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "norm_category",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def norm_category(cat):\n    cat = (cat or '').strip().lower()\n    # 兼容历史/导入把 pants 当作下装\n    if cat == 'pants':\n        cat = 'bottom'\n    return cat if cat in CATEGORY_CODE else CATEGORY_CODE[0]\ndef norm_size(sz):\n    sz = (sz or '').strip().lower()\n    return sz if sz in SIZE_CODE else SIZE_CODE[0]\n# ---- Excel 导入导出接口 ----",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "norm_size",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def norm_size(sz):\n    sz = (sz or '').strip().lower()\n    return sz if sz in SIZE_CODE else SIZE_CODE[0]\n# ---- Excel 导入导出接口 ----\n@app.route('/export/items')\ndef export_items():\n    conn = connect_db()\n    # 导出用整数列；旧数据回落到 ROUND(price)，并规避 0 覆盖\n    df = pd.read_sql_query(\n        '''",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "export_items",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def export_items():\n    conn = connect_db()\n    # 导出用整数列；旧数据回落到 ROUND(price)，并规避 0 覆盖\n    df = pd.read_sql_query(\n        '''\n        SELECT barcode,\n               name,\n               COALESCE(NULLIF(price_int,0), CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(NULLIF(wholesale_price_int,0), CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, discontinued_time, image",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "export_sales",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def export_sales():\n    \"\"\"支持过滤 + CSV 流式导出（金额为整数）\"\"\"\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    fmt = (request.args.get('fmt') or 'xlsx').lower()\n    where = []\n    params = []\n    if start and end:\n        where.append(\"time BETWEEN ? AND ?\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "import_items",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def import_items():\n    file = request.files.get('file')\n    if not file:\n        return jsonify({'msg': '파일이 없습니다'}), 400\n    try:\n        df = pd.read_excel(file)\n    except Exception as e:\n        return jsonify({'msg': f'엑셀 오류: {e}'}), 400\n    conn = connect_db()\n    c = conn.cursor()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def add_item():\n    if request.content_type and request.content_type.startswith('multipart'):\n        barcode = (request.form.get('barcode') or '').strip()\n        if not barcode:\n            return jsonify({'msg': t('barcode_required')}), 400\n        barcode_safe = safe_filename(barcode)\n        name = request.form.get('name', '이름 없음')\n        price_i = to_amount_int(request.form.get('price', 0), 0)\n        wholesale_i = to_amount_int(request.form.get('wholesale_price', 0), 0)\n        qty = to_int(request.form.get('qty', 0), 0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_item",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_item(barcode):\n    barcode = (barcode or '').strip()\n    if not barcode:\n        return jsonify({'msg': t('barcode_required')}), 400\n    # 读取参数\n    if request.content_type and request.content_type.startswith('multipart'):\n        # 支持修改为新 code\n        want_barcode = (request.form.get('barcode') or '').strip() or barcode\n        name = request.form.get('name')\n        price_i = to_amount_int(request.form.get('price', 0), 0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    # 输出整数价格（旧数据自动回落，规避 0 覆盖）\n    c.execute('''\n        SELECT barcode, name,\n               COALESCE(NULLIF(price_int,0), CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(NULLIF(wholesale_price_int,0), CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, image, discontinued_time\n        FROM items WHERE barcode=?",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "del_item",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def del_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('SELECT image FROM items WHERE barcode=?', (barcode,))\n    row = c.fetchone()\n    if row and row[0] and is_safe_image_relpath(row[0]):\n        relname = row[0].split('/', 1)[1]\n        img_path = os.path.normpath(os.path.join(IMAGE_FOLDER, relname))\n        try:\n            if os.path.exists(img_path):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "restore_item",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def restore_item(barcode):\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('UPDATE items SET status=\"정상\", discontinued_time=NULL WHERE barcode=?', (barcode,))\n    conn.commit()\n    conn.close()\n    return jsonify({'success': True})\n# ========= TOP10（原有） =========\n@app.route('/api/sales/top_items')\ndef api_sales_top_items():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_sales_top_items",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_sales_top_items():\n    days = int(request.args.get('days', 60) or 60)\n    pay_type = request.args.get('pay_type')\n    since = (datetime.now() - timedelta(days=days)).strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    sql = \"SELECT time, items FROM sales WHERE time >= ?\"\n    params = [since]\n    if pay_type in ('cash', 'card'):\n        sql += \" AND pay_type=?\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_items",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_items():\n    category = request.args.get('category', None)\n    sort = request.args.get('sort', None)\n    conn = connect_db()\n    c = conn.cursor()\n    base_sql = '''\n        SELECT barcode, name,\n               COALESCE(NULLIF(price_int,0), CAST(ROUND(price) AS INTEGER)) AS price,\n               COALESCE(NULLIF(wholesale_price_int,0), CAST(ROUND(wholesale_price) AS INTEGER)) AS wholesale_price,\n               qty, category, size, status, image, discontinued_time",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "search_items",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def search_items():\n    q = (request.args.get('q') or '').strip()\n    category = request.args.get('category')\n    sort = request.args.get('sort')\n    try:\n        page = max(1, int(request.args.get('page', 1) or 1))\n    except Exception:\n        page = 1\n    try:\n        page_size = max(1, min(200, int(request.args.get('page_size', 50) or 50)))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_item_sales",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_item_sales(barcode):\n    \"\"\"优先走 sale_items（整数价）；老库无明细或无 *_int 列时回退旧逻辑\"\"\"\n    conn = connect_db()\n    c = conn.cursor()\n    try:\n        # 如果有明细则走明细，补充 size/category，并回退规避 0 覆盖\n        c.execute('SELECT 1 FROM sale_items WHERE barcode=? LIMIT 1', (barcode,))\n        test = c.fetchone()\n        if test is not None:\n            c.execute('''",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sale",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def sale():\n    data = request.json or {}\n    cart = data.get('cart', {}) or {}\n    total_i = to_amount_int(data.get('total', 0), 0)\n    pay_type = data.get('pay_type', 'cash')\n    time_str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    try:\n        # 校验",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_sales",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_sales():\n    try:\n        page = max(1, int(request.args.get('page', 1) or 1))\n    except Exception:\n        page = 1\n    try:\n        page_size = max(1, min(200, int(request.args.get('page_size', 20) or 20)))\n    except Exception:\n        page_size = 20\n    pay_type = request.args.get('pay_type')  # 'cash' / 'card' / None",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_delete_sales",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_delete_sales():\n    data = request.get_json(force=True) or {}\n    ids = data.get('ids', []) or []\n    reason = data.get('reason', 'mistake')\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    deleted = 0\n    failed = 0\n    not_found = 0",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_refund_sale",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_refund_sale():\n    data = request.get_json(force=True) or {}\n    ids = data.get('ids', []) or []\n    reason = data.get('reason', 'refund')\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    conn = connect_db()\n    c = conn.cursor()\n    updated = 0\n    failed = 0\n    skipped_already_refunded = 0",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_refund_stats",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_refund_stats():\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute(\"SELECT reason, count(*), sum(amount) FROM refund_log GROUP BY reason\")\n    result = []\n    for reason, cnt, total in c.fetchall():\n        result.append({'reason': reason, 'count': cnt, 'amount': total or 0})\n    conn.close()\n    return jsonify(result)\n# ========= 销售统计（按整数总额） =========",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_sales_stats",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_sales_stats():\n    group = request.args.get('group', 'day')\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    conn = connect_db()\n    c = conn.cursor()\n    query = '''\n        SELECT time, COALESCE(NULLIF(total_int,0), CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type\n        FROM sales",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_heatmap_hour_weekday",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_heatmap_hour_weekday():\n    start = request.args.get('start')\n    end = request.args.get('end')\n    pay_type = request.args.get('pay_type')\n    metric = request.args.get('metric', 'orders')\n    conn = connect_db()\n    c = conn.cursor()\n    query = '''\n        SELECT time, items, COALESCE(NULLIF(total_int,0), CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type\n        FROM sales",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "api_stockio",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def api_stockio():\n    data = request.get_json(force=True) or {}\n    barcode = (data.get('barcode') or '').strip()\n    change = to_int(data.get('change'), 0)\n    io_type = data.get('type', 'in')  # in / out\n    if not barcode or change <= 0:\n        return jsonify({'msg': t('invalid_params')}), 400\n    delta = change if io_type == 'in' else -change\n    conn = connect_db()\n    c = conn.cursor()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "receipt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def receipt(sale_id):\n    lang = get_lang()\n    conn = connect_db()\n    c = conn.cursor()\n    c.execute('SELECT time, items, COALESCE(NULLIF(total_int,0), CAST(ROUND(total) AS INTEGER)) AS total_i, pay_type FROM sales WHERE id=?', (sale_id,))\n    row = c.fetchone()\n    conn.close()\n    if not row:\n        return f'No such sale_id: {sale_id}', 404\n    time, items_json, subtotal_i, pay_type = row",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "image_to_zpl",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def image_to_zpl(image_path, image_name=\"RECEIPT.GRF\"):\n    img = Image.open(image_path).convert(\"L\")\n    threshold = 200\n    img = img.point(lambda x: 255 if x > threshold else 0, mode='1')\n    img = ImageOps.invert(img.convert('L')).convert('1')\n    w, h = img.size\n    row_bytes = (w + 7) // 8\n    total_bytes = row_bytes * h\n    data = img.tobytes()\n    zpl_data = \"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "print_receipt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def print_receipt(sale_id):\n    from flask import jsonify\n    H = _estimate_receipt_height(sale_id)\n    W = 624\n    tmp_img_path = None\n    try:\n        base_url = (request.host_url or \"http://127.0.0.1:5000\").rstrip('/')\n        url = f\"{base_url}/receipt/{sale_id}?for_print=1\"\n        hti = Html2Image()\n        with tempfile.NamedTemporaryFile(delete=False, suffix=\".png\") as tmpf:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CATEGORY_CODE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "CATEGORY_CODE = ['bag', 'top', 'bottom', 'shoes']\nSIZE_CODE = ['free', 's', 'm', 'l', 'xl']\nTEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '소매가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SIZE_CODE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "SIZE_CODE = ['free', 's', 'm', 'l', 'xl']\nTEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '소매가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',\n        'print_ok': '영수증 출력 성공', 'print_fail': '영수증 출력 실패', 'sale_ok': '결제 성공!',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "TEXTS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "TEXTS = {\n    'ko': {\n        'title': '계산대', 'manage': '상품 관리', 'sales': '판매 기록',\n        'setting': '설정', 'print': '영수증 출력', 'total': '총액',\n        'product': '상품', 'qty': '수량', 'price': '소매가', 'wholesale_price': '도매가',\n        'subtotal': '합계', 'date': '날짜', 'order': '주문번호',\n        'thank': '감사합니다! Thank you! 谢谢光临!', 'contact': '연락처', 'export': '엑셀 내보내기',\n        'add': '상품 추가', 'delete': '삭제', 'stocklog': '입출고 관리', 'checkout': '결제하기',\n        'print_ok': '영수증 출력 성공', 'print_fail': '영수증 출력 실패', 'sale_ok': '결제 성공!',\n        'added': '장바구니에 추가됨', 'remove': '삭제됨', 'empty_cart': '장바구니가 비었습니다',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "base_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "base_path = os.path.abspath(os.path.dirname(__file__))\napp = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)\n# 仅允许本机端口\nCORS(app, resources={\n    r\"/*\": {\"origins\": [re.compile(r\"^http://127\\.0\\.0\\.1:\\d+$\"),\n                       re.compile(r\"^http://localhost:\\d+$\")]}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(\n    __name__,\n    template_folder=os.path.join(base_path, 'templates'),\n    static_folder=os.path.join(base_path, 'static')\n)\n# 仅允许本机端口\nCORS(app, resources={\n    r\"/*\": {\"origins\": [re.compile(r\"^http://127\\.0\\.0\\.1:\\d+$\"),\n                       re.compile(r\"^http://localhost:\\d+$\")]}\n})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "RUN_DIR",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "RUN_DIR = _compute_run_dir()\nRUN_UPLOADS = os.path.join(RUN_DIR, 'uploads')\nRUN_IMAGES = os.path.join(RUN_DIR, 'images')\nos.makedirs(RUN_DIR, exist_ok=True)\nos.makedirs(RUN_UPLOADS, exist_ok=True)\nos.makedirs(RUN_IMAGES, exist_ok=True)\n# 迁移：首次运行把旧库与旧图片迁移到 RUN_DIR\ndef _maybe_migrate_legacy():\n    # DB\n    legacy_db = os.path.join(base_path, 'inventory.db')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "RUN_UPLOADS",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "RUN_UPLOADS = os.path.join(RUN_DIR, 'uploads')\nRUN_IMAGES = os.path.join(RUN_DIR, 'images')\nos.makedirs(RUN_DIR, exist_ok=True)\nos.makedirs(RUN_UPLOADS, exist_ok=True)\nos.makedirs(RUN_IMAGES, exist_ok=True)\n# 迁移：首次运行把旧库与旧图片迁移到 RUN_DIR\ndef _maybe_migrate_legacy():\n    # DB\n    legacy_db = os.path.join(base_path, 'inventory.db')\n    new_db = os.path.join(RUN_DIR, 'inventory.db')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "RUN_IMAGES",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "RUN_IMAGES = os.path.join(RUN_DIR, 'images')\nos.makedirs(RUN_DIR, exist_ok=True)\nos.makedirs(RUN_UPLOADS, exist_ok=True)\nos.makedirs(RUN_IMAGES, exist_ok=True)\n# 迁移：首次运行把旧库与旧图片迁移到 RUN_DIR\ndef _maybe_migrate_legacy():\n    # DB\n    legacy_db = os.path.join(base_path, 'inventory.db')\n    new_db = os.path.join(RUN_DIR, 'inventory.db')\n    if (not os.path.exists(new_db)) and os.path.exists(legacy_db):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "UPLOAD_FOLDER = RUN_UPLOADS\nIMAGE_FOLDER = RUN_IMAGES\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    \"\"\"仅允许 'images/xxx.ext'，并且最终必须落在 RUN_IMAGES 目录内\"\"\"\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "IMAGE_FOLDER",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "IMAGE_FOLDER = RUN_IMAGES\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    \"\"\"仅允许 'images/xxx.ext'，并且最终必须落在 RUN_IMAGES 目录内\"\"\"\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nSAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    \"\"\"仅允许 'images/xxx.ext'，并且最终必须落在 RUN_IMAGES 目录内\"\"\"\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SAFE_IMAGE_RE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "SAFE_IMAGE_RE = re.compile(r'^images/[A-Za-z0-9_\\-]+\\.(?:jpe?g|png|webp)$', re.I)\ndef is_safe_image_relpath(p: str) -> bool:\n    \"\"\"仅允许 'images/xxx.ext'，并且最终必须落在 RUN_IMAGES 目录内\"\"\"\n    if not p:\n        return False\n    p = p.replace('\\\\', '/')\n    # 禁止绝对路径、盘符、上跳\n    if p.startswith('/') or '..' in p or re.match(r'^[A-Za-z]:[\\\\/]', p):\n        return False\n    if not SAFE_IMAGE_RE.fullmatch(p):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "_DB_ROOT",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "_DB_ROOT = RUN_DIR\ndef connect_db():\n    db_path = os.path.join(_DB_ROOT, 'inventory.db')\n    conn = sqlite3.connect(db_path)\n    conn.execute('PRAGMA foreign_keys=ON')\n    conn.execute('PRAGMA synchronous=NORMAL')\n    conn.execute('PRAGMA temp_store=MEMORY')\n    conn.execute('PRAGMA cache_size=-4000')  # ~4MB\n    return conn\n# ---- 通用：金额转“整数”（四舍五入） ----",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "is_listening",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:\n        return False\ndef pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"\n    if not is_listening(preferred):\n        return preferred",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pick_port",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"\n    if not is_listening(preferred):\n        return preferred\n    for p in range(preferred + 1, preferred + 11):\n        if not is_listening(p):\n            return p\n    s = socket.socket(); s.bind(('127.0.0.1', 0))\n    p = s.getsockname()[1]; s.close()\n    return p",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wait_port",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def wait_port(port: int, timeout: float = 12.0) -> bool:\n    t0 = time.time()\n    while time.time() - t0 < timeout:\n        if is_listening(port):\n            return True\n        time.sleep(0.12)\n    return False\n# 不使用系统代理的 opener（本地健康检查走直连）\n_NO_PROXY_OPENER = urllib.request.build_opener(urllib.request.ProxyHandler({}))\ndef http_ok(url: str, path: str) -> bool:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "http_ok",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def http_ok(url: str, path: str) -> bool:\n    try:\n        with _NO_PROXY_OPENER.open(url + path, timeout=0.9) as r:\n            return 200 <= r.status < 400\n    except Exception:\n        return False\ndef wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()\n    while time.time() - t0 < timeout:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "wait_http_ready",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()\n    while time.time() - t0 < timeout:\n        if http_ok(base_url, '/healthz') or http_ok(base_url, '/'):\n            return True\n        time.sleep(0.2)\n    return False\n# ---------------- 启动 Flask ----------------\ndef run_flask(port: int):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run_flask(port: int):\n    try:\n        from app import app, init_db\n        init_db()\n        logging.info(f'Flask 服务启动中：127.0.0.1:{port}')\n        app.run(host='127.0.0.1', port=port, debug=False, use_reloader=False, threaded=True)\n    except Exception as e:\n        logging.exception(f'Flask 启动失败：{e}')\n# ---------------- 程序入口 ----------------\nif __name__ == '__main__':",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ['NO_PROXY']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ['NO_PROXY'] = '127.0.0.1,localhost'\nos.environ['no_proxy'] = '127.0.0.1,localhost'\n# ---------------- 日志（控制台 + 文件，启动/异常都可追溯） ----------------\nLOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ['no_proxy']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ['no_proxy'] = '127.0.0.1,localhost'\n# ---------------- 日志（控制台 + 文件，启动/异常都可追溯） ----------------\nLOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LOG_DIR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LOG_DIR = os.path.join(os.getcwd(), 'logs'); os.makedirs(LOG_DIR, exist_ok=True)\nLOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LOG_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LOG_PATH = os.path.join(LOG_DIR, 'treasurepos.log')\nfmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "fmt = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s','%Y-%m-%d %H:%M:%S')\nroot = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "root = logging.getLogger(); root.setLevel(logging.INFO)\nch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ch",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ch = logging.StreamHandler(sys.stdout); ch.setFormatter(fmt); root.addHandler(ch)\nfh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fh",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "fh = RotatingFileHandler(LOG_PATH, maxBytes=5*1024*1024, backupCount=3, encoding='utf-8'); fh.setFormatter(fmt); root.addHandler(fh)\nlogging.getLogger('pywebview').setLevel(logging.INFO)\nlogging.getLogger('werkzeug').setLevel(logging.INFO)\nPREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "PREFERRED_PORT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "PREFERRED_PORT = 5000\n# ---------------- 基础探测 ----------------\ndef is_listening(port: int) -> bool:\n    try:\n        with socket.create_connection(('127.0.0.1', port), timeout=0.25):\n            return True\n    except Exception:\n        return False\ndef pick_port(preferred: int) -> int:\n    \"\"\"优先 5001~5010，最后让 OS 分配随机可用端口\"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "_NO_PROXY_OPENER",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "_NO_PROXY_OPENER = urllib.request.build_opener(urllib.request.ProxyHandler({}))\ndef http_ok(url: str, path: str) -> bool:\n    try:\n        with _NO_PROXY_OPENER.open(url + path, timeout=0.9) as r:\n            return 200 <= r.status < 400\n    except Exception:\n        return False\ndef wait_http_ready(base_url: str, timeout: float = 8.0) -> bool:\n    \"\"\"等待 /healthz 或 / 有 2xx/3xx 响应；不阻塞太久\"\"\"\n    t0 = time.time()",
        "detail": "main",
        "documentation": {}
    }
]